basePath: /
definitions:
  AccessTokenDetails:
    description: Access token details that are currently associated with this user
    example:
      client_id: c456b-26230-fa8ed-d19ab-05ce2-bf0aa
      customer_id: '123456789'
      expires_in: 3600
      realm: customer
      scopes:
        - user.view
        - user.email
        - user.address
        - user.edit
        - organization.view
        - organization.address
        - collections.view
        - collections.edit
        - licenses.view
        - licenses.create
        - media.upload
        - media.submit
        - media.edit
        - purchases.view
        - purchases.create
      user_id: '123456789'
      username: jdoe
    properties:
      client_id:
        description: Client ID that is associated with the user
        type: string
      contributor_id:
        description: Contributor ID that is associated with the user
        type: string
      customer_id:
        description: Customer ID that is associated with the user
        type: string
      expires_in:
        description: >-
          Number of seconds until the access token expires; no expiration if
          this value is null
        type: integer
      organization_id:
        description: Organization ID that is associated with the user
        type: string
      realm:
        description: Type of access token
        enum:
          - customer
          - contributor
        type: string
      scopes:
        description: Scopes that this access token provides when used as authentication
        items:
          type: string
        type: array
      user_id:
        description: User ID that is associated with the user
        type: string
      username:
        description: User name that is associated with the user
        type: string
    type: object
  Album:
    additionalProperties: false
    description: Album metadata
    example:
      id: '1234567'
      title: Happy Music
    properties:
      id:
        description: The album ID
        type: string
      title:
        description: The album title
        type: string
    required:
      - id
      - title
    type: object
  Allotment:
    description: An allotment of credits as part of a subscription
    example:
      downloads_left: 5
      downloads_limit: 10
      end_time: '2020-05-29T17:10:22.000Z'
      start_time: '2020-05-29T17:10:22.000Z'
    properties:
      downloads_left:
        description: Number of credits remaining in the subscription
        type: integer
      downloads_limit:
        description: Total number of credits available to this subscription
        type: integer
      end_time:
        description: Date the subscription ends
        format: date-time
        type: string
      start_time:
        description: Date the subscription started
        format: date-time
        type: string
    type: object
  Artist:
    description: Metadata about the artist that created the media
    example:
      name: The Happy Tunes Band
    properties:
      name:
        description: The artist's name
        type: string
    required:
      - name
    type: object
  Audio:
    additionalProperties: false
    description: Audio metadata
    example:
      added_date: '2016-08-16T00:00:00.000Z'
      artists:
        - name: Klimenko Music
      assets:
        clean_audio:
          file_size: 35188408
        preview_mp3:
          file_size: 4400203
          url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3'
        preview_ogg:
          file_size: 4453197
          url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg'
        waveform:
          file_size: 18778
          url: 'https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png'
      bpm: 110
      contributor:
        id: '2847971'
      description: >-
        Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass
        drums and synth drums that create a euphoric, upbeat mood.
      duration: 183
      genres:
        - Dance/Electronic
        - Electro Pop
        - Pop/Rock
      id: '442583'
      instruments:
        - Piano
        - Synth bass
        - Synth drums
        - Synthesizer
      is_adult: false
      is_instrumental: true
      isrc: ''
      keywords:
        - celebratory
        - chic
        - euphoric
        - good times
        - hip
        - optimistic
        - party
        - soaring
        - upbeat
      language: en
      lyrics: ''
      media_type: audio
      moods:
        - Bright
        - Confident
        - Fun
        - Happy
        - Inspiring
        - Optimistic
        - Playful
        - Sophisticated
        - Stylish
        - Uplifting
      published_time: '2016-08-16T18:30:03.000Z'
      recording_version: ''
      releases: []
      similar_artists: []
      title: Another Tomorrow
      updated_time: '2016-08-18T21:59:33.000Z'
      url: ''
      vocal_description: ''
    properties:
      added_date:
        description: Date this track was added to the Shutterstock library
        format: date
        type: string
      affiliate_url:
        description: >-
          Affiliate referral link; appears only for registered affiliate
          partners
        type: string
      album:
        $ref: '#/definitions/Album'
      artists:
        description: List of artists
        items:
          $ref: '#/definitions/Artist'
        type: array
      assets:
        $ref: '#/definitions/AudioAssets'
      bpm:
        description: BPM (beats per minute) of this track
        type: integer
      contributor:
        $ref: '#/definitions/Contributor'
      deleted_time:
        format: date-time
        type: string
      description:
        description: Description of this track
        type: string
      duration:
        description: Duration of this track in seconds
        type: integer
      genres:
        description: List of all genres for this track
        items:
          description: Genre that is associated with this track
          type: string
        type: array
      id:
        description: Shutterstock ID of this track
        type: string
      instruments:
        description: List of all instruments that appear in this track
        items:
          description: Instrument that appears in this track
          type: string
        type: array
      is_adult:
        description: Whether or not this track contains adult content
        type: boolean
      is_instrumental:
        description: Whether or not this track is purely instrumental (lacking lyrics)
        type: boolean
      isrc:
        description: ''
        type: string
      keywords:
        description: List of all keywords for this track
        items:
          description: Keyword for this track
          type: string
        type: array
      language:
        description: Language of this track's lyrics
        type: string
      lyrics:
        description: Lyrics of this track
        type: string
      media_type:
        description: Media type of this track; should always be "audio"
        type: string
      model_releases:
        description: List of all model releases for this track
        items:
          $ref: '#/definitions/ModelRelease'
        type: array
      moods:
        description: List of all moods of this track
        items:
          description: Mood of this track
          type: string
        type: array
      published_time:
        description: Time this track was published
        format: date-time
        type: string
      recording_version:
        description: Recording version of this track
        type: string
      releases:
        description: List of all releases of this track
        items:
          description: Release of this track
          type: string
        type: array
      similar_artists:
        description: List of all similar artists of this track
        items:
          $ref: '#/definitions/Artist'
        type: array
      submitted_time:
        description: Time this track was submitted
        format: date-time
        type: string
      title:
        description: Title of this track
        type: string
      updated_time:
        description: Time this track was last updated
        format: date-time
        type: string
      url:
        description: ''
        type: string
      vocal_description:
        description: Vocal description of this track
        type: string
    required:
      - id
      - media_type
      - contributor
    type: object
  AudioAssetDetails:
    description: Information about a file that is part of an audio asset
    example:
      file_size: 4453197
      url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3'
    properties:
      file_size:
        description: File size of the track
        type: integer
      url:
        description: URL the track is available at
        type: string
    type: object
  AudioAssets:
    description: Files that are available as part of an audio asset
    example:
      clean_audio:
        file_size: 35188408
      preview_mp3:
        file_size: 4400203
        url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3'
      preview_ogg:
        file_size: 4453197
        url: 'https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg'
      waveform:
        file_size: 18778
        url: 'https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png'
    properties:
      album_art:
        $ref: '#/definitions/AudioAssetDetails'
      clean_audio:
        $ref: '#/definitions/AudioAssetDetails'
      original_audio:
        $ref: '#/definitions/AudioAssetDetails'
      preview_mp3:
        $ref: '#/definitions/AudioAssetDetails'
      preview_ogg:
        $ref: '#/definitions/AudioAssetDetails'
      waveform:
        $ref: '#/definitions/AudioAssetDetails'
    type: object
  AudioDataList:
    description: List of tracks
    example:
      data:
        - added_date: '2016-04-12T00:00:00.000Z'
          artists:
            - name: Fin Productions
          assets:
            clean_audio:
              file_size: 30760372
            preview_mp3:
              file_size: 3846606
              url: >-
                https://ak.picdn.net/shutterstock/audio/434750/preview/preview.mp3
            preview_ogg:
              file_size: 4402608
              url: >-
                https://ak.picdn.net/shutterstock/audio/434750/preview/preview.ogg
            waveform:
              file_size: 19822
              url: >-
                https://ak.picdn.net/shutterstock/audio/434750/waveform/waveform.png
          bpm: 100
          contributor:
            id: '2847971'
          description: >-
            Pulsing and feel-good, featuring slick electric guitar, synthesizer,
            bass, electronic drum pads and drums that create a positive,
            celebratory mood.
          duration: 160
          genres:
            - Dance/Electronic
            - Electro Pop
            - Pop/Rock
          id: '434750'
          instruments:
            - Bass
            - Drums
            - Electric guitar
            - Pads
            - Percussion
            - Synthesizer
          is_adult: false
          is_instrumental: true
          isrc: ''
          keywords:
            - breezy
            - celebration
            - festive
            - good times
            - hopeful
            - optimistic
            - party
            - positive
            - reflective
          language: en
          lyrics: ''
          media_type: audio
          moods:
            - Bright
            - Confident
            - Fun
            - Happy
            - Inspiring
            - Optimistic
            - Playful
            - Sophisticated
            - Stylish
            - Uplifting
          published_time: '2016-04-12T21:45:29.000Z'
          recording_version: ''
          releases: []
          similar_artists: []
          title: Fresh Love
          updated_time: '2016-08-18T22:03:11.000Z'
          vocal_description: ''
    properties:
      data:
        description: Tracks
        items:
          $ref: '#/definitions/Audio'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  AudioRenderResult:
    description: The output of an audio render in WAV or MP3 format
    example:
      created_date: '2021-07-13T20:19:30.000Z'
      files: []
      id: 2yZp13IhLqnjfh2KquDTOHUHzTiP
      preset: MASTER_MP3
      progress_percent: 0
      status: WAITING_COMPOSE
      timeline: {}
      updated_date: '2021-07-13T20:19:30.000Z'
    properties:
      created_date:
        description: The time the render was submitted to the API
        format: date-time
        type: string
      files:
        description: The files associated with the render
        items:
          $ref: '#/definitions/AudioRendersFilesList'
        type: array
      id:
        description: The alphanumeric ID of the simple render
        type: string
      preset:
        description: The file format preset
        enum:
          - MASTER_MP3
          - MASTER_WAV
          - STEMS_WAV
        type: string
      progress_percent:
        description: The current progress of the render as a percentage
        type: integer
      status:
        description: A coarse progress indicator
        enum:
          - WAITING_COMPOSE
          - RUNNING_COMPOSE
          - WAITING_RENDER
          - RUNNING_RENDER
          - CREATED
          - FAILED_CREATE
        type: string
      timeline:
        $ref: '#/definitions/AudioRenderTimeline'
      updated_date:
        description: The time that the audio output was uploaded
        format: date-time
        type: string
    required:
      - id
      - timeline
      - status
    type: object
  AudioRenderTimeline:
    description: >-
      A timeline object that represents either a request for music to be created
      or an entire music composition
    example:
      spans:
        - id: 123456
          instrument_groups:
            - instrument_group: The instrument ID
              statuses:
                - beat: 12
                  status: active
          regions:
            - beat: 12
              descriptor: The descriptor ID needed to compose the music
              end_type:
                beat: 12
                event: ending
                type: ringout
              id: 123456
              key:
                tonic_accidental: double flat
                tonic_note: c
                tonic_quality: major
              region: music
          span_type: metered
          tempo: 12345
          tempo_changes:
            - tempo: 12345
              time: 5
          time: 5
    properties:
      spans:
        description: >-
          A span object that represents the beginning of a period of absolute
          time
        items:
          $ref: '#/definitions/AudioRenderTimelineSpan'
        type: array
    type: object
  AudioRenderTimelineSpan:
    description: The beginning of a non-overlapping period of absolute time
    example:
      id: 111
      regions:
        - beat: 12
          descriptor: cinematic_minimal_tense
          end_type:
            beat: 24
            event: ending
            type: ringout
          id: 222
          key:
            tonic_note: c
            tonic_quality: major
          region: music
      span_type: metered
      tempo: 76
      time: 0
    properties:
      id:
        description: An identifier which must be unique within the parent span
        type: number
      instrument_groups:
        description: An array of instrument_group objects that are used in this span
        items:
          $ref: '#/definitions/AudioRenderTimelineSpanInstrumentGroup'
        type: array
      regions:
        description: An array of region objects within the span
        items:
          $ref: '#/definitions/AudioRenderTimelineSpanRegion'
        type: array
      span_type:
        description: >-
          Type of span; metered spans represent a pariod of time with music, and
          unmetered spans denote the end of the prior metered span
        enum:
          - metered
          - unmetered
        type: string
      tempo:
        description: >-
          The tempo, in beats per minute, at the start of the span; if not
          provided, the API selects a random tempo
        type: integer
      tempo_changes:
        description: >-
          Two or more inflection points in a tempo curve; the API creates a
          smoothly changing tempo by using a linear interpolation of the time
          between each tempo change
        items:
          $ref: '#/definitions/AudioRenderTimelineSpanTempoChanges'
        type: array
      time:
        description: 'The absolute time, in seconds, at which the span starts'
        type: integer
    required:
      - span_type
      - time
    type: object
  AudioRenderTimelineSpanInstrumentGroup:
    description: >-
      An instrument and the status objects that specify when that instrument
      plays
    example:
      instrument_group: bright_roomy_kit
      statuses:
        - beat: 12
          status: active
    properties:
      instrument_group:
        description: The instrument ID
        type: string
      statuses:
        description: An array of status objects
        items:
          $ref: '#/definitions/AudioRenderTimelineSpanInstrumentGroupStatus'
        type: array
    required:
      - instrument_group
    type: object
  AudioRenderTimelineSpanInstrumentGroupStatus:
    description: The status of an instrument at a specific beat
    example:
      beat: 12
      status: active
    properties:
      beat:
        description: 'The beat, relative to the span, at which the status begins'
        type: number
      status:
        description: Whether the instrument is playing or not
        enum:
          - active
          - inactive
        type: string
    required:
      - beat
      - status
    type: object
  AudioRenderTimelineSpanRegion:
    description: 'A period of music or silence, measured in beats'
    example:
      beat: 12
      descriptor: cinematic_minimal_tense
      end_type:
        beat: 24
        event: ending
        type: ringout
      id: 222
      key:
        tonic_note: c
        tonic_quality: major
      region: music
    properties:
      beat:
        description: >-
          The beat, relative to the span, at which the region object's music
          begins
        type: integer
      descriptor:
        description: The descriptor ID needed to compose the music
        type: string
      end_type:
        description: A high-level description of how a region ends
        properties:
          beat:
            description: >-
              The beat, relative to the start of the active region, at which the
              end_type begins; in other words, the ending starts on this beat of
              the region
            type: number
          event:
            description: The type of event
            enum:
              - ending
              - transition
            type: string
          type:
            description: >-
              The specific action to perform; if the event type is "ending" then
              this must be "ringout" and if event type is "transition" this must
              be "cut"
            enum:
              - ringout
              - cut
            type: string
        required:
          - beat
          - event
          - type
        type: object
      id:
        description: An identifier which must be unique within the parent span
        type: number
      key:
        description: The key signature active at the beginning of the region
        properties:
          tonic_accidental:
            description: >-
              A text representation of the accidental; if this field is
              specified, the tonic_note field should also be specified
            enum:
              - double flat
              - flat
              - natural
              - sharp
              - double sharp
            type: string
          tonic_note:
            description: >-
              A text representation of the musical note; if this field is
              specified, the tonic_accidental field should also be specified
            enum:
              - c
              - d
              - e
              - f
              - g
              - a
              - b
            type: string
          tonic_quality:
            description: >-
              The scale quality; if this field is not specified, the API selects
              the quality automatically
            enum:
              - major
              - natural_minor
              - harmonic_minor
              - melodic_minor
              - ionian
              - dorian
              - phrygian
              - lydian
              - mixolydian
              - aeolian
              - locrian
            example: major
            type: string
        type: object
      region:
        description: The type of region
        enum:
          - music
          - silence
        type: string
    required:
      - id
      - region
      - descriptor
      - beat
    type: object
  AudioRenderTimelineSpanTempoChanges:
    description: >-
      An inflection point in a tempo curve; the API creates the overall tempo by
      using a linear interpolation of the time between each tempo change
    example:
      tempo: 86
      time: 5
    properties:
      tempo:
        description: 'The tempo, in beats per minute, active at this time'
        type: number
      time:
        description: 'The time, in seconds, at which the tempo exists'
        type: number
    required:
      - time
      - tempo
    type: object
  AudioRendersFilesList:
    description: Files associated with the render
    example:
      bits_sample: 16
      content_type: audio/mp3
      download_url: >-
        https://s3.amazonaws.com/prod-amper-inferno-ephemeral/renders/2021/07/13/amper-api-QwAgKqXQAzr622KuXYZ25C9WRH3a/0.mp3
      filename: My_audio_ai.mp3
      frequency_hz: 44100
      kbits_second: 192
      size_bytes: 481556
      tracks:
        - master
    properties:
      bits_sample:
        description: The bit depth of the audio files in bits/sample
        type: number
      content_type:
        description: The content-type of the file
        type: string
      download_url:
        description: >-
          The internet-accessible URL from which the file can be downloaded. Any
          redirects encountered when using this URL must be followed
        type: string
      filename:
        description: >-
          The user-specified file name suggestion from the render request; this
          file name becomes the filename property of the Content-Disposition
          header when the user downloads the rendered audio file
        type: string
      frequency_hz:
        description: The Sample rate of the audio files in Hertz (Hz)
        type: number
      kbits_second:
        description: The data rate of the audio files in kilobits/second
        type: number
      size_bytes:
        description: Size of the file in bytes
        type: number
      tracks:
        description: An array of track names included in the file
        items:
          type: string
        type: array
    required:
      - filename
      - bits_sample
      - content_type
      - download_url
      - frequency_hz
      - kbits_second
      - size_bytes
      - tracks
    type: object
  AudioRendersListResults:
    description: Audio render data
    example:
      audio_renders:
        - created_date: '2021-07-13T20:19:30.000Z'
          files: []
          id: 2yZp13IhLqnjfh2KquDTOHUHzTiP
          preset: MASTER_MP3
          progress_percent: 20
          status: WAITING_COMPOSE
          timeline: {}
          updated_date: '2021-07-13T20:19:30.000Z'
        - created_date: '2021-07-12T20:39:59.000Z'
          files:
            - bits_sample: 16
              content_type: audio/mp3
              download_url: >-
                https://s3.amazonaws.com/prod-amper-inferno-ephemeral/renders/2021/07/13/amper-api-QwAgKqXQAzr622KuXYZ25C9WRH3a/0.mp3
              filename: My_audio_ai.mp3
              frequency_hz: 44100
              kbits_second: 192
              size_bytes: 481556
              tracks:
                - master
            - bits_sample: 0
              content_type: application/vnd.amper.waveform+json
              download_url: >-
                https://s3.amazonaws.com/prod-amper-inferno-ephemeral/renders/2021/07/13/amper-api-QwAgKqXQAzr622KuXYZ25C9WRH3a/1.json
              filename: render.json
              frequency_hz: 42
              kbits_second: 0
              size_bytes: 4420
              tracks:
                - master
          id: QwAgKqXQAzr622KuXYZ25C9WRH3a
          preset: MASTER_MP3
          progress_percent: 100
          status: CREATED
          timeline: {}
          updated_date: '2021-07-12T20:46:26.000Z'
    properties:
      audio_renders:
        description: Audio render results
        items:
          $ref: '#/definitions/AudioRenderResult'
        type: array
    required:
      - audio_renders
  AudioSearchResults:
    additionalProperties: false
    description: Audio search results
    example:
      data:
        - added_date: '2016-08-16T00:00:00.000Z'
          artists:
            - name: Klimenko Music
          assets:
            clean_audio:
              file_size: 35188408
            preview_mp3:
              file_size: 4400203
              url: >-
                https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3
            preview_ogg:
              file_size: 4453197
              url: >-
                https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg
            waveform:
              file_size: 18778
              url: >-
                https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png
          bpm: 110
          contributor:
            id: '2847971'
          description: >-
            Pulsing and feel-good, featuring soaring synthesizer, groovy synth
            bass drums and synth drums that create a euphoric, upbeat mood.
          duration: 183
          genres:
            - Dance/Electronic
            - Electro Pop
            - Pop/Rock
          id: '442583'
          instruments:
            - Piano
            - Synth bass
            - Synth drums
            - Synthesizer
          is_adult: false
          is_instrumental: true
          isrc: ''
          keywords:
            - celebratory
            - chic
            - euphoric
            - good times
            - hip
            - optimistic
            - party
            - soaring
            - upbeat
          language: en
          lyrics: ''
          media_type: audio
          moods:
            - Bright
            - Confident
            - Fun
            - Happy
            - Inspiring
            - Optimistic
            - Playful
            - Sophisticated
            - Stylish
            - Uplifting
          published_time: '2016-08-16T18:30:03.000Z'
          recording_version: ''
          releases: []
          similar_artists: []
          title: Another Tomorrow
          updated_time: '2016-08-18T21:59:33.000Z'
          url: ''
          vocal_description: ''
      page: 1
      per_page: 5
      search_id: 749090bb-2967-4a20-b22e-c800dc845e10
      total_count: 123455
    properties:
      data:
        description: List of tracks
        items:
          $ref: '#/definitions/Audio'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      search_id:
        description: ID of the search
        type: string
      total_count:
        description: Total count of all results across all pages
        type: integer
    required:
      - data
      - total_count
      - search_id
    type: object
  AuthorizeResponse:
    description: Response to Authorize requests
    example:
      body: >-
        https://accounts.shutterstock.com/login?next=%2Foauth%2Fauthorize%3Fresponse_type%3Dcode%26state%3D1539619928633%26scope%3Dlicenses.create%20licenses.view%20purchases.view%26client_id%3D6d097450b209c6dcd859%26redirect_uri%3Dhttp%3A%2F%2Flocalhost%3A3000%2Fmyapp%2Fauth%2Fcallback%26realm%3Dcustomer
    properties:
      body:
        description: HTML redirect URL that contains the application authorization 'code'
        type: string
    required:
      - body
    type: object
  Bands:
    description: A band that can be used to generate music
    example:
      id: '1234567'
      name: The Happy Tunes Band
    properties:
      id:
        description: The ID of the band
        type: string
      name:
        description: The name of the band
        type: string
    type: object
  Category:
    description: Category information
    example:
      id: '1'
      name: Animals/Wildlife
    properties:
      id:
        description: Category ID
        type: string
      name:
        description: Category name
        type: string
    type: object
  CategoryDataList:
    description: List of categories that images can belong to
    example:
      data:
        - id: '1'
          name: Animals/Wildlife
        - id: '11'
          name: The Arts
        - id: '15'
          name: Science
      page: 1
      per_page: 5
      total_count: 13
    properties:
      data:
        description: Categories
        items:
          $ref: '#/definitions/Category'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: The current page of results
        type: integer
      per_page:
        description: The number of results per page
        type: integer
      total_count:
        description: The total number of results across all pages
        type: integer
  Collection:
    description: Metadata about a collection of assets
    example:
      cover_item:
        id: '297886754'
      id: '293542904'
      items_updated_time: '2021-05-20T20:15:22.000Z'
      name: My collection
      total_item_count: 85
    properties:
      cover_item:
        $ref: '#/definitions/CollectionItem'
      created_time:
        description: When the collection was created
        format: date-time
        type: string
      id:
        description: The collection ID
        type: string
      items_updated_time:
        description: The last time this collection's items were updated
        format: date-time
        type: string
      name:
        description: The name of the collection
        type: string
      share_code:
        description: A code that can be used to share the collection (optional)
        type: string
      share_url:
        description: The browser URL that can be used to share the collection (optional)
        type: string
      total_item_count:
        description: The number of items in the collection
        type: integer
      updated_time:
        description: >-
          The last time the collection was update (other than changes to the
          items in it)
        format: date-time
        type: string
    required:
      - id
      - name
      - total_item_count
    type: object
  CollectionCreateRequest:
    description: Collection creation request
    example:
      name: Test Collection 19cf
    properties:
      name:
        description: The name of the collection
        type: string
    required:
      - name
    type: object
  CollectionCreateResponse:
    description: Collection creation response
    example:
      id: '48433105'
    properties:
      id:
        description: ID of the new collection
        type: string
    required:
      - id
    type: object
  CollectionDataList:
    description: List of collections
    example:
      data:
        - cover_item:
            id: '297886754'
          id: '293542904'
          items_updated_time: '2021-05-20T20:15:22.000Z'
          name: My collection
          total_item_count: 85
      page: 1
      per_page: 100
      total_count: 1
    properties:
      data:
        description: Collections
        items:
          $ref: '#/definitions/Collection'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: The current page of results
        type: integer
      per_page:
        description: The number of results per page
        type: integer
      total_count:
        description: The total number of results across all pages
        type: integer
  CollectionItem:
    description: Metadata about an item that is part of a collection
    example:
      added_time: '2020-05-29T17:10:22.000Z'
      id: '1690105108'
      media_type: image
    properties:
      added_time:
        description: The date the item was added to the collection
        format: date-time
        type: string
      id:
        description: ID of the item
        type: string
      media_type:
        description: 'The media type of the item, such as image, video, or audio'
        type: string
    required:
      - id
    type: object
  CollectionItemDataList:
    description: List of items in a collection
    example:
      data:
        - added_time: '2021-07-08T12:33:37.000Z'
          id: '1690105108'
          media_type: image
        - added_time: '2021-07-08T12:31:43.000Z'
          id: '1468703072'
          media_type: image
      page: 1
      per_page: 2
      total_count: 82
    properties:
      data:
        description: Assets in the collection
        items:
          $ref: '#/definitions/CollectionItem'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: The current page of results
        type: integer
      per_page:
        description: The number of results per page
        type: integer
      total_count:
        description: The total number of results across all pages
        type: integer
  CollectionItemRequest:
    description: Request to get a list of items in a collection
    example:
      items:
        - added_time: '2020-05-29T17:10:22.000Z'
          id: '1690105108'
          media_type: image
    properties:
      items:
        description: List of items
        items:
          $ref: '#/definitions/CollectionItem'
        type: array
    required:
      - items
    type: object
  CollectionUpdateRequest:
    description: Collection update request
    example:
      name: My collection with a new name
    properties:
      name:
        description: The new name of the collection
        type: string
    required:
      - name
    type: object
  ComputerVisionImageCreateResponse:
    description: Asset upload information
    example:
      upload_id: Udb14e1c3540bdbf82b4b3fe12d3a44f2
    properties:
      upload_id:
        type: string
    required:
      - upload_id
    type: object
  Contributor:
    description: Information about a contributor
    example:
      id: '12345678'
    properties:
      id:
        description: ID of the contributor
        type: string
    required:
      - id
    type: object
  ContributorProfile:
    description: Contributor profile data
    example:
      about: John Doe's photographs
      contributor_type:
        - photographer
      display_name: John Doe
      equipment:
        - Nikon
        - Fuji
      id: '12345678'
      location: US
      portfolio_url: 'https://www.shutterstock.com/g/jdoe'
      social_media:
        facebook: 'http://example.com/jdoe'
        google_plus: 'http://example.com/jdoe'
        linkedin: 'http://example.com/jdoe'
        pinterest: 'http://example.com/jdoe'
        tumblr: 'http://example.com/jdoe'
        twitter: 'http://example.com/jdoe'
      styles:
        - landscape
        - nature
        - footage_travel
      subjects:
        - animals
        - landmarks
        - nature
        - objects
        - recreation
      website: 'http://example.com/profiles/jdoe'
    properties:
      about:
        description: Short description of the contributors' library
        type: string
      contributor_type:
        description: >-
          Type of content that the contributor specializes in (photographer,
          illustrator, etc)
        items:
          type: string
        type: array
      display_name:
        description: Preferred name to be displayed for the contributor
        type: string
      equipment:
        description: 'List of equipment used by the contributor (Canon EOS 5D Mark II, etc)'
        items:
          type: string
        type: array
      id:
        description: Contributor ID
        type: string
      location:
        description: Country code representing the contributor's locale
        format: country-code-2
        type: string
      portfolio_url:
        description: Web URL for the contributors' profile
        type: string
      social_media:
        $ref: '#/definitions/ContributorProfileSocialMedia'
      styles:
        description: >-
          List of styles that the contributor specializes in (lifestyle, mixed
          media, etc)
        items:
          type: string
        type: array
      subjects:
        description: >-
          Generic list of subjects for contributors' work (food_and_drink,
          holiday, people, etc)
        items:
          type: string
        type: array
      website:
        description: Personal website for the contributor
        type: string
    required:
      - id
    type: object
  ContributorProfileDataList:
    description: List of contributor profiles
    example:
      data:
        - about: John Doe's photographs
          contributor_type:
            - photographer
          display_name: John Doe
          equipment:
            - Nikon
            - Fuji
          id: '12345678'
          location: US
          portfolio_url: 'https://www.shutterstock.com/g/jdoe'
          social_media:
            facebook: 'http://example.com/jdoe'
            google_plus: 'http://example.com/jdoe'
            linkedin: 'http://example.com/jdoe'
            pinterest: 'http://example.com/jdoe'
            tumblr: 'http://example.com/jdoe'
            twitter: 'http://example.com/jdoe'
          styles:
            - landscape
            - nature
            - footage_travel
          subjects:
            - animals
            - landmarks
            - nature
            - objects
            - recreation
          website: 'http://example.com/profiles/jdoe'
      page: 1
      per_page: 5
      total_count: 15
    properties:
      data:
        description: Conributor profiles
        items:
          $ref: '#/definitions/ContributorProfile'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: Error message
        type: string
      page:
        description: Page of response
        type: integer
      per_page:
        description: Number of contributors per page
        type: integer
      total_count:
        description: Total count of contributors for this request
        type: integer
  ContributorProfileSocialMedia:
    description: Contributor profile social media links
    example:
      facebook: 'http://example.com/jdoe'
      google_plus: 'http://example.com/jdoe'
      linkedin: 'http://example.com/jdoe'
      pinterest: 'http://example.com/jdoe'
      tumblr: 'http://example.com/jdoe'
      twitter: 'http://example.com/jdoe'
    properties:
      facebook:
        description: Facebook link for contributor
        type: string
      google_plus:
        description: Google+ link for contributor
        type: string
      linkedin:
        description: LinkedIn link for contributor
        type: string
      pinterest:
        description: Pinterest page for contributor
        type: string
      tumblr:
        description: Tumblr link for contributor
        type: string
      twitter:
        description: Twitter link for contributor
        type: string
    type: object
  Cookie:
    description: Cookie object
    example:
      name: The name of the cookie
      value: The value of the cookie
    properties:
      name:
        description: The name of the cookie
        type: string
      value:
        description: The value of the cookie
        type: string
    required:
      - name
      - value
    type: object
  CreateAudioRender:
    description: Data required to create an audio render
    example:
      filename: My Project.mp3
      preset: MASTER_MP3
      timeline:
        spans:
          - id: 111
            instrument_groups:
              - instrument_group: roomy_kit
                statuses:
                  - beat: 12
                    status: active
            regions:
              - beat: 12
                descriptor: cinematic_minimal_tense
                end_type:
                  beat: 24
                  event: ending
                  type: ringout
                id: 222
                key:
                  tonic_note: c
                  tonic_quality: major
                region: music
            span_type: metered
            tempo: 76
            tempo_changes:
              - tempo: 86
                time: 5
            time: 5
          - span_type: unmetered
            time: 20
    properties:
      filename:
        description: >-
          A user-specified file name suggestion; this file name becomes the
          filename property of the Content-Disposition header when the user
          downloads the rendered audio file
        example: My Project.mp3
        type: string
      preset:
        description: >-
          File format, such as MP3 file, combined WAV file, or individual track
          WAV files
        enum:
          - MASTER_MP3
          - MASTER_WAV
          - STEMS_WAV
        example: MASTER_MP3
        type: string
      timeline:
        $ref: '#/definitions/AudioRenderTimeline'
        description: The timeline data with which to generate the render
    required:
      - preset
      - timeline
      - filename
    type: object
  CreateAudioRendersRequest:
    description: Render request data
    example:
      audio_renders:
        - filename: My Project.mp3
          preset: MASTER_MP3
          timeline:
            spans:
              - id: 111
                instrument_groups:
                  - instrument_group: roomy_kit
                    statuses:
                      - beat: 12
                        status: active
                regions:
                  - beat: 12
                    descriptor: cinematic_minimal_tense
                    end_type:
                      beat: 24
                      event: ending
                      type: ringout
                    id: 222
                    key:
                      tonic_note: c
                      tonic_quality: major
                    region: music
                span_type: metered
                tempo: 76
                tempo_changes:
                  - tempo: 86
                    time: 5
                time: 5
              - span_type: unmetered
                time: 20
    properties:
      audio_renders:
        description: Parameters to create computer audio renders
        items:
          $ref: '#/definitions/CreateAudioRender'
        type: array
    required:
      - audio_renders
    type: object
  CustomSizeDimensions:
    description: >-
      A custom height or a custom width to resize the image to, but not both
      (experimental)
    example:
      height: 600
      width: 800
    properties:
      height:
        description: Custom height to resize the image to
        minimum: 100
        type: integer
      width:
        description: Custom width to resize the image to
        minimum: 100
        type: integer
    type: object
  Descriptors:
    description: Information about a descriptor
    example:
      average_render_speed: 8.242664029014177
      bands:
        - id: cinematic_minimal_tense_band_1
          name: Cinematic Minimal Tense Band 1
        - id: cinematic_minimal_tense_band_2
          name: Cinematic Minimal Tense Band 2
      id: cinematic_minimal_tense
      instruments:
        - id: blue_synth_pad
          name: Warm Pad - Lush
        - id: direct_round_1_synth_bass
          name: Direct Round 1 Synth Bass
        - id: direct_crystal_breath_mid_pad
          name: Direct Crystal Breath Mid Pad
      max_tempo: 76
      min_tempo: 58
      name: Cinematic Minimal Tense
      previews:
        - content_type: audio/mp3
          url: >-
            https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_1_v1.mp3
        - content_type: audio/mp3
          url: >-
            https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_2_v1.mp3
      tags:
        - Tense
        - Cinematic
        - Negative
        - Simple Meter
        - 4/4
        - Natural Minor
        - Dorian
        - Minimal
        - Adagio
        - Single Region
        - Main
        - Entertainment
        - Politics
        - Keys
        - Mid Pads
        - Fast
        - Slow
        - Slow
        - Voice
        - Medium Bright
        - Non Noisy
        - Medium Thick
        - Angelic
        - Direct
        - Percussion
        - Perc FX
        - Misc
        - Acoustic Pianos
        - Grand
        - Nice
        - Roomy
        - Pop
        - Upright
        - Clean
        - Classic
        - Keyboards
        - Digital Keyboard
        - Strings
        - Synth Basses
        - Fast
        - Dark
        - Thick
        - Sub
        - Synth Mallets
        - Dull
        - Mid Synth Beds
        - Slow
        - None
        - Medium Noisy
        - Harsh
        - Fast
        - Airy
        - Long Textures
        - Ambience
        - Synth Texture
        - Ethereal
        - Set Kicks
        - Processed
        - Hubcap Mallet
        - Wide
        - Tickie
        - Airy
        - Chamber
        - Thin
        - Organ
        - Cello Ensemble
        - Sweet
        - Big
        - Di
        - Raw
        - Bright
        - Tight
        - Chorus
        - Buzzy
        - Huge
        - Warm
        - Jazz
        - Brass
        - String
        - Hollow
        - Woodwind
        - Breathy
        - Crystal
        - Rhodes
        - Synth Piano
        - Noisy
        - Woody
        - Metallic
        - Reverse Piano
        - Full
        - Foley
        - Piano
        - Clean
        - Delayed
        - Reverb
        - Low Passed
        - Large
        - Medium
        - Small
    properties:
      average_render_speed:
        description: >-
          The average ratio of the length of the music to the time it takes to
          render; for example, a render speed of 3.0 generates 30 seconds of
          music in about 10 seconds
        type: number
      bands:
        description: The bands that are available to use this descriptor
        items:
          $ref: '#/definitions/Bands'
        type: array
      id:
        description: The ID of the descriptor
        type: string
      instruments:
        description: The instruments that can play with this descriptor
        items:
          $ref: '#/definitions/Instruments'
        type: array
      max_tempo:
        description: >-
          The maximum beats per minute that the descriptor is intended to be
          used with
        type: number
      min_tempo:
        description: >-
          The minimum beats per minute that the descriptor is intended to be
          used with
        type: number
      name:
        description: The name of the descriptor
        type: string
      previews:
        description: Preview of the descriptor
        items:
          $ref: '#/definitions/Preview'
        type: array
      tags:
        description: Tags that describe the descriptor
        items:
          type: string
        type: array
    type: object
  DescriptorsListResult:
    description: List Descriptors results
    example:
      data:
        - average_render_speed: 8.242664029014177
          bands:
            - id: cinematic_minimal_tense_band_1
              name: Cinematic Minimal Tense Band 1
            - id: cinematic_minimal_tense_band_2
              name: Cinematic Minimal Tense Band 2
          id: cinematic_minimal_tense
          instruments:
            - id: blue_synth_pad
              name: Warm Pad - Lush
            - id: direct_round_1_synth_bass
              name: Direct Round 1 Synth Bass
            - id: direct_crystal_breath_mid_pad
              name: Direct Crystal Breath Mid Pad
          max_tempo: 76
          min_tempo: 58
          name: Cinematic Minimal Tense
          previews:
            - content_type: audio/mp3
              url: >-
                https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_1_v1.mp3
            - content_type: audio/mp3
              url: >-
                https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_2_v1.mp3
          tags:
            - Tense
            - Cinematic
            - Negative
            - Simple Meter
            - 4/4
            - Natural Minor
            - Dorian
            - Minimal
            - Adagio
            - Single Region
            - Main
            - Entertainment
            - Politics
            - Keys
            - Mid Pads
            - Fast
            - Slow
            - Slow
            - Voice
            - Medium Bright
            - Non Noisy
            - Medium Thick
            - Angelic
            - Direct
            - Percussion
            - Perc FX
            - Misc
            - Acoustic Pianos
            - Grand
            - Nice
            - Roomy
            - Pop
            - Upright
            - Clean
            - Classic
            - Keyboards
            - Digital Keyboard
            - Strings
            - Synth Basses
            - Fast
            - Dark
            - Thick
            - Sub
            - Synth Mallets
            - Dull
            - Mid Synth Beds
            - Slow
            - None
            - Medium Noisy
            - Harsh
            - Fast
            - Airy
            - Long Textures
            - Ambience
            - Synth Texture
            - Ethereal
            - Set Kicks
            - Processed
            - Hubcap Mallet
            - Wide
            - Tickie
            - Airy
            - Chamber
            - Thin
            - Organ
            - Cello Ensemble
            - Sweet
            - Big
            - Di
            - Raw
            - Bright
            - Tight
            - Chorus
            - Buzzy
            - Huge
            - Warm
            - Jazz
            - Brass
            - String
            - Hollow
            - Woodwind
            - Breathy
            - Crystal
            - Rhodes
            - Synth Piano
            - Noisy
            - Woody
            - Metallic
            - Reverse Piano
            - Full
            - Foley
            - Piano
            - Clean
            - Delayed
            - Reverb
            - Low Passed
            - Large
            - Medium
            - Small
      page: 1
      per_page: 5
    properties:
      data:
        description: List of descriptors
        items:
          $ref: '#/definitions/Descriptors'
        type: array
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
    type: object
  DownloadHistory:
    description: >-
      Information about a downloaded media item. Applicable for all media types,
      only one of 'audio', 'image' or 'video' will be in a single
      DownloadHistory object
    example:
      download_time: '2021-05-20T20:31:46.000Z'
      id: a24499ca3ccd912a6d8316d45f953ef092
      image:
        format:
          size: medium
        id: '1234567'
      is_downloadable: true
      license: standard
      subscription_id: s1234567
      user:
        username: jdoe
    properties:
      audio:
        $ref: '#/definitions/DownloadHistoryMediaDetails'
      download_time:
        description: Date the media was downloaded the first time
        format: date-time
        type: string
      id:
        description: ID of the download
        type: string
      image:
        $ref: '#/definitions/DownloadHistoryMediaDetails'
      is_downloadable:
        description: >-
          Specifies if the media is downloadable via its respective downloads
          endpoint
        type: boolean
      license:
        description: The name of the license of this download
        type: string
      metadata:
        description: The metadata that was passed in the original licensing request
        type: object
      subscription_id:
        description: ID of the subscription used to perform this download
        type: string
      user:
        $ref: '#/definitions/DownloadHistoryUserDetails'
      video:
        $ref: '#/definitions/DownloadHistoryMediaDetails'
    required:
      - id
      - download_time
      - license
    type: object
  DownloadHistoryDataList:
    description: List of download events
    example:
      data:
        - download_time: '2021-07-15T15:46:34.000Z'
          id: e1eba3833793e77188d22caae8bac9f2cd
          image:
            format:
              size: original
            id: 9763363ao
          is_downloadable: false
          license: shutterstock_license
          metadata:
            client: Company A
            job: Important project
            other: Important media
            purchase_order: '12345'
          subscription_id: 1df5d8cfe8394bbebb849a69943b9a7c
          user:
            username: jsmith
      page: 1
      per_page: 1
      total_count: 2890
    properties:
      data:
        description: Download events
        items:
          $ref: '#/definitions/DownloadHistory'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: The current page of results
        type: integer
      per_page:
        description: The number of results per page
        type: integer
      total_count:
        description: The total number of results across all pages
        type: integer
  DownloadHistoryFormatDetails:
    description: Information about the format of a download
    example:
      format: jpg
      size: medium
    properties:
      format:
        description: The format of the downloaded media
        type: string
      size:
        description: The size of the downloaded media
        type: string
    type: object
  DownloadHistoryMediaDetails:
    description: Information about the downloaded media
    example:
      format:
        format: jpg
        size: medium
      id: '1234567'
    properties:
      format:
        $ref: '#/definitions/DownloadHistoryFormatDetails'
      id:
        description: ID of the download history media details
        type: string
    required:
      - id
    type: object
  DownloadHistoryUserDetails:
    description: Information about a user
    example:
      username: jdoe
    properties:
      username:
        description: The name of the user who downloaded the item
        type: string
    required:
      - username
    type: object
  EditorialAssets:
    description: 'Asset information, including size and thumbnail URLs'
    example:
      medium_jpg:
        display_name: Med
        height: 617
        is_licensable: true
        width: 1000
      original:
        display_name: Original
        height: 3693
        is_licensable: true
        width: 5985
      small_jpg:
        display_name: Small
        height: 309
        is_licensable: true
        width: 500
      thumb_170:
        height: 105
        url: >-
          https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg
        width: 170
      thumb_220:
        height: 136
        url: >-
          https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg
        width: 220
      watermark_1500:
        height: 926
        url: >-
          https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg
        width: 1500
      watermark_450:
        height: 278
        url: >-
          https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg
        width: 450
    properties:
      medium_jpg:
        $ref: '#/definitions/ImageSizeDetails'
      original:
        $ref: '#/definitions/ImageSizeDetails'
      small_jpg:
        $ref: '#/definitions/ImageSizeDetails'
      thumb_170:
        $ref: '#/definitions/Thumbnail'
      thumb_220:
        $ref: '#/definitions/Thumbnail'
      watermark_1500:
        $ref: '#/definitions/Thumbnail'
      watermark_450:
        $ref: '#/definitions/Thumbnail'
    type: object
  EditorialCategory:
    description: Name of an editorial category
    example:
      name: Awards
    properties:
      name:
        type: string
    type: object
  EditorialCategoryResults:
    description: List of editorial categories
    example:
      data:
        - name: Animal
        - name: Awards
        - name: Art
    properties:
      data:
        description: List of editorial categories
        items:
          $ref: '#/definitions/EditorialCategory'
        type: array
    type: object
  EditorialContent:
    description: Metadata about editorial content
    example:
      aspect: 1.621
      assets:
        medium_jpg:
          display_name: Med
          height: 617
          is_licensable: true
          width: 1000
        original:
          display_name: Original
          height: 3693
          is_licensable: true
          width: 5985
        small_jpg:
          display_name: Small
          height: 309
          is_licensable: true
          width: 500
        thumb_170:
          height: 105
          url: >-
            https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg
          width: 170
        thumb_220:
          height: 136
          url: >-
            https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg
          width: 220
        watermark_1500:
          height: 926
          url: >-
            https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg
          width: 1500
        watermark_450:
          height: 278
          url: >-
            https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg
          width: 450
      byline: Jon Super/AP/Shutterstock
      caption: ''
      categories:
        - name: Sport
      date_taken: '2021-05-11T00:00:00.000Z'
      description: >-
        Security and stewards stand outside the Old Trafford stadium in
        Manchester, England, ahead of the English Premier League soccer match
        between Manchester United and Leicester City. This is the first
        Manchester United home match since fans protested against American owner
        Joel Glazer, forcing the postponement of the team's Premier League game
        against Liverpool. The protests prompted Glazer to publish a letter in
        which he pledged to accelerate discussions with fans about supporters
        being able to have a greater say at the club
      id: 10687730b
      keywords:
        - england
        - europe
        - leicester city fc
        - manchester
        - manchester united fc
        - men's soccer
        - men's sports
        - premier league
        - professional soccer
        - soccer
        - sports
        - united kingdom
        - western europe
        - wsoc
      title: 'Soccer Premier League, Manchester, United Kingdom - 11 May 2021'
    properties:
      aspect:
        type: number
      assets:
        $ref: '#/definitions/EditorialAssets'
      byline:
        type: string
      caption:
        type: string
      categories:
        description: List of categories
        items:
          $ref: '#/definitions/EditorialCategory'
        type: array
      date_taken:
        format: date
        type: string
      description:
        type: string
      id:
        type: string
      keywords:
        items:
          type: string
        type: array
      special_instructions:
        type: string
      title:
        type: string
    required:
      - id
    type: object
  EditorialContentDataList:
    description: List of editorial items
    example:
      data:
        - aspect: 1.621
          assets:
            medium_jpg:
              display_name: Med
              height: 617
              is_licensable: true
              width: 1000
            original:
              display_name: Original
              height: 3693
              is_licensable: true
              width: 5985
            small_jpg:
              display_name: Small
              height: 309
              is_licensable: true
              width: 500
            thumb_170:
              height: 105
              url: >-
                https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg
              width: 170
            thumb_220:
              height: 136
              url: >-
                https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg
              width: 220
            watermark_1500:
              height: 926
              url: >-
                https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg
              width: 1500
            watermark_450:
              height: 278
              url: >-
                https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg
              width: 450
          byline: Jon Super/AP/Shutterstock
          caption: ''
          categories:
            - name: Sport
          date_taken: '2021-05-11T00:00:00.000Z'
          description: >-
            Security and stewards stand outside the Old Trafford stadium in
            Manchester, England, ahead of the English Premier League soccer
            match between Manchester United and Leicester City. This is the
            first Manchester United home match since fans protested against
            American owner Joel Glazer, forcing the postponement of the team's
            Premier League game against Liverpool. The protests prompted Glazer
            to publish a letter in which he pledged to accelerate discussions
            with fans about supporters being able to have a greater say at the
            club
          id: 10687730b
          keywords:
            - england
            - europe
            - leicester city fc
            - manchester
            - manchester united fc
            - men's soccer
            - men's sports
            - premier league
            - professional soccer
            - soccer
            - sports
            - united kingdom
            - western europe
            - wsoc
          title: 'Soccer Premier League, Manchester, United Kingdom - 11 May 2021'
      page: 1
      per_page: 5
      total_count: 16
    properties:
      data:
        description: Editorial items
        items:
          $ref: '#/definitions/EditorialContent'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: Optional error message
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results
        type: integer
  EditorialCoverItem:
    description: Cover image for editorial livefeed
    example:
      height: 117
      id: 9763363q
      url: >-
        https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg
      width: 170
    properties:
      height:
        type: integer
      id:
        type: string
      url:
        type: string
      width:
        type: integer
    required:
      - id
      - url
    type: object
  EditorialImageCategoryResults:
    description: List of editorial categories
    example:
      data:
        - name: Animal
        - name: Awards
        - name: Art
        - name: Film Stills
    properties:
      data:
        items:
          $ref: '#/definitions/EditorialCategory'
        type: array
    type: object
  EditorialImageContentDataList:
    description: List of editorial items
    example:
      data:
        - aspect: 1.621
          assets:
            medium_jpg:
              display_name: Med
              height: 617
              is_licensable: true
              width: 1000
            original:
              display_name: Original
              height: 3693
              is_licensable: true
              width: 5985
            small_jpg:
              display_name: Small
              height: 309
              is_licensable: true
              width: 500
            thumb_170:
              height: 105
              url: >-
                https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg
              width: 170
            thumb_220:
              height: 136
              url: >-
                https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg
              width: 220
            watermark_1500:
              height: 926
              url: >-
                https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg
              width: 1500
            watermark_450:
              height: 278
              url: >-
                https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg
              width: 450
          byline: Jon Super/AP/Shutterstock
          caption: ''
          categories:
            - name: Sport
          date_taken: '2021-05-11T00:00:00.000Z'
          description: >-
            Security and stewards stand outside the Old Trafford stadium in
            Manchester, England, ahead of the English Premier League soccer
            match between Manchester United and Leicester City. This is the
            first Manchester United home match since fans protested against
            American owner Joel Glazer, forcing the postponement of the team's
            Premier League game against Liverpool. The protests prompted Glazer
            to publish a letter in which he pledged to accelerate discussions
            with fans about supporters being able to have a greater say at the
            club
          id: 10687730b
          keywords:
            - england
            - europe
            - leicester city fc
            - manchester
            - manchester united fc
            - men's soccer
            - men's sports
            - premier league
            - professional soccer
            - soccer
            - sports
            - united kingdom
            - western europe
            - wsoc
          title: 'Soccer Premier League, Manchester, United Kingdom - 11 May 2021'
      page: 1
      per_page: 1
      total_count: 23
    properties:
      data:
        description: Editorial items
        items:
          $ref: '#/definitions/EditorialContent'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: Optional error message
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results
        type: integer
  EditorialImageLivefeed:
    description: Metadata about editorial livefeed
    example:
      cover_item:
        height: 117
        id: 9763363q
        url: >-
          https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg
        width: 170
      created_time: '2018-07-17T12:42:03.000Z'
      id: >-
        2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202
      name: 'Prince Charles and Camilla Duchess of Cornwall visit to Cornwall, Day 2'
      total_item_count: 38
    properties:
      cover_item:
        $ref: '#/definitions/EditorialCoverItem'
      created_time:
        description: When the livefeed was initially created
        format: date-time
        type: string
      id:
        description: Livefeed ID
        type: string
      name:
        description: Name of the livefeed
        type: string
      total_item_count:
        description: Total count of items in the livefeed
        type: integer
    required:
      - id
      - name
      - total_item_count
    type: object
  EditorialImageLivefeedList:
    description: List of editorial livefeeds
    example:
      data:
        - cover_item:
            height: 117
            id: 9763363q
            url: >-
              https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg
            width: 170
          created_time: '2018-07-17T12:42:03.000Z'
          id: >-
            2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202
          name: >-
            Prince Charles and Camilla Duchess of Cornwall visit to Cornwall,
            Day 2
          total_item_count: 38
      page: 1
      per_page: 1
      total_count: 5300
    properties:
      data:
        description: Editorial livefeeds
        items:
          $ref: '#/definitions/EditorialLivefeed'
        type: array
      message:
        description: Optional error message
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results
        type: integer
    required:
      - data
      - total_count
    type: object
  EditorialLivefeed:
    description: Metadata about editorial livefeed
    example:
      cover_item:
        height: 117
        id: 9763363q
        url: >-
          https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg
        width: 170
      created_time: '2018-07-17T12:42:03.000Z'
      id: >-
        2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202
      name: 'Prince Charles and Camilla Duchess of Cornwall visit to Cornwall, Day 2'
      total_item_count: 38
    properties:
      cover_item:
        $ref: '#/definitions/EditorialCoverItem'
      created_time:
        description: When the livefeed was initially created
        format: date-time
        type: string
      id:
        description: Livefeed ID
        type: string
      name:
        description: Name of the livefeed
        type: string
      total_item_count:
        description: Total count of items in the livefeed
        type: integer
    required:
      - id
      - name
      - total_item_count
    type: object
  EditorialLivefeedList:
    description: List of editorial livefeeds
    example:
      data:
        - cover_item:
            height: 117
            id: 9763363q
            url: >-
              https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg
            width: 170
          created_time: '2018-07-17T12:42:03.000Z'
          id: >-
            2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202
          name: >-
            Prince Charles and Camilla Duchess of Cornwall visit to Cornwall,
            Day 2
          total_item_count: 38
      page: 1
      per_page: 1
      total_count: 56
    properties:
      data:
        description: Editorial livefeeds
        items:
          $ref: '#/definitions/EditorialLivefeed'
        type: array
      message:
        description: Optional error message
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results
        type: integer
    required:
      - data
      - total_count
    type: object
  EditorialSearchResults:
    description: Editorial search results
    example:
      data:
        - aspect: 1.621
          assets:
            medium_jpg:
              display_name: Med
              height: 617
              is_licensable: true
              width: 1000
            original:
              display_name: Original
              height: 3693
              is_licensable: true
              width: 5985
            small_jpg:
              display_name: Small
              height: 309
              is_licensable: true
              width: 500
            thumb_170:
              height: 105
              url: >-
                https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg
              width: 170
            thumb_220:
              height: 136
              url: >-
                https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg
              width: 220
            watermark_1500:
              height: 926
              url: >-
                https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg
              width: 1500
            watermark_450:
              height: 278
              url: >-
                https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg
              width: 450
          byline: Jon Super/AP/Shutterstock
          caption: ''
          categories:
            - name: Sport
          date_taken: '2021-05-11T00:00:00.000Z'
          description: >-
            Security and stewards stand outside the Old Trafford stadium in
            Manchester, England, ahead of the English Premier League soccer
            match between Manchester United and Leicester City. This is the
            first Manchester United home match since fans protested against
            American owner Joel Glazer, forcing the postponement of the team's
            Premier League game against Liverpool. The protests prompted Glazer
            to publish a letter in which he pledged to accelerate discussions
            with fans about supporters being able to have a greater say at the
            club
          id: 10687730b
          keywords:
            - england
            - europe
            - leicester city fc
            - manchester
            - manchester united fc
            - men's soccer
            - men's sports
            - premier league
            - professional soccer
            - soccer
            - sports
            - united kingdom
            - western europe
            - wsoc
          title: 'Soccer Premier League, Manchester, United Kingdom - 11 May 2021'
      next: eyJ2IjoyLCJzIjoxLCJwIjpbMF19
      per_page: 1
      prev: ''
      search_id: BaMzOAkpHIvfnuWVRFs1ag
      total_count: 46845
    properties:
      data:
        description: Editorial items
        items:
          $ref: '#/definitions/EditorialContent'
        type: array
      message:
        description: Optional error message
        type: string
      next:
        description: Cursor value that represents the next page of results
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      prev:
        description: Cursor value that represents the previous page of results
        type: string
      search_id:
        description: Unique identifier for the search request
        type: string
      total_count:
        description: Total count of all results
        type: integer
    required:
      - data
      - total_count
    type: object
  EditorialUpdatedContent:
    description: Metadata about updated editorial content
    example:
      aspect: 1.481
      assets:
        medium_jpg:
          display_name: Med
          height: 675
          is_licensable: true
          width: 1000
        original:
          display_name: Original
          height: 3263
          is_licensable: true
          width: 4831
        small_jpg:
          display_name: Small
          height: 337
          is_licensable: true
          width: 500
        thumb_170:
          height: 115
          url: >-
            https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg
          width: 170
        thumb_220:
          height: 149
          url: >-
            https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg
          width: 220
        watermark_1500:
          height: 1500
          url: >-
            https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg
          width: 1040
        watermark_450:
          height: 304
          url: >-
            https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg
          width: 450
      byline: ALEX HOFFORD/EPA-EFE/Shutterstock
      caption: ''
      categories: []
      commercial_status:
        status: available
      date_taken: '2018-08-24T00:00:00.000Z'
      description: >-
        Members of the TyLoo e-Sports team from China prepare to face off
        against the Kinguin e-Sports team from Poland at the ICBC (Asia)
        e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August
        2018. The festival runs from 24 to 26 August with professional gamers
        from around the world competing in international e-sports tournaments.
      id: 9804979n
      keywords: []
      rights:
        countries: 'CAN,+DEU,+GBR,+USA,-*'
      supplier_code: EPA
      title: >-
        Hong Kong kicks off international e-Sports competition, China - 24 Aug
        2018
      updated_time: '2019-07-16T00:04:44.000Z'
      updates:
        - addition
    properties:
      aspect:
        type: number
      assets:
        $ref: '#/definitions/EditorialAssets'
      byline:
        type: string
      caption:
        type: string
      categories:
        description: List of categories
        items:
          $ref: '#/definitions/EditorialCategory'
        type: array
      commercial_status:
        properties:
          reason:
            type: string
          status:
            type: string
      created_time:
        format: date-time
        type: string
      date_taken:
        format: date
        type: string
      description:
        type: string
      id:
        type: string
      keywords:
        items:
          type: string
        type: array
      rights:
        properties:
          countries:
            type: string
        type: object
      special_instructions:
        type: string
      supplier_code:
        type: string
      title:
        type: string
      updated_time:
        format: date-time
        type: string
      updates:
        items:
          type: string
        type: array
    required:
      - id
    type: object
  EditorialUpdatedResults:
    description: Editorial updated results
    example:
      data:
        - aspect: 1.481
          assets:
            medium_jpg:
              display_name: Med
              height: 675
              is_licensable: true
              width: 1000
            original:
              display_name: Original
              height: 3263
              is_licensable: true
              width: 4831
            small_jpg:
              display_name: Small
              height: 337
              is_licensable: true
              width: 500
            thumb_170:
              height: 115
              url: >-
                https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg
              width: 170
            thumb_220:
              height: 149
              url: >-
                https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg
              width: 220
            watermark_1500:
              height: 1500
              url: >-
                https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg
              width: 1040
            watermark_450:
              height: 304
              url: >-
                https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg
              width: 450
          byline: ALEX HOFFORD/EPA-EFE/Shutterstock
          caption: ''
          categories: []
          commercial_status:
            status: available
          date_taken: '2018-08-24T00:00:00.000Z'
          description: >-
            Members of the TyLoo e-Sports team from China prepare to face off
            against the Kinguin e-Sports team from Poland at the ICBC (Asia)
            e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24
            August 2018. The festival runs from 24 to 26 August with
            professional gamers from around the world competing in international
            e-sports tournaments.
          id: 9804979n
          keywords: []
          rights:
            countries: 'CAN,+DEU,+GBR,+USA,-*'
          supplier_code: EPA
          title: >-
            Hong Kong kicks off international e-Sports competition, China - 24
            Aug 2018
          updated_time: '2019-07-16T00:04:44.000Z'
          updates:
            - addition
      next: eyJ2IjoxLCJzIjoxfQ==
      per_page: 1
      prev: ''
    properties:
      data:
        description: Editorial updated items
        items:
          $ref: '#/definitions/EditorialUpdatedContent'
        type: array
      message:
        description: Optional error message
        type: string
      next:
        description: Cursor value that represents the next page of results
        type: string
      per_page:
        description: Number of results per page
        type: integer
      prev:
        description: Cursor value that represents the previous page of results
        type: string
    required:
      - data
    type: object
  EditorialVideoAssets:
    description: 'Asset information, including size and thumbnail URLs'
    example:
      original:
        display_name: HD
        file_size: 82233387
        format: avc1
        fps: 30
        height: 1080
        is_licensable: true
        width: 1080
      preview_mp4:
        url: >-
          https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679854a/M0T7A13aNej2g82bMTI4NjY=/Shutterstock_10679854a.mp4
      preview_webm:
        url: >-
          https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679854a/M4T6A63fN2j5g929MTI4NjY=/Shutterstock_10679854a.webm
      thumb_jpg:
        url: >-
          https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679854a/M5TcAf30Ncjcge2eMTI4NjY=/Shutterstock_10679854a.jpg
    properties:
      original:
        $ref: '#/definitions/VideoSizeDetails'
      preview_mp4:
        $ref: '#/definitions/VideoPreviewUrl'
      preview_webm:
        $ref: '#/definitions/VideoPreviewUrl'
      thumb_jpg:
        $ref: '#/definitions/VideoPreviewUrl'
    type: object
  EditorialVideoCategoryResults:
    description: List of editorial video categories
    example:
      data:
        - name: Animal
        - name: Awards
        - name: Art
        - name: Film Stills
    properties:
      data:
        items:
          $ref: '#/definitions/EditorialCategory'
        type: array
    type: object
  EditorialVideoContent:
    description: Metadata about editorial content
    example:
      aspect: 1
      assets:
        original:
          display_name: HD
          file_size: 82233387
          format: avc1
          fps: 30
          height: 1080
          is_licensable: true
          width: 1080
        preview_mp4:
          url: >-
            https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679854a/M0T7A13aNej2g82bMTI4NjY=/Shutterstock_10679854a.mp4
        preview_webm:
          url: >-
            https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679854a/M4T6A63fN2j5g929MTI4NjY=/Shutterstock_10679854a.webm
        thumb_jpg:
          url: >-
            https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679854a/M5TcAf30Ncjcge2eMTI4NjY=/Shutterstock_10679854a.jpg
      byline: ViralHog/Shutterstock
      caption: ''
      categories: []
      date_taken: '2020-11-13T00:00:00.000Z'
      description: >-
        Info from Licensor: "Peeps the Canadian Goose has been raised with our
        family since a gosling. Peeps has made appearances on our local news
        channels, TV shows, and local newspapers. He has been trained to fly
        next to four wheelers, jet ski's, and boats. He has brought joy to many
        people during the pandemic including those with cancer."
      id: 10679854a
      keywords:
        - '2020'
        - adorable
        - birds
        - bizarre
        - canadian goose
        - cute
        - domesticated animals
        - entertainment
        - feel good
        - flew
        - flies
        - fly
        - flying
        - fun
        - goose
        - jet skis
        - nature
        - odd
        - pets
        - played
        - playing
        - plays
        - prior lake
        - sports
        - strange
        - sweet
        - usa
        - viralhog
        - virals
        - water sports
        - weird
      title: >-
        Peeps the Goose Has a Blast on a Jet Ski, Prior Lake, Minnesota, USA -
        13 Nov 2020
    properties:
      aspect:
        type: number
      assets:
        $ref: '#/definitions/EditorialVideoAssets'
      byline:
        type: string
      caption:
        type: string
      categories:
        description: List of categories
        items:
          $ref: '#/definitions/EditorialCategory'
        type: array
      date_taken:
        format: date
        type: string
      description:
        type: string
      id:
        type: string
      keywords:
        items:
          type: string
        type: array
      title:
        type: string
    required:
      - id
    type: object
  EditorialVideoSearchResults:
    description: Editorial search results
    example:
      data:
        - aspect: 1
          assets:
            original:
              display_name: HD
              file_size: 82233387
              format: avc1
              fps: 30
              height: 1080
              is_licensable: true
              width: 1080
            preview_mp4:
              url: >-
                https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679854a/M0T7A13aNej2g82bMTI4NjY=/Shutterstock_10679854a.mp4
            preview_webm:
              url: >-
                https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679854a/M4T6A63fN2j5g929MTI4NjY=/Shutterstock_10679854a.webm
            thumb_jpg:
              url: >-
                https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679854a/M5TcAf30Ncjcge2eMTI4NjY=/Shutterstock_10679854a.jpg
          byline: ViralHog/Shutterstock
          caption: ''
          categories: []
          date_taken: '2020-11-13T00:00:00.000Z'
          description: >-
            Info from Licensor: "Peeps the Canadian Goose has been raised with
            our family since a gosling. Peeps has made appearances on our local
            news channels, TV shows, and local newspapers. He has been trained
            to fly next to four wheelers, jet ski's, and boats. He has brought
            joy to many people during the pandemic including those with cancer."
          id: 10679854a
          keywords:
            - '2020'
            - adorable
            - birds
            - bizarre
            - canadian goose
            - cute
            - domesticated animals
            - entertainment
            - feel good
            - flew
            - flies
            - fly
            - flying
            - fun
            - goose
            - jet skis
            - nature
            - odd
            - pets
            - played
            - playing
            - plays
            - prior lake
            - sports
            - strange
            - sweet
            - usa
            - viralhog
            - virals
            - water sports
            - weird
          title: >-
            Peeps the Goose Has a Blast on a Jet Ski, Prior Lake, Minnesota, USA
            - 13 Nov 2020
      next: eyJ2IjoyLCJzIjoyMCwicCI6WzBdfQ==
      per_page: 1
      prev: ''
      search_id: zhmz9zLmpQehdTPvg8cacQ
      total_count: 331
    properties:
      data:
        description: Editorial items
        items:
          $ref: '#/definitions/EditorialVideoContent'
        type: array
      message:
        description: Optional error message
        type: string
      next:
        description: Cursor value that represents the next page of results
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      prev:
        description: Cursor value that represents the previous page of results
        type: string
      search_id:
        description: Unique identifier for the search request
        type: string
      total_count:
        description: Total count of all results
        type: integer
    required:
      - data
      - total_count
    type: object
  Error:
    description: Error object
    example:
      code: VALIDATION_INVALID_TYPE
      data: '''10'''
      message: 'Invalid type: string should be integer'
      path: $.query.page
    properties:
      code:
        description: The error code of this error
        type: string
      data:
        description: Debugging information about the error
        type: string
      items:
        description: A list of items that produced the error
        items:
          type: object
        type: array
      message:
        description: Specific details about this error
        type: string
      path:
        description: Internal code reference to the source of the error
        type: string
    required:
      - message
    type: object
  FeaturedCollection:
    description: Metadata about a featured collection
    example:
      cover_item:
        url: >-
          https://ak.picdn.net/assets/cms/b467415246debdab45825d915a548f8f79b57882-Collection_1_Thumnail.jpg
      created_time: '2021-07-07T13:10:24.000Z'
      id: '19853'
      items_updated_time: '2021-07-08T12:33:37.000Z'
      name: Exercise & Fitness
      total_item_count: 82
      updated_time: '2021-07-07T13:10:24.000Z'
    properties:
      cover_item:
        $ref: '#/definitions/FeaturedCollectionCoverItem'
      created_time:
        description: Date that the collection was created
        format: date-time
        type: string
      hero_item:
        $ref: '#/definitions/FeaturedCollectionCoverItem'
        description: >-
          Top-level item that is meant as a cover asset, as the first asset seen
          to represent the collection
      id:
        description: Collection ID
        type: string
      items_updated_time:
        description: Date that an item in the collection was last added or removed
        format: date-time
        type: string
      name:
        description: Name of the collection
        type: string
      share_url:
        description: Unique share url for the collection
        type: string
      total_item_count:
        description: Total number of items in the collection
        type: integer
      updated_time:
        description: Date that the collection was last modified
        format: date-time
        type: string
    required:
      - id
      - name
      - total_item_count
    type: object
  FeaturedCollectionCoverItem:
    description: Featured collection cover item metadata
    example:
      url: >-
        https://ak.picdn.net/assets/cms/b467415246debdab45825d915a548f8f79b57882-Collection_1_Thumnail.jpg
    properties:
      url:
        description: URL of the collection cover item
        type: string
    required:
      - url
    type: object
  FeaturedCollectionDataList:
    description: List of featured collections
    example:
      data:
        - cover_item:
            url: >-
              https://ak.picdn.net/assets/cms/b467415246debdab45825d915a548f8f79b57882-Collection_1_Thumnail.jpg
          created_time: '2021-07-07T13:10:24.000Z'
          id: '19853'
          items_updated_time: '2021-07-08T12:33:37.000Z'
          name: Exercise & Fitness
          total_item_count: 82
          updated_time: '2021-07-07T13:10:24.000Z'
      page: 1
      per_page: 5
      total_count: 123455
    properties:
      data:
        description: Featured collections
        items:
          $ref: '#/definitions/FeaturedCollection'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  GenreList:
    additionalProperties: false
    description: List of audio genres
    example:
      data:
        - Rock
        - Pop > Singer-Songwriter
        - Pop > Synth Pop
        - Production / Film Scores
    properties:
      data:
        description: List of genres
        items:
          type: string
        type: array
    required:
      - data
    type: object
  Image:
    description: Information about an image
    example:
      aspect: 1.5
      assets:
        huge_thumb:
          height: 260
          url: >-
            https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg
          width: 390
        large_thumb:
          height: 100
          url: >-
            https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
          width: 150
        preview:
          height: 300
          url: >-
            https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
          width: 450
        preview_1000:
          height: 667
          url: >-
            https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg
          width: 1000
        preview_1500:
          height: 1000
          url: >-
            https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
          width: 1500
        small_thumb:
          height: 67
          url: >-
            https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
          width: 100
      contributor:
        id: '250738318'
      description: cropped image of woman gardening
      has_model_release: true
      id: '1572478477'
      image_type: photo
      media_type: image
    properties:
      added_date:
        description: Date that the image was added by the contributor
        format: date
        type: string
      affiliate_url:
        description: >-
          Affiliate referral link; appears only for registered affiliate
          partners
        format: uri
        type: string
      aspect:
        description: 'Aspect ratio of the image in decimal format, such as 0.6667'
        type: number
      assets:
        $ref: '#/definitions/ImageAssets'
        description: Image asset information
      categories:
        description: Categories that this image is a part of
        items:
          $ref: '#/definitions/Category'
        type: array
      contributor:
        $ref: '#/definitions/Contributor'
      description:
        description: Detailed description of the image
        type: string
      has_model_release:
        description: Indicates whether there are model releases for the image
        type: boolean
      has_property_release:
        description: Indicates whether there are property releases for the image
        type: boolean
      id:
        description: Image ID
        type: string
      image_type:
        description: Type of image
        type: string
      is_adult:
        description: Whether or not this image contains adult content
        type: boolean
      is_editorial:
        description: Whether or not this image is editorial content
        type: boolean
      is_illustration:
        description: Whether or not this image is an illustration
        type: boolean
      keywords:
        description: Keywords associated with the content of this image
        items:
          type: string
        type: array
      media_type:
        description: 'Media type of this image, should always be "image"'
        type: string
      model_releases:
        description: List of model releases
        items:
          $ref: '#/definitions/ModelRelease'
        type: array
      models:
        description: List of models
        items:
          $ref: '#/definitions/Model'
        type: array
      releases:
        description: List of all releases of this image
        items:
          type: string
        type: array
      url:
        description: Link to image information page; included only for certain accounts
        type: string
    required:
      - id
      - media_type
      - contributor
    type: object
  ImageAssets:
    description: Information about the assets that are part of an image
    example:
      huge_thumb:
        height: 260
        url: >-
          https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg
        width: 390
      large_thumb:
        height: 100
        url: >-
          https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
        width: 150
      preview:
        height: 300
        url: >-
          https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
        width: 450
      preview_1000:
        height: 667
        url: >-
          https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg
        width: 1000
      preview_1500:
        height: 1000
        url: >-
          https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
        width: 1500
      small_thumb:
        height: 67
        url: >-
          https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
        width: 100
    properties:
      huge_jpg:
        $ref: '#/definitions/ImageSizeDetails'
      huge_thumb:
        $ref: '#/definitions/Thumbnail'
      large_thumb:
        $ref: '#/definitions/Thumbnail'
      medium_jpg:
        $ref: '#/definitions/ImageSizeDetails'
      preview:
        $ref: '#/definitions/Thumbnail'
      preview_1000:
        $ref: '#/definitions/Thumbnail'
      preview_1500:
        $ref: '#/definitions/Thumbnail'
      small_jpg:
        $ref: '#/definitions/ImageSizeDetails'
      small_thumb:
        $ref: '#/definitions/Thumbnail'
      supersize_jpg:
        $ref: '#/definitions/ImageSizeDetails'
      vector_eps:
        $ref: '#/definitions/ImageSizeDetails'
    type: object
  ImageCreateRequest:
    description: Request to upload an image
    example:
      base64_image: >-
        R0lGODlhgACAAPcAAEwiBLyaLOzNUNmWFNjOrNSuN7x6PPzqeOTMgfKSDMyuTPzwsdi2dHwuBPzbVu
    properties:
      base64_image:
        description: >-
          A Base 64 encoded jpeg or png; images can be no larger than 10mb and
          can be no larger than 10,000 pixels in width or height
        type: string
    required:
      - base64_image
    type: object
  ImageCreateResponse:
    description: Image upload information
    example:
      id: Udb14e1c3540bdbf82b4b3fe12d3a44f2
    properties:
      id:
        type: string
    required:
      - id
    type: object
  ImageDataList:
    description: List of images
    example:
      data:
        - aspect: 1.5
          assets:
            huge_thumb:
              height: 260
              url: >-
                https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg
              width: 390
            large_thumb:
              height: 100
              url: >-
                https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 150
            preview:
              height: 300
              url: >-
                https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 450
            preview_1000:
              height: 667
              url: >-
                https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg
              width: 1000
            preview_1500:
              height: 1000
              url: >-
                https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 1500
            small_thumb:
              height: 67
              url: >-
                https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 100
          contributor:
            id: '250738318'
          description: cropped image of woman gardening
          has_model_release: true
          id: '1572478477'
          image_type: photo
          media_type: image
      page: 1
      per_page: 5
      total_count: 123455
    properties:
      data:
        description: Images
        items:
          $ref: '#/definitions/Image'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  ImageSearchResults:
    description: Image search results
    example:
      data:
        - aspect: 1.5
          assets:
            huge_thumb:
              height: 260
              url: >-
                https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg
              width: 390
            large_thumb:
              height: 100
              url: >-
                https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 150
            preview:
              height: 300
              url: >-
                https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 450
            preview_1000:
              height: 667
              url: >-
                https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg
              width: 1000
            preview_1500:
              height: 1000
              url: >-
                https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 1500
            small_thumb:
              height: 67
              url: >-
                https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
              width: 100
          contributor:
            id: '250738318'
          description: cropped image of woman gardening
          has_model_release: true
          id: '1572478477'
          image_type: photo
          media_type: image
      page: 1
      per_page: 5
      search_id: 749090bb-2967-4a20-b22e-c800dc845e10
      spellcheck_info: {}
      total_count: 45
    properties:
      data:
        description: List of images
        items:
          $ref: '#/definitions/Image'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      search_id:
        description: Unique identifier for the search request
        type: string
      spellcheck_info:
        description: >-
          Returns information if search phrase has potentially been mistyped or
          another query would lead to better search results
        type: object
      total_count:
        description: Total count of all results across all pages
        type: integer
    required:
      - data
      - total_count
      - search_id
    type: object
  ImageSizeDetails:
    description: Image size information
    example:
      display_name: Med
      dpi: 300
      file_size: 860200
      format: jpg
      height: 667
      is_licensable: true
      width: 1000
    properties:
      display_name:
        description: Display name of this image size
        type: string
      dpi:
        type: integer
      file_size:
        description: File size (in bytes) of this image size
        type: integer
      format:
        description: Format of this image size
        type: string
      height:
        description: Height of this image size
        type: integer
      is_licensable:
        description: Whether or not this image can be licensed in this image size
        type: boolean
      width:
        description: Width of this image size
        type: integer
    type: object
  Instrument:
    description: Information about an musical instrument
    example:
      id: bright_roomy_kit
      name: Bright Roomy Kit
      previews:
        - content_type: audio/mp3
          url: >-
            https://public-cdn.ampermusic.com/instruments/previews/bright_roomy_kit_v1.mp3
      tags:
        - Percussion
        - Aux Percs
        - Set Cymbals
        - Crash
        - Open
        - Ride
        - Set Hi-Hat
        - Set Kicks
        - Stick Snare
        - Quad Toms
        - Roto Toms
    properties:
      id:
        description: The id of the instrument
        type: string
      name:
        description: Name of the instrument
        type: string
      previews:
        description: Preview of the instrument
        items:
          $ref: '#/definitions/Preview'
        type: array
      tags:
        description: List of tags
        items:
          type: string
        type: array
    type: object
  InstrumentList:
    additionalProperties: false
    description: List of instruments
    example:
      data:
        - Orchestra
        - Organ
        - Oud
        - Pads
        - Electric Guitar
    properties:
      data:
        description: List of instruments
        items:
          type: string
        type: array
    required:
      - data
    type: object
  Instruments:
    description: Instruments
    example:
      id: bright_roomy_kit
      name: Bright Roomy Kit
    properties:
      id:
        description: The string id of the instrument
        type: string
      name:
        description: The string name of the instrument
        type: string
    type: object
  InstrumentsListResult:
    description: Image search results
    example:
      data:
        - id: bright_roomy_kit
          name: Bright Roomy Kit
          previews:
            - content_type: audio/mp3
              url: >-
                https://public-cdn.ampermusic.com/instruments/previews/bright_roomy_kit_v1.mp3
          tags:
            - Percussion
            - Aux Percs
            - Set Cymbals
            - Crash
            - Open
            - Ride
            - Set Hi-Hat
            - Set Kicks
            - Stick Snare
            - Quad Toms
            - Roto Toms
      page: 1
      per_page: 5
    properties:
      data:
        description: List of instrumnets
        items:
          $ref: '#/definitions/Instrument'
        type: array
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
    type: object
  KeywordDataList:
    description: List of keywords
    example:
      data:
        - nature
        - wildlife
        - animal
        - cute
        - bamboo
        - panda
        - china
        - wild
        - endangered
        - black
        - bear
    properties:
      data:
        description: Keywords
        items:
          type: string
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
  Language:
    description: Language code
    enum:
      - cs
      - da
      - de
      - el
      - en
      - es
      - fi
      - fr
      - hu
      - id
      - it
      - ja
      - ko
      - nb
      - nl
      - pl
      - pt
      - ro
      - ru
      - sv
      - th
      - tr
      - vi
      - zh
      - zh-Hant
    example: cs
    title: language
    type: string
  LicenseAudio:
    description: An audio track in a licensing request
    example:
      audio_id: '123456789'
      license: audio_platform
      search_id: '987654321'
    properties:
      audio_id:
        description: ID of the track being licensed
        type: string
      license:
        description: Type of license
        enum:
          - audio_platform
          - premier_music_basic
          - premier_music_extended
          - premier_music_pro
          - premier_music_comp
        type: string
      search_id:
        description: ID of the search that led to this licensing event
        type: string
    required:
      - audio_id
    type: object
  LicenseAudioRequest:
    description: Audio license request data
    example:
      audio:
        - audio_id: '591623'
          license: audio_platform
          metadata:
            customer_id: '12345'
    properties:
      audio:
        description: List of audio tracks to license
        items:
          $ref: '#/definitions/LicenseAudio'
        maxItems: 50
        type: array
    required:
      - audio
    type: object
  LicenseAudioResult:
    description: The response to a licensing request for an audio track
    example:
      audio_id: '123456789'
      download:
        url: 'http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav'
    properties:
      audio_id:
        description: ID of the track that was licensed
        type: string
      download:
        $ref: '#/definitions/Url'
      error:
        description: Error information if applicable
        type: string
    required:
      - audio_id
    type: object
  LicenseAudioResultDataList:
    description: List of audio license results
    example:
      data:
        - audio_id: '123456789'
          download:
            url: 'http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav'
    properties:
      data:
        description: License results
        items:
          $ref: '#/definitions/LicenseAudioResult'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  LicenseEditorialContent:
    description: Individual editorial content to license
    example:
      editorial_id: 10687730b
      license: premier_editorial_comp
      metadata:
        customer_id: '12345'
        geo_location: US
        number_viewed: '15'
        search_term: dog
      size: original
    properties:
      editorial_id:
        description: Editorial ID
        type: string
      license:
        description: License agreement to use for licensing
        type: string
      metadata:
        $ref: '#/definitions/LicenseRequestMetadata'
      size:
        default: original
        description: Asset size to download
        enum:
          - small
          - medium
          - original
        type: string
    required:
      - editorial_id
      - license
    type: object
  LicenseEditorialContentRequest:
    description: License editorial content request
    example:
      country: USA
      editorial:
        - editorial_id: 10687730b
          license: premier_editorial_comp
          metadata:
            customer_id: '12345'
            geo_location: US
            number_viewed: '15'
            search_term: dog
          size: original
    properties:
      country:
        description: >-
          Mandatory country code for where the editorial content will be
          distributed; this value is used for rights checks
        example: USA
      editorial:
        description: Editorial content to license
        items:
          $ref: '#/definitions/LicenseEditorialContent'
        type: array
    required:
      - country
      - editorial
    type: object
  LicenseEditorialContentResult:
    description: The response to a licensing request for editorial content
    example:
      allotment_charge: 1
      download:
        url: >-
          https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323
      editorial_id: '69656358'
    properties:
      allotment_charge:
        description: 'For pre-paid plans, how many credits were used for the item license'
        type: integer
      download:
        $ref: '#/definitions/Url'
        description: Information that is needed to download the image
      editorial_id:
        description: Editorial ID
        type: string
      error:
        type: string
    required:
      - editorial_id
    type: object
  LicenseEditorialContentResults:
    description: List of editorial license results
    example:
      data:
        - allotment_charge: 1
          download:
            url: >-
              https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323
          editorial_id: '69656358'
      page: 1
      per_page: 1
      total_count: 12
    properties:
      data:
        description: License results
        items:
          $ref: '#/definitions/LicenseEditorialContentResult'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: Optional error message
        type: string
      page:
        description: Current page of the response
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results
        type: integer
  LicenseEditorialVideoContent:
    description: Individual editorial video content to license
    example:
      editorial_id: 10679854a
      license: premier_editorial_video_digital_only
      metadata:
        purchase_order: '12345'
      size: original
    properties:
      editorial_id:
        description: Editorial ID
        type: string
      license:
        description: License agreement to use for licensing
        enum:
          - premier_editorial_video_digital_only
          - premier_editorial_video_all_media
          - premier_editorial_video_all_media_single_territory
          - premier_editorial_video_comp
        type: string
      metadata:
        $ref: '#/definitions/LicenseRequestMetadata'
      size:
        default: original
        description: Asset size to download
        enum:
          - original
        type: string
    required:
      - editorial_id
      - license
    type: object
  LicenseEditorialVideoContentRequest:
    description: License editorial video content request
    example:
      country: USA
      editorial:
        - editorial_id: 10679854a
          license: premier_editorial_video_digital_only
          metadata:
            purchase_order: '12345'
          size: original
    properties:
      country:
        description: >-
          Mandatory country code for where the editorial content will be
          distributed; this value is used for rights checks
        example: USA
      editorial:
        description: Editorial content to license
        items:
          $ref: '#/definitions/LicenseEditorialVideoContent'
        type: array
    required:
      - country
      - editorial
    type: object
  LicenseFormat:
    description: Description of a license
    example:
      description: Med
      format: jpg
      media_type: image
      min_resolution: 1000
      size: medium
    properties:
      description:
        description: Description of the license
        type: string
      format:
        description: >-
          Format or extension of the media, such as mpeg for videos or jpeg for
          images
        type: string
      media_type:
        description: Media type of the license
        enum:
          - image
          - video
          - audio
          - editorial
        type: string
      min_resolution:
        description: 'Width of the media, in pixels, allowed by this license'
        type: integer
      size:
        description: >-
          Keyword that details the size of the media, such as hd or sd for
          video, huge or vector for images
        type: string
    type: object
  LicenseImage:
    description: Data required to license an image
    example:
      custom_dimensions:
        height: 600
        width: 800
      editorial_acknowledgement: true
      format: jpg
      image_id: '123456789'
      metadata:
        customer_id: '12345'
        geo_location: US
        number_viewed: '15'
        search_term: dog
      price: 12.34
      show_modal: true
      size: small
      subscription_id: s8906043
    properties:
      auth_cookie:
        $ref: '#/definitions/Cookie'
        description: Cookie object
      custom_dimensions:
        $ref: '#/definitions/CustomSizeDimensions'
      editorial_acknowledgement:
        description: Set to true to acknowledge the editorial agreement
        type: boolean
      format:
        description: Image format to download
        enum:
          - jpg
          - eps
        type: string
      image_id:
        description: Image ID
        type: string
      metadata:
        $ref: '#/definitions/LicenseRequestMetadata'
      price:
        description: >-
          For revenue-sharing transactions, the final cost to the end customer
          as a floating-point number in the transaction currency, such as 12.34
        type: number
      search_id:
        description: ID of the search that led to this licensing transaction
        type: string
      show_modal:
        description: (Deprecated)
        type: boolean
        x-deprecated: true
      size:
        description: Image size to download
        enum:
          - small
          - medium
          - huge
          - vector
          - custom
        type: string
      subscription_id:
        description: ID of the subscription to use for the download.
        type: string
      verification_code:
        description: (Deprecated)
        type: string
        x-deprecated: true
    required:
      - image_id
    type: object
  LicenseImageRequest:
    description: Image license request data
    example:
      images:
        - custom_dimensions:
            height: 600
            width: 800
          editorial_acknowledgement: true
          format: jpg
          image_id: '123456789'
          metadata:
            customer_id: '12345'
            geo_location: US
            number_viewed: '15'
            search_term: dog
          price: 12.34
          show_modal: true
          size: small
          subscription_id: s8906043
    properties:
      images:
        description: Images to create licenses for
        items:
          $ref: '#/definitions/LicenseImage'
        maxItems: 50
        type: array
    required:
      - images
    type: object
  LicenseImageResult:
    description: The response to a licensing request for an image
    example:
      allotment_charge: 1
      download:
        url: >-
          https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.jpg
      image_id: '59656357'
      price:
        local_amount: 12.34
        local_currency: EUR
    properties:
      allotment_charge:
        description: Number of credits that this licensing event used
        type: integer
      download:
        $ref: '#/definitions/Url'
        description: Information that is needed to download the image
      error:
        description: 'Error message, appears only if there was an error'
        type: string
      image_id:
        description: Image ID that was licensed
        type: string
      price:
        $ref: '#/definitions/Price'
        description: Wholesale price information; only for rev-share partners
    required:
      - image_id
    type: object
  LicenseImageResultDataList:
    description: List of information about licensed images
    example:
      data:
        - allotment_charge: 1
          download:
            url: >-
              https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.jpg
          image_id: '59656357'
      page: 1
      per_page: 5
      total_count: 23
    properties:
      data:
        description: License results
        items:
          $ref: '#/definitions/LicenseImageResult'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  LicenseRequestMetadata:
    description: >-
      Additional information for license requests for enterprise accounts and
      API subscriptions, 4 fields maximum; which fields are required is set by
      the account holder
    example:
      customer_id: '12345'
      geo_location: US
      number_viewed: '15'
      search_term: dog
    maxProperties: 4
    properties: {}
    type: object
  LicenseVideo:
    description: Data required to license a video
    example:
      size: hd
      subscription_id: s8241143
      video_id: '2140697'
    properties:
      auth_cookie:
        $ref: '#/definitions/Cookie'
      editorial_acknowledgement:
        description: Whether or not this item is editorial content
        type: boolean
      metadata:
        $ref: '#/definitions/LicenseRequestMetadata'
      price:
        description: >-
          Retail price amount as a floating-point number in the transaction
          currency, such as 12.34; only for rev-share partners
        type: number
      search_id:
        description: ID of the search that led to this licensing event
        type: string
      show_modal:
        description: (Deprecated)
        type: boolean
        x-deprecated: true
      size:
        description: Size of the video being licensed
        enum:
          - web
          - sd
          - hd
          - 4k
        type: string
      subscription_id:
        description: ID of the subscription used for this license
        type: string
      video_id:
        description: ID of the video being licensed
        type: string
    required:
      - video_id
    type: object
  LicenseVideoRequest:
    description: List of videos to license
    example:
      videos:
        - size: hd
          subscription_id: s8241143
          video_id: '2140697'
    properties:
      videos:
        description: Videos to license
        items:
          $ref: '#/definitions/LicenseVideo'
        maxItems: 50
        type: array
    required:
      - videos
    type: object
  LicenseVideoResult:
    description: The response to a licensing request for a video
    example:
      allotment_charge: 1
      download:
        url: >-
          https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.mp4
      price:
        local_amount: 12.34
        local_currency: EUR
      video_id: '123456789'
    properties:
      allotment_charge:
        description: Number of credits that this licensing event used
        type: integer
      download:
        $ref: '#/definitions/Url'
      error:
        description: Potential error that occurred during licensing
        type: string
      price:
        $ref: '#/definitions/Price'
        description: Wholesale price information; only for rev-share partners only
      video_id:
        description: ID of the video that was licensed
        type: string
    required:
      - video_id
    type: object
  LicenseVideoResultDataList:
    description: List of video license results
    example:
      data:
        - allotment_charge: 1
          download:
            url: >-
              https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.mp4
          price:
            local_amount: 12.34
            local_currency: EUR
          video_id: '123456789'
      page: 1
      per_page: 5
      total_count: 123455
    properties:
      data:
        description: License results
        items:
          $ref: '#/definitions/LicenseVideoResult'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  Model:
    description: >-
      Information about a human model or property that appears in media; used to
      search for assets that this model is in
    example:
      id: '123456789'
    properties:
      id:
        description: ID of the model
        type: string
    required:
      - id
    type: object
  ModelRelease:
    description: Model and property release metadata
    example:
      id: '123456789'
    properties:
      id:
        description: ID of the model or property release
        type: string
    type: object
  MoodList:
    additionalProperties: false
    description: List of audio moods
    example:
      data:
        - Action / Sports
        - Adventure / Discovery
        - Aerobics / Workout
        - Aggressive
    properties:
      data:
        description: List of audio moods
        items:
          type: string
        type: array
    required:
      - data
    type: object
  OauthAccessTokenResponse:
    description: Access token response to client apps
    example:
      access_token: >-
        v2/NmQwOTc0NTBiMjA5YzZkY2Q4NTkvMTA4OTg1MDk5L2N1c3RvbWVyLzIvZjB2a0RseGo4Rkt6ZjRmVWJNMm10V2VzcHh1NTBlZWJ6andUQU1NeTVYYnNFTDVWOFRJakItS2RnZTlmbEY1Y3haNWdXLUtYc2JhaXo5djk0V0p2QzZUUWZ4c2FNWm41NkdLYUgyVWlCaVUtQTNVMV9YQWpzd3lpblI3SlZEem8wSG1qQ2NzSkJlX3VQTnNXenBIdkd4SXViVi1rRGJTVENCV0g1U3U0RXRJSV9rSm5lQkl5QXlvbm5JN241UUhv
      token_type: Bearer
    properties:
      access_token:
        description: Access token that can be used for future requests
        type: string
      expires_in:
        description: >-
          Number of seconds before token expires, only present for expiring
          tokens
        type: integer
      refresh_token:
        description: >-
          A refresh token that can be used to renew the access_token when it
          expires, only present for expiring tokens
        type: string
      token_type:
        default: Bearer
        description: Type of token
        type: string
      user_token:
        description: 'Metadata about the access_token, only present for expiring tokens'
        type: string
    required:
      - access_token
      - token_type
    type: object
  Preview:
    description: Preview information
    example:
      content_type: audio/mp3
      url: 'https://public-cdn.ampermusic.com/instruments/previews/roomy_kit_v1.mp3'
    properties:
      content_type:
        description: 'Content type of the preview, currently audio/mp3'
        enum:
          - audio/mp3
        type: string
      url:
        description: Url of the instrument's preview file
        type: string
    type: object
  Price:
    description: Price
    example:
      local_amount: 12.34
      local_currency: EUR
    properties:
      local_amount:
        description: >-
          Floating-point amount of the calculated rev-share price in the
          currency local_currency
        type: number
      local_currency:
        description: Currency of the rev-share price that was calculated
        type: string
    type: object
  Recommendation:
    description: Media Recommendation
    example:
      id: '123456789'
    properties:
      id:
        description: Media ID
        type: string
    required:
      - id
    type: object
  RecommendationDataList:
    description: List of recommended images
    example:
      data:
        - id: '123456789'
        - id: '99379946'
        - id: '133918412'
      page: 1
      per_page: 5
      total_count: 12
    properties:
      data:
        description: Recommended images
        items:
          $ref: '#/definitions/Recommendation'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  RedownloadImage:
    description: Data required to redownload an image
    example:
      size: small
    properties:
      auth_cookie:
        $ref: '#/definitions/Cookie'
        description: (Deprecated)
        x-deprecated: true
      show_modal:
        description: (Deprecated)
        type: boolean
        x-deprecated: true
      size:
        description: Size of the image
        enum:
          - small
          - medium
          - huge
          - supersize
          - vector
        type: string
      verification_code:
        description: (Deprecated)
        type: string
        x-deprecated: true
    type: object
  RedownloadVideo:
    description: Data required to redownload a video
    example:
      size: web
    properties:
      auth_cookie:
        $ref: '#/definitions/Cookie'
        description: (Deprecated)
        x-deprecated: true
      show_modal:
        description: (Deprecated)
        type: boolean
        x-deprecated: true
      size:
        description: Size of the video
        enum:
          - web
          - sd
          - hd
          - 4k
        type: string
      verification_code:
        description: (Deprecated)
        type: string
        x-deprecated: true
    type: object
  RegisterVideoEditorRequest:
    description: Request to register a new instance of the video editor
    example:
      imageSubscriptionId: s1234567
      videoSubscriptionId: s7654321
      webhookUrl: 'http://example.com:3009/videoCompleteCallback'
    properties:
      imageSubscriptionId:
        description: The ID of the subscription to use for licensing images
        type: string
      videoSubscriptionId:
        description: The ID of the subscription to use for licensing videos
        type: string
      webhookUrl:
        description: The callback URL of the application that receives completed videos
        type: string
    required:
      - webhookUrl
      - imageSubscriptionId
      - videoSubscriptionId
    type: object
  SearchEntitiesRequest:
    description: Search entity request data
    example:
      text: Planting flowers is a great way to make springtime more beautiful.
    properties:
      text:
        description: Plain text to extract keywords from
        maxLength: 100000
        minLength: 1
        type: string
    required:
      - text
    type: object
  SearchEntitiesResponse:
    description: The response to a request for keyword analysis
    example:
      keywords:
        - planting
        - flowers
        - springtime
        - beautiful
    properties:
      keywords:
        description: The top keywords from the submitted text
        items:
          type: string
        type: array
  Subscription:
    description: Subscription information
    example:
      allotment:
        downloads_left: 5
        downloads_limit: 10
        end_time: '2020-05-29T17:10:22.000Z'
        start_time: '2020-05-29T17:10:22.000Z'
      asset_type: images
      description: Annual Subscription
      expiration_time: '2020-05-29T17:10:22.000Z'
      formats:
        - description: Small
          format: jpg
          media_type: image
          min_resolution: 500
          size: small
        - description: Med
          format: jpg
          media_type: image
          min_resolution: 1000
          size: medium
        - description: Vector
          format: eps
          media_type: image
          size: vector
      id: s8906043
      license: standard
      metadata: {}
    properties:
      allotment:
        $ref: '#/definitions/Allotment'
      asset_type:
        description: >-
          Identifier for the type of assets associated with this subscription
          (images, videos, audio, editorial)
        type: string
      description:
        description: Description of the subscription
        type: string
      expiration_time:
        description: Date the subscription ends
        format: date-time
        type: string
      formats:
        description: List of formats that are licensable for the subscription
        items:
          $ref: '#/definitions/LicenseFormat'
        type: array
      id:
        description: Unique internal identifier for the subscription
        type: string
      license:
        description: Internal identifier for the type of subscription
        type: string
      metadata:
        $ref: '#/definitions/SubscriptionMetadata'
      price_per_download:
        $ref: '#/definitions/Price'
    required:
      - id
    type: object
  SubscriptionDataList:
    description: List of subscriptions
    example:
      data:
        - allotment:
            downloads_left: 5
            downloads_limit: 10
            end_time: '2020-05-29T17:10:22.000Z'
            start_time: '2020-05-29T17:10:22.000Z'
          asset_type: images
          description: Annual Subscription
          expiration_time: '2020-05-29T17:10:22.000Z'
          formats:
            - description: Small
              format: jpg
              media_type: image
              min_resolution: 500
              size: small
            - description: Med
              format: jpg
              media_type: image
              min_resolution: 1000
              size: medium
            - description: Vector
              format: eps
              media_type: image
              size: vector
          id: s8906043
          license: standard
          metadata: {}
      page: 1
      per_page: 5
      total_count: 123455
    properties:
      data:
        description: Subscriptions retrieved from this user
        items:
          $ref: '#/definitions/Subscription'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: Optional error message
        type: string
      page:
        description: Current page that is being queried
        type: integer
      per_page:
        description: Amount of subscriptions to show per page
        type: integer
      total_count:
        description: Total number of subscriptions for this user
        type: integer
  SubscriptionMetadata:
    description: Subscription metadata; different for each customer
    example:
      client:
        is_required: false
        name: purchase_order
      job:
        is_required: true
        name: client_name
      other:
        is_required: false
        name: custom_value
    type: object
  Suggestions:
    description: List of search suggestions
    example:
      data:
        - cat scan
        - cats and dogs
        - cats playing
        - catsuit
        - cat silhouette
        - catskills
        - cats eyes
        - cat sitting
        - cat sleeping
        - cats eye
    properties:
      data:
        description: Search suggestions
        items:
          type: string
        type: array
    type: object
  TestEcho:
    description: Text to echo in the response
    example:
      text: Test string
    properties:
      text:
        type: string
    type: object
  TestValidate:
    description: Validation results
    example:
      header:
        user-agent: >-
          Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)
          Chrome/51.0.2704.103 Safari/537.36
      query:
        id: 123456
        tag:
          - Test string
    properties:
      header:
        $ref: '#/definitions/TestValidateHeader'
        description: Headers as included in the request
      query:
        $ref: '#/definitions/TestValidateQuery'
        description: Query as included in the request
    type: object
  TestValidateHeader:
    description: Validation results
    example:
      user-agent: >-
        Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)
        Chrome/51.0.2704.103 Safari/537.36
    properties:
      user-agent:
        description: User agent to expect in the response
        type: string
    type: object
  TestValidateQuery:
    description: Validation results
    example:
      id: 123456
      tag:
        - string
    properties:
      id:
        description: Integer ID that was passed in the request
        type: integer
      tag:
        description: List of tags that were passed in the request
        items:
          type: string
        type: array
    required:
      - id
    type: object
  Thumbnail:
    description: Image thumbnail information
    example:
      height: 100
      url: >-
        https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg
      width: 150
    properties:
      height:
        description: Height in pixels of the image thumbnail
        type: integer
      url:
        description: Direct URL to the image
        type: string
      width:
        description: Width in pixels of the image thumbnail
        type: integer
    required:
      - url
      - height
      - width
    type: object
  UpdateVideoEditorRequest:
    description: Request to update an existing instance of the video editor
    example:
      imageSubscriptionId: s2345671
      videoSubscriptionId: s6543217
      webhookUrl: 'http://example.com:3009/updatedVideoCompleteCallback'
    properties:
      imageSubscriptionId:
        description: The ID of the subscription to use for licensing images
        type: string
      videoSubscriptionId:
        description: The ID of the subscription to use for licensing videos
        type: string
      webhookUrl:
        description: The callback URL of the application that receives completed videos
        type: string
    type: object
  UpdatedMedia:
    description: Information about a piece of updated media
    example:
      id: '123456789'
      updated_time: '2020-05-29T17:10:22.000Z'
      updates:
        - addition
        - edit
    properties:
      id:
        description: ID of the media
        type: string
      updated_time:
        description: Date that the media was updated
        format: date-time
        type: string
      updates:
        description: Types of updates that were made to the piece of media
        items:
          type: string
        type: array
    required:
      - id
      - updated_time
      - updates
    type: object
  UpdatedMediaDataList:
    description: List of updated media
    example:
      data:
        - id: '123456789'
          updated_time: '2020-05-29T17:10:22.000Z'
          updates:
            - addition
            - edit
      page: 1
      per_page: 5
      total_count: 13
    properties:
      data:
        description: Updated media items
        items:
          $ref: '#/definitions/UpdatedMedia'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  Url:
    description: URL object
    example:
      url: >-
        https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.jpg
    properties:
      url:
        description: 'URL that can be used to download the unwatermarked, licensed asset'
        type: string
    required:
      - url
    type: object
  Urls:
    description: List of URLs
    example:
      urls:
        - string
    properties:
      urls:
        description: URLs
        items:
          type: string
        type: array
    required:
      - urls
    type: object
  UserDetails:
    description: User details
    example:
      contributor_id: '212'
      first_name: John
      full_name: John Doe
      id: '101782699'
      language: es
      last_name: Doe
      username: jdoe
    properties:
      contributor_id:
        description: 'Unique internal identifier of the user, as a contributor'
        type: string
      customer_id:
        description: 'Unique internal identifier of the user, as a purchaser'
        type: string
      email:
        description: Email address of the user
        type: string
      first_name:
        description: First name of the user
        type: string
      full_name:
        description: 'Full name including first, middle, and last name of the user'
        type: string
      id:
        description: >-
          Unique internal identifier for the user, not tied to contributor or
          purchasing customer
        type: string
      is_premier:
        description: 'True if the user has access to the Premier collection, false otherwise'
        type: boolean
      is_premier_parent:
        description: >-
          True if the user has access to the Premier collection and also has
          child users
        type: boolean
      language:
        description: Main language of the user account
        type: string
      last_name:
        description: Last name of the user
        type: string
      only_enhanced_license:
        description: 'True if the user has an enterprise license, false otherwise'
        type: boolean
      only_sensitive_use:
        description: 'True if the user has access to sensitive use only, false otherwise'
        type: boolean
      organization_id:
        description: >-
          Unique internal identifier for the user's organization, specific to
          Premier users
        type: string
      premier_permissions:
        description: List of permissions allowed through the Premier client
        items:
          type: string
        type: array
      username:
        description: User name associated to the user
        type: string
    type: object
  Video:
    description: Information about a video
    example:
      added_date: '2019-07-13T00:00:00.000Z'
      aspect: 1.778
      aspect_ratio: 969
      assets:
        hd:
          display_name: Original HD
          file_size: 110359552
          format: avc1
          fps: 29.97
          height: 1080
          is_licensable: true
          width: 1920
        preview_jpg:
          url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
        preview_mp4:
          url: >-
            https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
        preview_webm:
          url: >-
            https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
        sd:
          display_name: Standard Definition MPEG
          file_size: 4577280
          format: mov
          fps: 29.97
          height: 480
          is_licensable: true
          width: 852
        thumb_jpg:
          url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
        thumb_jpgs:
          urls:
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/1.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/2.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/3.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/4.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/5.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/6.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/7.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/8.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/9.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/10.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/11.jpg'
            - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
        thumb_mp4:
          url: >-
            https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
        thumb_webm:
          url: >-
            https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
        web:
          display_name: Low Resolution MPEG
          file_size: 1291264
          format: mov
          fps: 29.97
          height: 240
          is_licensable: true
          width: 426
      categories:
        - id: '12'
          name: Nature
        - id: '13'
          name: People
      contributor:
        id: '4411978'
      description: >-
        Camera follows hipster millennial young woman in orange jacket running
        up on top of mountain summit at sunset, jumps on top of rocks, raises
        arms into air, happy and drunk on life, youth and happiness
      duration: 14.081
      has_model_release: true
      has_property_release: false
      id: '1033184651'
      is_adult: false
      is_editorial: false
      keywords:
        - active
        - activity
        - adventure
        - arms
        - backpacker
        - carefree
        - celebrating
        - cliff
        - climate
        - cloud
        - discovery
        - escape
        - explore
        - extreme
        - free
        - freedom
        - girl
        - happy
        - high
        - hiker
        - hiking
        - hill
        - independent
        - inspiration
        - landscape
        - leisure
        - lifestyle
        - mountain
        - mountains
        - nature
        - outdoor
        - peak
        - person
        - rock
        - scenic
        - sky
        - sport
        - success
        - summer
        - summit
        - sun
        - sunset
        - top
        - tourism
        - travel
        - trekking
        - vacation
        - view
        - winning
        - woman
      media_type: video
      models:
        - id: '33233810'
        - id: '25487168'
    properties:
      added_date:
        description: Date this video was added to the Shutterstock library
        format: date
        type: string
      affiliate_url:
        description: >-
          Affiliate referral link; appears only for registered affiliate
          partners
        format: uri
        type: string
      aspect:
        description: 'Aspect ratio of this video in decimal format, such as 0.6667'
        type: number
      aspect_ratio:
        description: 'Aspect ratio of the video as a ratio, such as 16:9'
        type: string
      assets:
        $ref: '#/definitions/VideoAssets'
      categories:
        description: List of categories
        items:
          $ref: '#/definitions/Category'
        type: array
      contributor:
        $ref: '#/definitions/Contributor'
      description:
        description: Description of this video
        type: string
      duration:
        description: 'Duration of this video, in seconds'
        type: number
      has_model_release:
        description: >-
          Whether or not this video has been released for use by the model
          appearing in it
        type: boolean
      has_property_release:
        description: >-
          Whether or not this video has received a release to show the landmark
          or property appearing in it
        type: boolean
      id:
        description: ID of the video
        type: string
      is_adult:
        description: Whether or not this video contains adult content
        type: boolean
      is_editorial:
        description: Whether or not this video is editorial content
        type: boolean
      keywords:
        description: Keywords associated with the content of this video
        items:
          type: string
        type: array
      media_type:
        description: 'Media type of this video, should always be "video"'
        type: string
      models:
        description: List of models in this video
        items:
          $ref: '#/definitions/Model'
        type: array
      url:
        description: Link to video information page; included only for certain accounts
        type: string
    required:
      - id
      - media_type
      - contributor
    type: object
  VideoAssets:
    description: Video asset information
    example:
      hd:
        display_name: Original HD
        file_size: 110359552
        format: avc1
        fps: 29.97
        height: 1080
        is_licensable: true
        width: 1920
      preview_jpg:
        url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
      preview_mp4:
        url: >-
          https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
      preview_webm:
        url: >-
          https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
      sd:
        display_name: Standard Definition MPEG
        file_size: 4577280
        format: mov
        fps: 29.97
        height: 480
        is_licensable: true
        width: 852
      thumb_jpg:
        url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
      thumb_jpgs:
        urls:
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/1.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/2.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/3.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/4.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/5.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/6.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/7.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/8.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/9.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/10.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/11.jpg'
          - 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
      thumb_mp4:
        url: >-
          https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
      thumb_webm:
        url: >-
          https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
      web:
        display_name: Low Resolution MPEG
        file_size: 1291264
        format: mov
        fps: 29.97
        height: 240
        is_licensable: true
        width: 426
    properties:
      4k:
        $ref: '#/definitions/VideoSizeDetails'
      hd:
        $ref: '#/definitions/VideoSizeDetails'
      preview_jpg:
        $ref: '#/definitions/Url'
      preview_mp4:
        $ref: '#/definitions/Url'
      preview_webm:
        $ref: '#/definitions/Url'
      sd:
        $ref: '#/definitions/VideoSizeDetails'
      thumb_jpg:
        $ref: '#/definitions/Url'
      thumb_jpgs:
        $ref: '#/definitions/Urls'
      thumb_mp4:
        $ref: '#/definitions/Url'
      thumb_webm:
        $ref: '#/definitions/Url'
      web:
        $ref: '#/definitions/VideoSizeDetails'
    type: object
  VideoCollectionItemDataList:
    description: List of items in a collection
    example:
      data:
        - added_time: '2016-08-18T22:52:59.000Z'
          id: '76688182'
          media_type: video
        - added_time: '2016-08-18T22:52:59.000Z'
          id: '40005859'
          media_type: video
      page: 1
      per_page: 100
    properties:
      data:
        description: Assets in the collection
        items:
          $ref: '#/definitions/CollectionItem'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: The current page of results
        type: integer
      per_page:
        description: The number of results per page
        type: integer
      total_count:
        description: The total number of results across all pages
        type: integer
  VideoDataList:
    description: List of videos
    example:
      data:
        - added_date: '2019-07-13T00:00:00.000Z'
          aspect: 1.778
          aspect_ratio: 969
          assets:
            hd:
              display_name: Original HD
              file_size: 110359552
              format: avc1
              fps: 29.97
              height: 1080
              is_licensable: true
              width: 1920
            preview_jpg:
              url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
            preview_mp4:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
            preview_webm:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
            sd:
              display_name: Standard Definition MPEG
              file_size: 4577280
              format: mov
              fps: 29.97
              height: 480
              is_licensable: true
              width: 852
            thumb_jpg:
              url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
            thumb_jpgs:
              urls:
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/1.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/2.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/3.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/4.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/5.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/6.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/7.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/8.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/9.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/10.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/11.jpg
                - >-
                  https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg
            thumb_mp4:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
            thumb_webm:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
            web:
              display_name: Low Resolution MPEG
              file_size: 1291264
              format: mov
              fps: 29.97
              height: 240
              is_licensable: true
              width: 426
          categories:
            - id: '12'
              name: Nature
            - id: '13'
              name: People
          contributor:
            id: '4411978'
          description: >-
            Camera follows hipster millennial young woman in orange jacket
            running up on top of mountain summit at sunset, jumps on top of
            rocks, raises arms into air, happy and drunk on life, youth and
            happiness
          duration: 14.081
          has_model_release: true
          has_property_release: false
          id: '1033184651'
          is_adult: false
          is_editorial: false
          keywords:
            - active
            - activity
            - adventure
            - arms
            - backpacker
            - carefree
            - celebrating
            - cliff
            - climate
            - cloud
            - discovery
            - escape
            - explore
            - extreme
            - free
            - freedom
            - girl
            - happy
            - high
            - hiker
            - hiking
            - hill
            - independent
            - inspiration
            - landscape
            - leisure
            - lifestyle
            - mountain
            - mountains
            - nature
            - outdoor
            - peak
            - person
            - rock
            - scenic
            - sky
            - sport
            - success
            - summer
            - summit
            - sun
            - sunset
            - top
            - tourism
            - travel
            - trekking
            - vacation
            - view
            - winning
            - woman
          media_type: video
          models:
            - id: '33233810'
            - id: '25487168'
      page: 1
      per_page: 5
      total_count: 25
    properties:
      data:
        description: Videos
        items:
          $ref: '#/definitions/Video'
        type: array
      errors:
        description: Error list; appears only if there was an error
        items:
          $ref: '#/definitions/Error'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      total_count:
        description: Total count of all results across all pages
        type: integer
  VideoEditorTokenRequest:
    description: Request for a video editor user access token
    example:
      userId: '123'
    properties:
      userId:
        description: >-
          A unique user ID that your app assigns to the user that is loading the
          video editor
        type: string
    required:
      - userId
    type: object
  VideoEditorTokenResponse:
    description: The response that includes the user access token and its expiration date
    example:
      token:
        expirationDate: 1624559827
        value: 123456789.ABCDEFHIJ.A1B2C3D4
    properties:
      token:
        description: The user access token
        properties:
          expirationDate:
            description: 'The date that the token expires, in seconds since epoch'
            type: number
          value:
            description: The token
            type: string
        type: object
    required:
      - token
    type: object
  VideoPreviewUrl:
    description: Video preview information
    example:
      url: >-
        https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
    properties:
      url:
        description: Direct URL to the image
        type: string
    required:
      - url
    type: object
  VideoSearchResults:
    description: Video search results
    example:
      data:
        - aspect: 1.778
          aspect_ratio: 969
          assets:
            preview_jpg:
              url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
            preview_mp4:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
            preview_webm:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
            thumb_jpg:
              url: 'https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg'
            thumb_mp4:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4
            thumb_webm:
              url: >-
                https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm
          contributor:
            id: '4411978'
          description: >-
            Camera follows hipster millennial young woman in orange jacket
            running up on top of mountain summit at sunset, jumps on top of
            rocks, raises arms into air, happy and drunk on life, youth and
            happiness
          duration: 14.081
          has_model_release: true
          id: '1033184651'
          media_type: video
      page: 1
      per_page: 5
      search_id: 749090bb-2967-4a20-b22e-c800dc845e10
      total_count: 123
    properties:
      data:
        description: List of videos
        items:
          $ref: '#/definitions/Video'
        type: array
      message:
        description: 'Server-generated message, if any'
        type: string
      page:
        description: Current page that is returned
        type: integer
      per_page:
        description: Number of results per page
        type: integer
      search_id:
        description: Unique identifier for the search request
        type: string
      total_count:
        description: Total count of all results across all pages
        type: integer
    required:
      - data
      - total_count
      - search_id
    type: object
  VideoSizeDetails:
    description: Video asset information
    example:
      display_name: Original HD
      file_size: 110359552
      format: avc1
      fps: 29.97
      height: 1080
      is_licensable: true
      width: 1920
    properties:
      display_name:
        description: Display name of this video size
        type: string
      file_size:
        description: File size (in bytes) of this video size
        type: integer
      format:
        description: Format of this video size
        type: string
      fps:
        description: Frames per second of this video size
        type: number
      height:
        description: Height of this video size
        type: integer
      is_licensable:
        description: Whether or not videos can be licensed in this video size
        type: boolean
      width:
        description: Width of this video size
        type: integer
    type: object
host: api.shutterstock.com
info:
  contact:
    x-twitter: Shutterstock
  description: >-
    The Shutterstock API provides access to Shutterstock's library of media, as
    well as information about customers' accounts and the contributors that
    provide the media.
  title: Shutterstock API Explorer
  version: 1.1.5
  x-apisguru-categories:
    - media
  x-logo:
    url: 'https://twitter.com/Shutterstock/profile_image?size=original'
  x-origin:
    - format: openapi
      url: 'https://api-explorer.shutterstock.com/openapi.json'
      version: '3.0'
  x-providerName: shutterstock.com
paths:
  /v2/ai/audio/descriptors:
    get:
      description: >-
        This endpoint lists the descriptors that you can use in the audio
        regions in an audio render.
      operationId: listCustomDescriptors
      parameters:
        - description: >-
            Show descriptors with an average render speed that is greater than
            or equal to the specified value
          in: query
          name: render_speed_over
          type: number
          x-example: 5
        - description: Show descriptors that contain the specified band (case-sentsitive)
          in: query
          name: band_id
          type: string
          x-example: Corporate Folk Bonfire Band 1
        - description: Show descriptors with the specified band name (case-sensitive)
          in: query
          name: band_name
          type: string
          x-example: Documentary Underscore Heartfelt Band 1
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
          x-example: '1'
        - default: 20
          description: Number of results per page
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          type: integer
          x-example: '1'
        - collectionFormat: multi
          description: Show descriptors with the specified IDs (case-sensitive)
          in: query
          items:
            type: string
          maxItems: 20
          name: id
          type: array
          x-example: documentary_underscore_heartfelt
        - description: Show descriptors with the specified instrument name (case-sensitive)
          in: query
          name: instrument_name
          type: string
          x-example: Precision Bass - Full
        - description: Show descriptors with the specified instrument ID (case-sensitive)
          in: query
          name: instrument_id
          type: string
          x-example: direct_fluorescent_synth_lead
        - description: >-
            Show descriptors whose tempo range includes the specified tempo in
            beats per minute
          in: query
          name: tempo
          type: number
          x-example: 90
        - description: >-
            Show descriptors with a tempo that is less than or equal to the
            specified number
          in: query
          name: tempo_to
          type: number
          x-example: 120
        - description: >-
            Show descriptors that have a tempo range that includes the specified
            tempo in beats per minute
          in: query
          name: tempo_from
          type: number
          x-example: 60
        - description: Show descriptors with the specified name (case-sensitive)
          in: query
          name: name
          type: string
          x-example: Corporate Pop Inspirational High Energy
        - description: >-
            Show descriptors with the specified tag, such as Cinematic or Roomy
            (case-sensitive)
          in: query
          name: tag
          type: string
          x-example: Cinematic
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DescriptorsListResult'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: List computer audio descriptors
      tags:
        - custom_music
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/ai/audio/descriptors \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const customMusicApi = new sstk.CustomMusicApi();

            const queryParams = {
              "tag": "Cinematic"
            };

            customMusicApi.listDescriptors(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/ai/audio/descriptors",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock ai-audio list-custom-descriptors --tag Cinematic
  /v2/ai/audio/instruments:
    get:
      description: >-
        This endpoint lists the instruments that you can include in computer
        audio. If you specify more than one search parameter, the API uses an
        AND condition.
      operationId: listCustomInstruments
      parameters:
        - collectionFormat: multi
          description: Show instruments with the specified ID
          in: query
          items:
            type: string
          name: id
          type: array
          x-example: wood_blocks
        - default: 20
          description: Number of results per page
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          type: integer
          x-example: 1
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
          x-example: '1'
        - description: Show instruments with the specified name (case-sensitive)
          in: query
          name: name
          type: string
          x-example: Precision Bass - Full
        - description: >-
            Show instruments with the specified tag, such as Percussion or
            Strings (case-sensitive)
          in: query
          name: tag
          type: string
          x-example: Percussion
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InstrumentsListResult'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List computer audio instruments
      tags:
        - custom_music
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/ai/audio/instruments \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const customMusicApi = new sstk.CustomMusicApi();

            const queryParams = {
              "tag": "Percussion"
            };

            customMusicApi.listCustomInstruments(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/ai/audio/instruments",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock ai-audio list-custom-instruments --tag Percussion
  /v2/ai/audio/renders:
    get:
      description: >-
        This endpoint shows the status of one or more audio renders, including
        download links for completed audio.
      operationId: fetchRenders
      parameters:
        - collectionFormat: multi
          description: One or more render IDs
          in: query
          items:
            type: string
          name: id
          required: true
          type: array
          x-example:
            - L2w7h9VNFlkzpllSUunSYayenKjN
            - BeHx3UNXzMBB4dGsC9aa6VxnpcWl
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AudioRendersListResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about audio renders
      tags:
        - custom_music
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/ai/audio/renders \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "id=L2w7h9VNFlkzpllSUunSYayenKjN" \
            --data-urlencode "id=BeHx3UNXzMBB4dGsC9aa6VxnpcWl" 
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const customMusicApi = new sstk.CustomMusicApi();

            const renders = [
              "L2w7h9VNFlkzpllSUunSYayenKjN",
              "BeHx3UNXzMBB4dGsC9aa6VxnpcWl"
            ];

            customMusicApi.fetchRenders(renders)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/ai/audio/renders?id=L2w7h9VNFlkzpllSUunSYayenKjN&id=BeHx3UNXzMBB4dGsC9aa6VxnpcWl",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock ai-audio fetch-renders --id
            L2w7h9VNFlkzpllSUunSYayenKjN --id BeHx3UNXzMBB4dGsC9aa6VxnpcWl
    post:
      consumes:
        - application/json
      description: >-
        This endpoint creates rendered audio from timeline data. It returns a
        render ID that you can use to download the finished audio when it is
        ready. The render ID is valid for up to 48 hours.
      operationId: createAudioRenders
      parameters:
        - description: >-
            Parameters for the audio, including the timeline and information
            about the output file
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateAudioRendersRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AudioRendersListResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Create rendered audio
      tags:
        - custom_music
      x-code-samples:
        - lang: shell
          source: |
            DATA='{
              "audio_renders": [
                {
                  "preset": "MASTER_MP3",
                  "filename": "My_audio_ai.mp3",
                  "timeline": {
                    "spans": [
                      {
                        "id": 111,
                        "span_type": "metered",
                        "time": 0,
                        "tempo": 80,
                        "regions": [
                          {
                            "id": 222,
                            "descriptor": "documentary_underscore_heartfelt",
                            "beat": 0,
                            "end_type": {
                              "beat": 17,
                              "event": "ending",
                              "type": "ringout"
                            },
                            "region": "music"
                          }
                        ],
                        "instrument_groups": [
                          {
                            "instrument_group": "full_aw_nylon_acoustic_lead_guitar",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_viola_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "warm_devonshire_upright_acoustic_piano",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_first_violin_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_second_violin_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "warm_kawai_grand_acoustic_piano_dreamy",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "sweet_kawai_grand_acoustic_piano",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_cello_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "span_type": "unmetered",
                        "time": 15
                      }
                    ]
                  }
                }
              ]
            }'

            curl -X POST "https://api.shutterstock.com/v2/ai/audio/renders" \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const customMusicApi = new sstk.CustomMusicApi();

            const body = {
              "audio_renders": [
                {
                  "preset": "MASTER_MP3",
                  "filename": "My_audio_ai.mp3",
                  "timeline": {
                    "spans": [
                      {
                        "id": 111,
                        "span_type": "metered",
                        "time": 0,
                        "tempo": 80,
                        "regions": [
                          {
                            "id": 222,
                            "descriptor": "documentary_underscore_heartfelt",
                            "beat": 0,
                            "end_type": {
                              "beat": 17,
                              "event": "ending",
                              "type": "ringout"
                            },
                            "region": "music"
                          }
                        ],
                        "instrument_groups": [
                          {
                            "instrument_group": "full_aw_nylon_acoustic_lead_guitar",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_viola_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "warm_devonshire_upright_acoustic_piano",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_first_violin_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_second_violin_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "warm_kawai_grand_acoustic_piano_dreamy",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "sweet_kawai_grand_acoustic_piano",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_cello_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "span_type": "unmetered",
                        "time": 15
                      }
                    ]
                  }
                }
              ]
            };

            customMusicApi.createAudioRenders(body)
              .then(async (data) => {
                const { id } = data.audio_renders[0];
                console.log(id);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "audio_renders" => [
                [
                  "preset" => "MASTER_MP3",
                  "filename" => "My_audio_ai.mp3",
                  "timeline" => [
                    "spans" => [
                      [
                        "id" => 111,
                        "span_type" => "metered",
                        "time" => 0,
                        "tempo" => 80,
                        "regions" => [
                          [
                            "id" => 222,
                            "descriptor" => "documentary_underscore_heartfelt",
                            "beat" => 0,
                            "end_type" => [
                              "beat" => 17,
                              "event" => "ending",
                              "type" => "ringout"
                            ],
                            "region" => "music"
                          ]
                        ],
                        "instrument_groups" => [
                          [
                            "instrument_group" => "full_aw_nylon_acoustic_lead_guitar",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "nice_scoring_viola_ensemble",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "warm_devonshire_upright_acoustic_piano",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "nice_scoring_first_violin_ensemble",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "nice_scoring_second_violin_ensemble",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "warm_kawai_grand_acoustic_piano_dreamy",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "sweet_kawai_grand_acoustic_piano",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ],
                          [
                            "instrument_group" => "nice_scoring_cello_ensemble",
                            "statuses" => [
                              [
                                "beat" => 0,
                                "status" => "active"
                              ]
                            ]
                          ]
                        ]
                      ],
                      [
                        "span_type" => "unmetered",
                        "time" => 15
                      ]
                    ]
                  ]
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/ai/audio/renders",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "audio_renders": [
                {
                  "preset": "MASTER_MP3",
                  "filename": "My_audio_ai.mp3",
                  "timeline": {
                    "spans": [
                      {
                        "id": 111,
                        "span_type": "metered",
                        "time": 0,
                        "tempo": 80,
                        "regions": [
                          {
                            "id": 222,
                            "descriptor": "documentary_underscore_heartfelt",
                            "beat": 0,
                            "end_type": {
                              "beat": 17,
                              "event": "ending",
                              "type": "ringout"
                            },
                            "region": "music"
                          }
                        ],
                        "instrument_groups": [
                          {
                            "instrument_group": "full_aw_nylon_acoustic_lead_guitar",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_viola_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "warm_devonshire_upright_acoustic_piano",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_first_violin_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_second_violin_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "warm_kawai_grand_acoustic_piano_dreamy",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "sweet_kawai_grand_acoustic_piano",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          },
                          {
                            "instrument_group": "nice_scoring_cello_ensemble",
                            "statuses": [
                              {
                                "beat": 0,
                                "status": "active"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "span_type": "unmetered",
                        "time": 15
                      }
                    ]
                  }
                }
              ]
            }' > data.json


            shutterstock ai-audio create-audio-renders data.json
  /v2/audio:
    get:
      description: >-
        This endpoint lists information about one or more audio tracks,
        including the description and publication date.
      operationId: getTrackList
      parameters:
        - collectionFormat: multi
          description: One or more audio IDs
          in: query
          items:
            type: string
          minItems: 1
          name: id
          required: true
          type: array
          x-example:
            - '442583'
            - '434750'
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
          x-example: full
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AudioDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio tracks
      tags:
        - audio
  /v2/audio/collections:
    get:
      description: >-
        This endpoint lists your collections of audio tracks and their basic
        attributes.
      operationId: getTrackCollectionList
      parameters:
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
          x-example: '1'
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
          x-example: '100'
        - collectionFormat: multi
          description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          in: query
          items:
            enum:
              - share_code
              - share_url
            type: string
          name: embed
          type: array
          x-example: share_code
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: List audio collections
      tags:
        - audio
    post:
      consumes:
        - application/json
      description: >-
        This endpoint creates one or more collections (soundboxes). To add
        tracks, use `POST /v2/audio/collections/{id}/items`.
      operationId: createTrackCollection
      parameters:
        - description: Collection metadata
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Successfully created audio collection
          schema:
            $ref: '#/definitions/CollectionCreateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Create audio collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "Best rock music"
            }'

            curl -X POST https://api.shutterstock.com/v2/audio/collections \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const body = {
              "name": "Best rock music"
            };

            audioApi.createTrackCollection(body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "Best rock music"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "name": "Best rock music"
            }' > data.json


            shutterstock images create-image-collection data.json
  '/v2/audio/collections/{id}':
    delete:
      description: This endpoint deletes a collection.
      operationId: deleteTrackCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '48433111'
      responses:
        '204':
          description: Successfully deleted collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Delete audio collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: >-
            curl -X DELETE
            https://api.shutterstock.com/v2/audio/collections/48433111 \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433107";

            audioApi.deleteTrackCollection(collectionId)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433111",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock audio delete-track-collection 48433111
    get:
      description: >-
        This endpoint gets more detailed information about a collection,
        including the number of items in it and when it was last updated. To get
        the tracks in collections, use `GET /v2/audio/collections/{id}/items`.
      operationId: getTrackCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '48433107'
        - collectionFormat: multi
          description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          in: query
          items:
            enum:
              - share_code
              - share_url
            type: string
          name: embed
          type: array
        - description: Code to retrieve a shared collection
          in: query
          name: share_code
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Collection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the details of audio collections
      tags:
        - audio
    post:
      consumes:
        - application/json
      description: This endpoint sets a new name for a collection.
      operationId: renameTrackCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '48433107'
        - description: Collection changes
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionUpdateRequest'
      responses:
        '204':
          description: Successfully updated collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Rename audio collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "name": "Best rock music"
            }'


            curl -X POST
            https://api.shutterstock.com/v2/audio/collections/48433107 \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433107";

            const body = {
              "name": "Best rock music"
            };

            audioApi.renameTrackCollection(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "Best rock music"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433107",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "name": "Best rock music"
            }' > data.json


            shutterstock audio rename-collection 48433107 data.json
  '/v2/audio/collections/{id}/items':
    delete:
      description: This endpoint removes one or more tracks from a collection.
      operationId: deleteTrackCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '48433119'
        - collectionFormat: multi
          description: One or more item IDs to remove from the collection
          in: query
          items:
            type: string
          name: item_id
          type: array
          x-example:
            - '76688182'
            - '40005859'
      responses:
        '204':
          description: Successfully removed collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Remove audio tracks from collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: >-
            curl -X DELETE
            https://api.shutterstock.com/v2/audio/collections/48433119/items?item_id=36345523
            \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433119";

            // Array of tracks to remove
            const tracksToRemove = {
              "item_id": [
                "76688182",
                "40005859"
              ]
            };

            audioApi.deleteTrackCollectionItems(collectionId, tracksToRemove)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433119/items?item_id=495863218",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock audio delete-track-collection-items 48433119 --item-id
            36345523
    get:
      description: >-
        This endpoint lists the IDs of tracks in a collection and the date that
        each was added.
      operationId: getTrackCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '126351027'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
        - description: Code to retrieve the contents of a shared collection
          in: query
          name: share_code
          type: string
        - default: oldest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionItemDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the contents of audio collections
      tags:
        - audio
    post:
      consumes:
        - application/json
      description: This endpoint adds one or more tracks to a collection by track IDs.
      operationId: addTrackCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '48433115'
        - description: List of items to add to collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionItemRequest'
      responses:
        '204':
          description: Successfully added collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Add audio tracks to collections
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "items": [
                {
                  "id": "442583"
                },
                {
                  "id": "7491192"
                }
              ]
            }'


            curl -X POST
            https://api.shutterstock.com/v2/audio/collections/48433115/items \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const collectionId = "48433115";

            const body = {
              "items": [
                {
                  "id": "442583"
                },
                {
                  "id": "7491192"
                }
              ]
            };

            audioApi.addTrackCollectionItems(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "items" => [
                [
                  "id" => "442583"
                ],
                [
                  "id" => "7491192"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/collections/48433115/items",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "items": [
                {
                  "id": "442583"
                },
                {
                  "id": "7491192"
                }
              ]
            }' > data.json


            shutterstock audio add-collection-items 48433115 data.json
  /v2/audio/genres:
    get:
      description: This endpoint returns a list of all audio genres.
      operationId: listGenres
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreList'
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio genres
      tags:
        - audio
  /v2/audio/instruments:
    get:
      description: This endpoint returns a list of all audio instruments.
      operationId: listInstruments
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InstrumentList'
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio instruments
      tags:
        - audio
  /v2/audio/licenses:
    get:
      description: >-
        This endpoint lists existing licenses. You can filter the results
        according to the track ID to see if you have an existing license for a
        specific track.
      operationId: getTrackLicenseList
      parameters:
        - description: Show licenses for the specified track ID
          in: query
          name: audio_id
          type: string
          x-example: '1'
        - description: >-
            Restrict results by license. Prepending a `-` sign will exclude
            results by license
          in: query
          name: license
          type: string
          x-example: '48433107'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 200
          minimum: 0
          name: per_page
          type: integer
        - default: newest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: Filter licenses by username of licensee
          in: query
          name: username
          type: string
          x-example: aUniqueUsername
        - description: Show licenses created on or after the specified date
          format: date-time
          in: query
          name: start_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: Show licenses created before the specified date
          format: date-time
          in: query
          name: end_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
          x-relationships:
            - in: query
              name: start_date
              relationship: '>'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadHistoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List audio licenses
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/audio/licenses \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
            -G \
            --data-urlencode "start_date=2016-10-03T01:25:13.521Z" \
            --data-urlencode "end_date=2016-10-04T13:25:13.521Z" \
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const queryParams = {
              "start_date": "2016-10-03T01:25:13.521Z",
              "end_date": "2016-10-04T13:25:13.521Z"
            };

            audioApi.getTrackLicenseList(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "start_date" => "2016-10-03T01:25:13.521Z",
              "end_date" => "2016-10-04T13:25:13.521Z"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/licenses" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock audio get-track-license-list --start-date
            "2016-10-03T01:25:13.521Z" --end-date "2016-10-04T13:25:13.521Z"
    post:
      consumes:
        - application/json
      description: This endpoint gets licenses for one or more tracks.
      operationId: licenseTrack
      parameters:
        - description: License type
          enum:
            - audio_platform
            - premier_music_basic
            - premier_music_extended
            - premier_music_pro
            - premier_music_comp
          in: query
          name: license
          type: string
          x-example: audio_platform
        - description: The ID of the search that led to licensing this track
          in: query
          name: search_id
          type: string
          x-example: p5S6QwRikdFJTHXwsoiqTg
        - description: Tracks to license
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LicenseAudioRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LicenseAudioResultDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
      summary: License audio tracks
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |
            DATA='{
              "audio": [
                {
                  "audio_id": "591623",
                  "license": "audio_platform",
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            }'

            curl -X POST https://api.shutterstock.com/v2/audio/licenses \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const body = {
              "audio": [
                {
                  "audio_id": "446348",
                  "license": "audio_platform",
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            };

            audioApi.licenseTrack(body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "audio" => [
                [
                  "audio_id" => "591623",
                  "license" => "audio_platform",
                  "metadata" => [
                  "customer_id" => "12345"
                  ]
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/licenses",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "audio": [
                {
                  "audio_id": "591623",
                  "license": "audio_platform",
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            }' > data.json


            shutterstock audio license-track data.json
  '/v2/audio/licenses/{id}/downloads':
    post:
      description: >-
        This endpoint redownloads tracks that you have already received a
        license for.
      operationId: downloadTracks
      parameters:
        - description: License ID
          in: path
          name: id
          required: true
          type: string
          x-example: e123
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Url'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: Download audio tracks
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: >
            curl -X POST
            https://api.shutterstock.com/v2/audio/licenses/e123/downloads \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const licenseId = "e123"; // license ID, not track ID

            audioApi.downloadTracks(licenseId)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/licenses/e123/downloads",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock audio download-tracks e123
  /v2/audio/moods:
    get:
      description: This endpoint returns a list of all audio moods.
      operationId: listMoods
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MoodList'
      security:
        - basic: []
        - customer_accessCode: []
      summary: List audio moods
      tags:
        - audio
  /v2/audio/search:
    get:
      description: >-
        This endpoint searches for tracks. If you specify more than one search
        parameter, the API uses an AND condition. Array parameters can be
        specified multiple times; in this case, the API uses an AND or an OR
        condition with those values, depending on the parameter.
      operationId: searchTracks
      parameters:
        - collectionFormat: multi
          description: Show tracks with one of the specified artist names or IDs
          in: query
          items:
            type: string
          name: artists
          type: array
          uniqueItems: false
        - deprecated: true
          description: >-
            (Deprecated; use bpm_from and bpm_to instead) Show tracks with the
            specified beats per minute
          in: query
          name: bpm
          type: integer
          uniqueItems: true
        - description: Show tracks with the specified beats per minute or faster
          in: query
          name: bpm_from
          type: integer
          uniqueItems: true
          x-example: 80
        - description: Show tracks with the specified beats per minute or slower
          in: query
          name: bpm_to
          type: integer
          uniqueItems: true
          x-example: 120
        - description: Show tracks with the specified duration in seconds
          in: query
          name: duration
          type: integer
          uniqueItems: true
          x-example: 180
        - description: Show tracks with the specified duration or longer in seconds
          in: query
          name: duration_from
          type: integer
          uniqueItems: true
          x-example: 30
        - description: Show tracks with the specified duration or shorter in seconds
          in: query
          name: duration_to
          type: integer
          uniqueItems: true
          x-example: 180
        - collectionFormat: multi
          description: >-
            Show tracks with each of the specified genres; to get the list of
            genres, use `GET /v2/audio/genres`
          in: query
          items:
            type: string
          name: genre
          type: array
          uniqueItems: false
          x-example:
            - Classical
            - Holiday
        - description: Show instrumental music only
          in: query
          name: is_instrumental
          type: boolean
          uniqueItems: true
          x-example: true
        - collectionFormat: multi
          description: >-
            Show tracks with each of the specified instruments; to get the list
            of instruments, use `GET /v2/audio/instruments`
          in: query
          items:
            type: string
          name: instruments
          type: array
          uniqueItems: false
          x-example:
            - Trumpet
            - Percussion
        - collectionFormat: multi
          description: >-
            Show tracks with each of the specified moods; to get the list of
            moods, use `GET /v2/audio/moods`
          in: query
          items:
            type: string
          name: moods
          type: array
          uniqueItems: false
          x-example:
            - Confident
            - Playful
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
          uniqueItems: true
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 0
          name: per_page
          type: integer
          uniqueItems: true
          x-example: 1
        - description: One or more search terms separated by spaces
          in: query
          name: query
          type: string
          uniqueItems: true
          x-example: drum
        - description: Sort by
          enum:
            - score
            - ranking_all
            - artist
            - title
            - bpm
            - freshness
            - duration
          in: query
          name: sort
          type: string
          uniqueItems: true
          x-example: score
        - default: desc
          description: Sort order
          enum:
            - asc
            - desc
          in: query
          name: sort_order
          type: string
          uniqueItems: true
        - description: 'Show tracks with the specified vocal description (male, female)'
          in: query
          name: vocal_description
          type: string
          uniqueItems: true
          x-example: female
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
          uniqueItems: true
          x-example: full
        - description: >-
            Fields to display in the response; see the documentation for the
            fields parameter in the overview section
          in: query
          name: fields
          type: string
          uniqueItems: true
        - default: premier
          description: Which library to search
          enum:
            - shutterstock
            - premier
          in: query
          name: library
          type: string
          uniqueItems: true
        - description: Which language to search in
          in: query
          name: language
          type: string
          uniqueItems: true
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AudioSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search for tracks
      tags:
        - audio
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET "https://api.shutterstock.com/v2/audio/search" \
            --header "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "query=bluegrass" \
            --data-urlencode "duration_from=60" \
            --data-urlencode "moods=uplifting"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const audioApi = new sstk.AudioApi();

            const queryParams = {
              "query": "bluegrass",
              "duration_from": 60,
              "moods": ["uplifting"]
            };

            audioApi.searchTracks(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "bluegrass",
              "duration_from" => 60,
              "moods" => "uplifting"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/audio/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock audio search-tracks --query bluegrass --duration-from
            60 --moods uplifting
  '/v2/audio/{id}':
    get:
      description: >-
        This endpoint shows information about a track, including its genres,
        instruments, and other attributes.
      operationId: getTrack
      parameters:
        - description: Audio track ID
          in: path
          name: id
          required: true
          type: integer
          x-example: '442583'
        - default: full
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
          x-example: full
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Audio'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about audio tracks
      tags:
        - audio
  /v2/contributors:
    get:
      description: >-
        This endpoint lists information about one or more contributors,
        including contributor type, equipment they use and other attributes.
      operationId: getContributorList
      parameters:
        - collectionFormat: multi
          description: One or more contributor IDs
          in: query
          items:
            type: string
          name: id
          required: true
          type: array
          x-example:
            - 800506
            - 1653538
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ContributorProfileDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
        - basic: []
      summary: Get details about multiple contributors
      tags:
        - contributors
  '/v2/contributors/{contributor_id}':
    get:
      description: >-
        This endpoint shows information about a single contributor, including
        contributor type, equipment they use, and other attributes.
      operationId: getContributor
      parameters:
        - description: Contributor ID
          in: path
          name: contributor_id
          required: true
          type: string
          x-example: 1653538
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ContributorProfile'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
        - basic: []
      summary: Get details about a single contributor
      tags:
        - contributors
  '/v2/contributors/{contributor_id}/collections':
    get:
      description: This endpoint lists collections based on contributor ID.
      operationId: getContributorCollectionsList
      parameters:
        - description: Contributor ID
          in: path
          name: contributor_id
          required: true
          type: string
          x-example: 800506
        - description: Sort order
          enum:
            - newest
            - last_updated
            - item_count
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Contributor not found
      security:
        - customer_accessCode: []
        - basic: []
      summary: List contributors' collections
      tags:
        - contributors
  '/v2/contributors/{contributor_id}/collections/{id}':
    get:
      description: >-
        This endpoint gets more detailed information about a contributor's
        collection, including its cover image, timestamps for its creation, and
        most recent update. To get the items in collections, use GET
        /v2/contributors/{contributor_id}/collections/{id}/items.
      operationId: getContributorCollections
      parameters:
        - description: Contributor ID
          in: path
          name: contributor_id
          required: true
          type: string
          x-example: 800506
        - description: Collection ID that belongs to the contributor
          in: path
          name: id
          required: true
          type: string
          x-example: 1991678
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Collection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Set not found
      security:
        - customer_accessCode: []
        - basic: []
      summary: Get details about contributors' collections
      tags:
        - contributors
  '/v2/contributors/{contributor_id}/collections/{id}/items':
    get:
      description: >-
        This endpoint lists the IDs of items in a contributor's collection and
        the date that each was added.
      operationId: getContributorCollectionItems
      parameters:
        - description: Contributor ID
          in: path
          name: contributor_id
          required: true
          type: string
          x-example: 800506
        - description: Collection ID that belongs to the contributor
          in: path
          name: id
          required: true
          type: string
          x-example: 1991678
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 50
          minimum: 1
          name: per_page
          type: integer
        - description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionItemDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Set not found
      security:
        - customer_accessCode: []
        - basic: []
      summary: Get the items in contributors' collections
      tags:
        - contributors
  /v2/cv/images:
    post:
      consumes:
        - application/json
      description: >-
        This endpoint uploads an image for reverse image or video search. Images
        must be in JPEG or PNG format. To get the search results, pass the
        upload ID that this endpoint returns to the GET /v2/cv/similar/images or
        GET /v2/cv/similar/videos endpoints. Contact us for access to this
        endpoint.
      operationId: uploadImage
      parameters:
        - description: >-
            A Base 64 encoded jpeg or png; images can be no larger than 10mb and
            can be no larger than 10,000 pixels in width or height
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ImageCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ComputerVisionImageCreateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '413':
          description: Payload Too Large
        '415':
          description: Unsupported Media Type
      security:
        - basic: []
        - customer_accessCode: []
      summary: Upload images
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: |
            curl -X POST 'https://api.shutterstock.com/v2/cv/images' \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -H 'Content-Type: application/json' \
            -d "{\"base64_image\":\"`base64 myImage.jpg | tr -d '\n'`\"}"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const computerVisionApi = new sstk.ComputerVisionApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            computerVisionApi.uploadImage(body)
              .then((data) => {
                console.log(data.upload_id);
              });
        - lang: php
          source: |
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $uploadBody = [
              "base64_image" => $encodedImageData
            ];
            $uploadEncodedBody = json_encode($uploadBody);

            $uploadOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $uploadEncodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $uploadOptions);
            $uploadResponse = curl_exec($handle);
            curl_close($handle);

            $uploadDecodedResponse = json_decode($uploadResponse);
            print_r($uploadDecodedResponse->upload_id);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo "{\"base64_image\":\"`base64 myImage.jpg  | tr -d '\n'`\"}" >
            data.json


            shutterstock cv upload-image data.json
  /v2/cv/keywords:
    get:
      description: >-
        This endpoint returns a list of suggested keywords for a media item that
        you specify or upload.
      operationId: getKeywords
      parameters:
        - description: The asset ID or upload ID to suggest keywords for
          in: query
          name: asset_id
          required: true
          x-example: U6ba16262e3bc2db470b8e3cfa8aaab25
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/KeywordDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '415':
          description: Unsupported Media Type
      security:
        - basic: []
        - customer_accessCode: []
      summary: List suggested keywords
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: >-
            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images'
            \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -H 'Content-Type: application/json' \

            -d "{\"base64_image\":\"`base64 myImage.jpg | tr -d '\n'`\"}")


            echo "The next step requires the jq program."


            UPLOAD_ID=$(jq -r .upload_id <<< $RESPONSE)


            curl -X GET https://api.shutterstock.com/v2/cv/keywords \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -G \

            --data-urlencode "asset_id=$UPLOAD_ID"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");
            const fs = require("fs");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const computerVisionApi = new sstk.ComputerVisionApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            computerVisionApi.uploadImage(body)
              .then((data) => {
                console.log(data.upload_id);
                return computerVisionApi.getKeywords(data.upload_id);
              })
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $uploadBody = [
              "base64_image" => $encodedImageData
            ];
            $uploadEncodedBody = json_encode($uploadBody);

            $uploadOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $uploadEncodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $uploadOptions);
            $uploadResponse = curl_exec($handle);
            curl_close($handle);

            $uploadDecodedResponse = json_decode($uploadResponse);
            print_r($uploadDecodedResponse->upload_id);

            $keywordsQuery = [
              "asset_id" => $uploadDecodedResponse->upload_id,
            ];

            $keywordsOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/keywords?" . http_build_query($keywordsQuery),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $keywordsOptions);
            $keywordsResponse = curl_exec($handle);
            curl_close($handle);

            print_r($keywordsResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo "{\"base64_image\":\"`base64 myImage.jpg  | tr -d '\n'`\"}" >
            data.json


            shutterstock cv upload-image data.json > response.json


            echo "The next step requires the jq program."


            UPLOAD_ID=$(jq -r .upload_id response.json)


            shutterstock cv get-keywords --asset-id $UPLOAD_ID
  /v2/cv/similar/images:
    get:
      description: >-
        This endpoint returns images that are visually similar to an image that
        you specify or upload.
      parameters:
        - description: The asset ID or upload ID to find similar images for
          in: query
          name: asset_id
          required: true
          type: string
          x-example: U6ba16262e3bc2db470b8e3cfa8aaab25
        - collectionFormat: multi
          default: commercial
          description: Show only images with the specified license
          in: query
          items:
            enum:
              - commercial
              - editorial
            type: string
          name: license
          type: array
        - default: true
          description: Enable or disable safe search
          in: query
          name: safe
          type: boolean
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 1
          name: per_page
          type: integer
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImageSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar images
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: >
            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images'
            \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -H 'Content-Type: application/json' \

            -d "{\"base64_image\":\"`base64 myImage.jpg | tr -d '\n'`\"}")


            echo "The next step requires the jq program."


            UPLOAD_ID=$(jq -r .upload_id <<< $RESPONSE)


            curl -X GET https://api.shutterstock.com/v2/cv/similar/images \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -G \

            --data-urlencode "asset_id=$UPLOAD_ID"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const computerVisionApi = new sstk.ComputerVisionApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            computerVisionApi.uploadImage(body)
              .then((data) => {
                console.log(data.upload_id);
                return computerVisionApi.getSimilarImages(data.upload_id);
              })
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $uploadBody = [
              "base64_image" => $encodedImageData
            ];
            $uploadEncodedBody = json_encode($uploadBody);

            $uploadOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $uploadEncodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $uploadOptions);
            $uploadResponse = curl_exec($handle);
            curl_close($handle);

            $uploadDecodedResponse = json_decode($uploadResponse);
            print_r($uploadDecodedResponse->upload_id);

            $similarQuery = [
              "asset_type" => "images",
              "asset_id" => $uploadDecodedResponse->upload_id,
            ];

            $similarOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/similar/images?" . http_build_query($similarQuery),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $similarOptions);
            $similarResponse = curl_exec($handle);
            curl_close($handle);

            print_r($similarResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo "{\"base64_image\":\"`base64 myImage.jpg  | tr -d '\n'`\"}" >
            data.json


            shutterstock cv upload-image data.json > response.json


            echo "The next step requires the jq program."


            UPLOAD_ID=$(jq -r .upload_id response.json)


            shutterstock cv get-similar-images --asset-id $UPLOAD_ID
  /v2/cv/similar/videos:
    get:
      description: >-
        This endpoint returns videos that are visually similar to an image that
        you specify or upload.
      parameters:
        - description: The asset ID or upload ID to find similar videos for
          in: query
          name: asset_id
          required: true
          type: string
          x-example: U6ba16262e3bc2db470b8e3cfa8aaab25
        - collectionFormat: multi
          default: commercial
          description: Show only videos with the specified license
          in: query
          items:
            enum:
              - commercial
              - editorial
            type: string
          name: license
          type: array
        - default: true
          description: Enable or disable safe search
          in: query
          name: safe
          type: boolean
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 1
          name: per_page
          type: integer
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar videos
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: >
            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images'
            \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -H 'Content-Type: application/json' \

            -d "{\"base64_image\":\"`base64 myImage.jpg | tr -d '\n'`\"}")


            echo "The next step requires the jq program."


            UPLOAD_ID=$(jq -r .upload_id <<< $RESPONSE)


            curl -X GET https://api.shutterstock.com/v2/cv/similar/videos \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -G \

            --data-urlencode "asset_id=$UPLOAD_ID"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const computerVisionApi = new sstk.ComputerVisionApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            computerVisionApi.uploadImage(body)
              .then((data) => {
                console.log(data.upload_id);
                return computerVisionApi.getSimilarVideos(data.upload_id);
              })
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $uploadBody = [
              "base64_image" => $encodedImageData
            ];
            $uploadEncodedBody = json_encode($uploadBody);

            $uploadOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $uploadEncodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $uploadOptions);
            $uploadResponse = curl_exec($handle);
            curl_close($handle);

            $uploadDecodedResponse = json_decode($uploadResponse);
            print_r($uploadDecodedResponse->upload_id);

            $similarQuery = [
              "asset_type" => "images",
              "asset_id" => $uploadDecodedResponse->upload_id,
            ];

            $similarOptions = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/cv/similar/videos?" . http_build_query($similarQuery),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $similarOptions);
            $similarResponse = curl_exec($handle);
            curl_close($handle);

            print_r($similarResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo "{\"base64_image\":\"`base64 myImage.jpg  | tr -d '\n'`\"}" >
            data.json


            shutterstock cv upload-image data.json > response.json


            echo "The next step requires the jq program."


            UPLOAD_ID=$(jq -r .upload_id response.json)


            shutterstock cv get-similar-videos --asset-id $UPLOAD_ID
  /v2/editor/auth:
    post:
      consumes:
        - application/json
      operationId: authVideoEditor
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/VideoEditorTokenRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoEditorTokenResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Get video editor access tokens
      tags:
        - video_editor
  /v2/editor/customers:
    patch:
      consumes:
        - application/json
      operationId: updateEditorInstance
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UpdateVideoEditorRequest'
      responses:
        '204':
          description: Modified
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Update instances of the video editor
      tags:
        - video_editor
    post:
      consumes:
        - application/json
      operationId: registerEditorInstance
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RegisterVideoEditorRequest'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Register instances of the video editor
      tags:
        - video_editor
  /v2/editorial/categories:
    get:
      deprecated: true
      description: >-
        Deprecated; use `GET /v2/editorial/images/categories` instead. This
        endpoint lists the categories that editorial images can belong to, which
        are separate from the categories that other types of assets can belong
        to.
      operationId: getEditorialCategories
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialCategoryResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) List editorial categories
      tags:
        - editorial_images
  /v2/editorial/images/categories:
    get:
      description: >-
        This endpoint lists the categories that editorial images can belong to,
        which are separate from the categories that other types of assets can
        belong to.
      operationId: listEditorialImageCategories
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialImageCategoryResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List editorial categories
      tags:
        - editorial_images
  /v2/editorial/images/licenses:
    get:
      description: This endpoint lists existing editorial image licenses.
      operationId: getEditorialImageLicenseList
      parameters:
        - description: Show licenses for the specified editorial image ID
          in: query
          name: image_id
          type: string
          x-example: '12345678'
        - description: >-
            Show editorial images that are available with the specified license
            name
          in: query
          name: license
          type: string
          x-example: premier_editorial_all_digital
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 200
          minimum: 0
          name: per_page
          type: integer
        - default: newest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: Filter licenses by username of licensee
          in: query
          name: username
          type: string
          x-example: aUniqueUsername
        - description: Show licenses created on or after the specified date
          format: date-time
          in: query
          name: start_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: Show licenses created before the specified date
          format: date-time
          in: query
          name: end_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadHistoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List editorial image licenses
      tags:
        - editorial_images
    post:
      consumes:
        - application/json
      description: >-
        This endpoint gets licenses for one or more editorial images. You must
        specify the country and one or more editorial images to license.
      operationId: licenseEditorialImages
      parameters:
        - description: License editorial content
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LicenseEditorialContentRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LicenseEditorialContentResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - customer_accessCode:
            - licenses.create
            - purchases.view
      summary: License editorial content
      tags:
        - editorial_images
      x-code-samples:
        - lang: shell
          source: >
            DATA='{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            }'


            curl -X POST
            https://api.shutterstock.com/v2/editorial/images/licenses \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const body = {
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            };

            editorialApi.licenseEditorialImage(body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "editorial" => [
                [
                  "editorial_id" => "8594090h",
                  "license" => "premier_editorial_comp"
                ]
              ],
              "country" => "USA"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/images/licenses",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            }' > data.json


            shutterstock editorial license-editorial-images data.json
  /v2/editorial/images/livefeeds:
    get:
      operationId: getEditorialImageLivefeedList
      parameters:
        - description: >-
            Returns only livefeeds that are available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 50
          minimum: 1
          name: per_page
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialImageLivefeedList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial livefeed list
      tags:
        - editorial_images
  '/v2/editorial/images/livefeeds/{id}':
    get:
      operationId: getEditorialImageLivefeed
      parameters:
        - description: Editorial livefeed ID; must be an URI encoded string
          in: path
          name: id
          required: true
          type: string
          x-example: >-
            2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London
        - description: >-
            Returns only if the livefeed is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialImageLivefeed'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial livefeed
      tags:
        - editorial_images
  '/v2/editorial/images/livefeeds/{id}/items':
    get:
      operationId: getEditorialImageLivefeedItems
      parameters:
        - description: Editorial livefeed ID; must be an URI encoded string
          in: path
          name: id
          required: true
          type: string
          x-example: >-
            2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London
        - description: >-
            Returns only if the livefeed items are available for distribution in
            a certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialImageContentDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial livefeed items
      tags:
        - editorial_images
  /v2/editorial/images/search:
    get:
      description: >-
        This endpoint searches for editorial images. If you specify more than
        one search parameter, the API uses an AND condition. Array parameters
        can be specified multiple times; in this case, the API uses an AND or an
        OR condition with those values, depending on the parameter. You can also
        filter search terms out in the `query` parameter by prefixing the term
        with NOT.
      operationId: searchEditorialImages
      parameters:
        - description: One or more search terms separated by spaces
          in: query
          name: query
          type: string
          x-example: The Academy Awards
        - default: relevant
          description: Sort by
          enum:
            - relevant
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: >-
            Show editorial content within a certain editorial category; specify
            by category name
          in: query
          name: category
          type: string
        - description: >-
            Show only editorial content that is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - collectionFormat: multi
          description: Show only editorial content from certain suppliers
          in: query
          items:
            type: string
          name: supplier_code
          type: array
        - description: Show only editorial content generated on or after a specific date
          format: date
          in: query
          name: date_start
          type: string
          x-example: '2020-05-29T00:00:00.000Z'
        - description: Show only editorial content generated on or before a specific date
          format: date
          in: query
          name: date_end
          type: string
          x-example: '2021-05-29T00:00:00.000Z'
        - default: 20
          description: Number of results per page
          in: query
          maximum: 50
          minimum: 1
          name: per_page
          type: integer
        - description: >-
            The cursor of the page with which to start fetching results; this
            cursor is returned from previous requests
          in: query
          name: cursor
          type: string
          x-example: eyJ2IjoxLCJzIjoxfQ==
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search editorial images
      tags:
        - editorial_images
      x-code-samples:
        - lang: shell
          source: >
            curl -X GET https://api.shutterstock.com/v2/editorial/images/search
            \

            -H "Accept: application/json" \

            -G \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            --data-urlencode "query=football" \

            --data-urlencode "country=USA" \

            --data-urlencode "sort=newest" \

            --data-urlencode "date_start=2018-10-23"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const queryParams = {
              "query": "football",
              "country": "USA",
              "sort": "newest",
              "date_start": "2018-10-23"
            };

            const country = "USA";

            editorialApi.editorialImagesSearch(country, queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "football",
              "country" => "USA",
              "date_start" => "2018-10-23",
              "sort" => "newest"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/images/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock editorial search-editorial-images --country USA --sort
            newest --query football --date-start 2018-10-23
  /v2/editorial/images/updated:
    get:
      description: >-
        This endpoint lists editorial images that have been updated in the
        specified time period to update content management systems (CMS) or
        digital asset management (DAM) systems. In most cases, use the
        date_updated_start and date_updated_end parameters to specify a range
        updates based on when the updates happened. You can also use the
        date_taken_start and date_taken_end parameters to specify a range of
        updates based on when the image was taken.
      operationId: getUpdatedEditorialImages
      parameters:
        - description: >-
            Specify `addition` to return only images that were added or `edit`
            to return only images that were edited or deleted
          enum:
            - edit
            - addition
          in: query
          name: type
          required: true
          type: string
          x-example: edit
        - description: >-
            Show images images added, edited, or deleted after the specified
            date. Acceptable range is 1970-01-01T00:00:01 to
            2038-01-19T00:00:00.
          format: date-time
          in: query
          name: date_updated_start
          required: true
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: >-
            Show images images added, edited, or deleted before the specified
            date. Acceptable range is 1970-01-01T00:00:01 to
            2038-01-19T00:00:00.
          format: date-time
          in: query
          name: date_updated_end
          required: true
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: >-
            Show images that were taken on or after the specified date; use this
            parameter if you want recently created images from the collection
            instead of updated older assets
          in: query
          name: date_taken_start
          pattern: '^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$'
          type: string
          x-example: '2020-02-04T00:00:00.000Z'
        - description: Show images that were taken before the specified date
          in: query
          name: date_taken_end
          pattern: '^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$'
          type: string
          x-example: '2020-02-05T00:00:00.000Z'
        - description: >-
            The cursor of the page with which to start fetching results; this
            cursor is returned from previous requests
          in: query
          name: cursor
          type: string
          x-example: eyJ2IjoxLCJzIjoyfQ==
        - default: newest
          description: Sort by
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
          x-example: newest
        - collectionFormat: multi
          description: Show only editorial content from certain suppliers
          in: query
          items:
            maxLength: 5
            type: string
          name: supplier_code
          type: array
          x-example: ABC
        - description: >-
            Show only editorial content that is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - default: 500
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 100
          name: per_page
          type: integer
          x-example: 200
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialUpdatedResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: List updated content
      tags:
        - editorial_images
      x-code-samples:
        - lang: shell
          source: >
            curl -X GET https://api.shutterstock.com/v2/editorial/images/updated
            \

            -H "Accept: application/json" \

            -G \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            --data-urlencode "type=edit" \

            --data-urlencode "country=USA" \

            --data-urlencode "date_updated_start=2020-02-02T13:00:00Z" \

            --data-urlencode "date_updated_end=2020-02-02T15:00:00Z"
        - lang: javascript--nodejs
          source: >
            const sstk = require("shutterstock-api");


            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);


            const editorialApi = new sstk.EditorialApi();


            const type = "edit";

            const dateUpdatedStart = "2020-02-02T13:00:00Z";

            const dateUpdatedEnd = "2020-02-02T15:00:00Z";

            const country = "USA";


            editorialApi.getUpdatedImages(type, dateUpdatedStart,
            dateUpdatedEnd, country)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "type" => "edit",
              "country" => "USA",
              "date_updated_start" => "2020-02-02T13:00:00Z",
              "date_updated_end" => "2020-02-02T15:00:00Z",
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/images/updated?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock editorial get-updated-editorial-images --type edit
            --country USA --date-updated-start 2020-02-02T13:00:00Z
            --date-updated-end 2020-02-02T15:00:00Z
  '/v2/editorial/images/{id}':
    get:
      description: >-
        This endpoint shows information about an editorial image, including a
        URL to a preview image and the sizes that it is available in.
      operationId: getEditorialImage
      parameters:
        - description: Editorial ID
          in: path
          name: id
          required: true
          type: string
          x-example: 9926131a
        - description: >-
            Returns only if the content is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialContent'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial content details
      tags:
        - editorial_images
  /v2/editorial/licenses:
    post:
      consumes:
        - application/json
      deprecated: true
      description: >-
        Deprecated; use `POST /v2/editorial/images/licenses` instead to get
        licenses for one or more editorial images. You must specify the country
        and one or more editorial images to license.
      operationId: licenseEditorialImage
      parameters:
        - description: License editorial content
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LicenseEditorialContentRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LicenseEditorialContentResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - customer_accessCode:
            - licenses.create
      summary: (Deprecated) License editorial content
      tags:
        - editorial_images
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            }'

            curl -X POST https://api.shutterstock.com/v2/editorial/licenses \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const body = {
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            };

            editorialApi.licenseEditorialImage(body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "editorial" => [
                [
                  "editorial_id" => "8594090h",
                  "license" => "premier_editorial_comp"
                ]
              ],
              "country" => "USA"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/licenses",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_comp"
                }
              ],
              "country": "USA"
            }' > data.json



            shutterstock editorial license-editorial-image data.json
  /v2/editorial/livefeeds:
    get:
      deprecated: true
      description: >-
        Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a
        list of editorial livefeeds.
      operationId: getEditorialLivefeedList
      parameters:
        - description: >-
            Returns only livefeeds that are available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 50
          minimum: 1
          name: per_page
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialLivefeedList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) Get editorial livefeed list
      tags:
        - editorial_images
  '/v2/editorial/livefeeds/{id}':
    get:
      deprecated: true
      description: >-
        Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get
        an editorial livefeed.
      operationId: getEditorialLivefeed
      parameters:
        - description: Editorial livefeed ID; must be an URI encoded string
          in: path
          name: id
          required: true
          type: string
          x-example: >-
            2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London
        - description: >-
            Returns only if the livefeed is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialLivefeed'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) Get editorial livefeed
      tags:
        - editorial_images
  '/v2/editorial/livefeeds/{id}/items':
    get:
      deprecated: true
      description: >-
        Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead
        to get editorial livefeed items.
      operationId: getEditorialLivefeedItems
      parameters:
        - description: Editorial livefeed ID; must be an URI encoded string
          in: path
          name: id
          required: true
          type: string
          x-example: >-
            2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London
        - description: >-
            Returns only if the livefeed items are available for distribution in
            a certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialContentDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) Get editorial livefeed items
      tags:
        - editorial_images
  /v2/editorial/search:
    get:
      deprecated: true
      description: >-
        Deprecated; use `GET /v2/editorial/images/search` instead to search for
        editorial images.
      operationId: searchEditorial
      parameters:
        - description: One or more search terms separated by spaces
          in: query
          name: query
          type: string
        - default: relevant
          description: Sort by
          enum:
            - relevant
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: >-
            Show editorial content within a certain editorial category; specify
            by category name
          in: query
          name: category
          type: string
        - description: >-
            Show only editorial content that is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - collectionFormat: multi
          description: Show only editorial content from certain suppliers
          in: query
          items:
            type: string
          name: supplier_code
          type: array
        - description: Show only editorial content generated on or after a specific date
          format: date
          in: query
          name: date_start
          type: string
        - description: Show only editorial content generated on or before a specific date
          format: date
          in: query
          name: date_end
          type: string
        - default: 20
          description: Number of results per page
          in: query
          maximum: 50
          minimum: 1
          name: per_page
          type: integer
        - description: >-
            The cursor of the page with which to start fetching results; this
            cursor is returned from previous requests
          in: query
          name: cursor
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) Search editorial content
      tags:
        - editorial_images
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/editorial/search \
            -H "Accept: application/json" \
            -G \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            --data-urlencode "query=football" \
            --data-urlencode "country=USA" \
            --data-urlencode "sort=newest" \
            --data-urlencode "date_start=2018-10-23"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const queryParams = {
              "query": "football",
              "country": "USA",
              "sort": "newest",
              "date_start": "2018-10-23"
            };

            const country = "USA";

            editorialApi.searchEditorial(country, queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "football",
              "country" => "USA",
              "date_start" => "2018-10-23",
              "sort" => "newest"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock editorial search-editorial --country USA --sort newest
            --query football --date-start 2018-10-23
  /v2/editorial/updated:
    get:
      deprecated: true
      description: >-
        Deprecated; use `GET /v2/editorial/images/updated` instead to get
        recently updated items.
      parameters:
        - description: >-
            Specify `addition` to return only images that were added or `edit`
            to return only images that were edited or deleted
          enum:
            - edit
            - addition
          in: query
          name: type
          required: true
          type: string
          x-example: edit
        - description: >-
            Show images images added, edited, or deleted after the specified
            date. Acceptable range is 1970-01-01T00:00:01 to
            2038-01-19T00:00:00.
          format: date-time
          in: query
          name: date_updated_start
          required: true
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: >-
            Show images images added, edited, or deleted before the specified
            date. Acceptable range is 1970-01-01T00:00:01 to
            2038-01-19T00:00:00.
          format: date-time
          in: query
          name: date_updated_end
          required: true
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: >-
            Show images that were taken on or after the specified date; use this
            parameter if you want recently created images from the collection
            instead of updated older assets
          in: query
          name: date_taken_start
          pattern: '^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$'
          type: string
          x-example: '2020-02-04T00:00:00.000Z'
        - description: Show images that were taken before the specified date
          in: query
          name: date_taken_end
          pattern: '^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$'
          type: string
          x-example: '2020-02-05T00:00:00.000Z'
        - description: >-
            The cursor of the page with which to start fetching results; this
            cursor is returned from previous requests
          in: query
          name: cursor
          type: string
          x-example: eyJ2IjoxLCJzIjoyfQ==
        - default: newest
          description: Sort by
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
          x-example: newest
        - collectionFormat: multi
          description: Show only editorial content from certain suppliers
          in: query
          items:
            maxLength: 5
            type: string
          name: supplier_code
          type: array
          x-example: ABC
        - description: >-
            Show only editorial content that is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - default: 500
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 100
          name: per_page
          type: integer
          x-example: 200
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialUpdatedResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) List updated content
      tags:
        - editorial_images
      x-code-samples:
        - lang: shell
          source: |-
            curl -X GET https://api.shutterstock.com/v2/editorial/updated \
            -H "Accept: application/json" \
            -G \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            --data-urlencode "type=edit" \
            --data-urlencode "country=USA" \
            --data-urlencode "date_updated_start=2020-02-02T13:00:00Z" \
            --data-urlencode "date_updated_end=2020-02-02T15:00:00Z"
        - lang: javascript--nodejs
          source: >
            const sstk = require("shutterstock-api");


            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);


            const editorialApi = new sstk.EditorialApi();


            const type = "edit";

            const dateUpdatedStart = "2020-02-02T13:00:00Z";

            const dateUpdatedEnd = "2020-02-02T15:00:00Z";

            const country = "USA";


            editorialApi.getUpdatedImages(type, dateUpdatedStart,
            dateUpdatedEnd, country)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "type" => "edit",
              "country" => "USA",
              "date_updated_start" => "2020-02-02T13:00:00Z",
              "date_updated_end" => "2020-02-02T15:00:00Z",
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/updated?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock editorial get-updated-images --type edit --country USA
            --date-updated-start 2020-02-02T13:00:00Z --date-updated-end
            2020-02-02T15:00:00Z
  /v2/editorial/videos/categories:
    get:
      description: >-
        This endpoint lists the categories that editorial videos can belong to,
        which are separate from the categories that other types of assets can
        belong to.
      operationId: listEditorialVideoCategories
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialVideoCategoryResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List editorial video categories
      tags:
        - editorial_video
  /v2/editorial/videos/licenses:
    get:
      description: This endpoint lists existing editorial video licenses.
      operationId: getEditorialVideoLicenseList
      parameters:
        - description: Show licenses for the specified editorial video ID
          in: query
          name: video_id
          type: string
          x-example: '12345678'
        - description: >-
            Show editorial videos that are available with the specified license
            name
          in: query
          name: license
          type: string
          x-example: premier_editorial_all_media
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 200
          minimum: 0
          name: per_page
          type: integer
        - default: newest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: Filter licenses by username of licensee
          in: query
          name: username
          type: string
          x-example: aUniqueUsername
        - description: Show licenses created on or after the specified date
          format: date-time
          in: query
          name: start_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: Show licenses created before the specified date
          format: date-time
          in: query
          name: end_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadHistoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List editorial video licenses
      tags:
        - editorial_video
    post:
      consumes:
        - application/json
      description: >-
        This endpoint gets licenses for one or more editorial videos. You must
        specify the country and one or more editorial videos to license.
      operationId: licenseEditorialVideo
      parameters:
        - description: License editorial video content
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LicenseEditorialVideoContentRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LicenseEditorialContentResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
            - purchases.view
      summary: License editorial video content
      tags:
        - editorial_video
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_video_comp"
                }
              ],
              "country": "USA"
            }'


            curl -X POST
            https://api.shutterstock.com/v2/editorial/videos/licenses \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialApi();

            const body = {
              "editorial": [
                {
                  "editorial_id": "10687492a",
                  "license": "premier_editorial_video_comp"
                }
              ],
              "country": "USA"
            };

            editorialApi.licenseEditorialVideo(body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "editorial" => [
                [
                  "editorial_id" => "10687492a",
                  "license" => "premier_editorial_video_comp"
                ]
              ],
              "country" => "USA"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/videos/licenses",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "editorial": [
                {
                  "editorial_id": "8594090h",
                  "license": "premier_editorial_video_comp"
                }
              ],
              "country": "USA"
            }' > data.json


            shutterstock editorial license-editorial-video data.json
  /v2/editorial/videos/search:
    get:
      description: >-
        This endpoint searches for editorial videos. If you specify more than
        one search parameter, the API uses an AND condition. Array parameters
        can be specified multiple times; in this case, the API uses an AND or an
        OR condition with those values, depending on the parameter. You can also
        filter search terms out in the `query` parameter by prefixing the term
        with NOT.
      operationId: searchEditorialVideos
      parameters:
        - description: One or more search terms separated by spaces
          in: query
          name: query
          type: string
          x-example: The Academy Awards
        - default: relevant
          description: Sort by
          enum:
            - relevant
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: >-
            Show editorial video content within a certain editorial category;
            specify by category name
          in: query
          name: category
          type: string
        - description: >-
            Show only editorial video content that is available for distribution
            in a certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
        - collectionFormat: multi
          description: Show only editorial video content from certain suppliers
          in: query
          items:
            type: string
          name: supplier_code
          type: array
        - description: >-
            Show only editorial video content generated on or after a specific
            date
          format: date
          in: query
          name: date_start
          type: string
          x-example: '2020-05-29T00:00:00.000Z'
        - description: >-
            Show only editorial video content generated on or before a specific
            date
          format: date
          in: query
          name: date_end
          type: string
          x-example: '2021-05-29T00:00:00.000Z'
        - description: Show only editorial video content with specific resolution
          enum:
            - 4k
            - high_definition
            - standard_definition
          in: query
          name: resolution
          type: string
          x-example: 4k
        - description: >-
            Show only editorial video content generated with specific frames per
            second
          in: query
          name: fps
          type: number
          x-example: 24
        - default: 20
          description: Number of results per page
          in: query
          maximum: 50
          minimum: 1
          name: per_page
          type: integer
        - description: >-
            The cursor of the page with which to start fetching results; this
            cursor is returned from previous requests
          in: query
          name: cursor
          type: string
          x-example: eyJ2IjoxLCJzIjoxfQ==
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialVideoSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search editorial video content
      tags:
        - editorial_video
      x-code-samples:
        - lang: shell
          source: >
            curl -X GET https://api.shutterstock.com/v2/editorial/videos/search
            \

            -H "Accept: application/json" \

            -G \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            --data-urlencode "query=football" \

            --data-urlencode "country=USA" \

            --data-urlencode "sort=newest" \

            --data-urlencode "date_start=2018-10-23"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const editorialApi = new sstk.EditorialVideoApi();

            const queryParams = {
              "query": "football",
              "country": "USA",
              "sort": "newest",
              "date_start": "2018-10-23"
            };

            const country = "USA";

            editorialApi.searchEditorialVideos(country, queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "football",
              "country" => "USA",
              "date_start" => "2018-10-23",
              "sort" => "newest"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/editorial/videos/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock editorial search-editorial-videos --country USA --sort
            newest --query football --date-start 2018-10-23
  '/v2/editorial/videos/{id}':
    get:
      description: >-
        This endpoint shows information about an editorial image, including a
        URL to a preview image and the sizes that it is available in.
      operationId: getEditorialVideo
      parameters:
        - description: Editorial ID
          in: path
          name: id
          required: true
          type: string
          x-example: 9926131a
        - description: >-
            Returns only if the content is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialVideoContent'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get editorial video content details
      tags:
        - editorial_video
  '/v2/editorial/{id}':
    get:
      deprecated: true
      description: >-
        Deprecated; use `GET /v2/editorial/images/{id}` instead to show
        information about an editorial image, including a URL to a preview image
        and the sizes that it is available in.
      parameters:
        - description: Editorial ID
          in: path
          name: id
          required: true
          type: string
          x-example: 9926131a
        - description: >-
            Returns only if the content is available for distribution in a
            certain country
          format: country-code-3
          in: query
          name: country
          required: true
          type: string
          x-example: USA
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EditorialContent'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - basic: []
        - customer_accessCode: []
      summary: (Deprecated) Get editorial content details
      tags:
        - editorial_images
  /v2/images:
    get:
      description: >-
        This endpoint lists information about one or more images, including the
        available sizes.
      operationId: getImageList
      parameters:
        - collectionFormat: multi
          description: One or more image IDs
          in: query
          items:
            type: string
          name: id
          required: true
          type: array
          x-example:
            - '1110335168'
            - '465011609'
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
          x-example: minimal
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImageDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List images
      tags:
        - images
    post:
      consumes:
        - application/json
      deprecated: true
      description: >-
        Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an
        image for reverse image search. The image must be in JPEG or PNG format.
        To get the search results, pass the ID that this endpoint returns to the
        `GET /v2/images/{id}/similar` endpoint.
      operationId: uploadEphemeralImage
      parameters:
        - description: The image data in JPEG or PNG format
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ImageCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ImageCreateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '413':
          description: Payload Too Large
      security:
        - basic: []
        - customer_accessCode: []
      summary: Upload ephemeral images
      tags:
        - computer_vision
      x-code-samples:
        - lang: shell
          source: |
            curl -X POST 'https://api.shutterstock.com/v2/images' \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -H 'Content-Type: application/json' \
            -d "{\"base64_image\":\"`base64 myImage.jpg | tr -d '\n'`\"}"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const imageFile = fs.readFileSync("./myImage.jpg");
            const base64File = Buffer.from(imageFile).toString("base64");

            const body = new sstk.ImageCreateRequest(base64File);

            const queryParams = {
              "page": 1,
              "per_page": 20,
              "view": "minimal"
            };

            imagesApi.uploadEphemeralImage(body)
              .then((data) => {
                console.log(data.id);
                return imagesApi.getSimilarImages(data.id, queryParams);
              })
              .then((similarImageData) => {
                console.log(similarImageData);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $imageData = file_get_contents("myImage.jpg");
            $encodedImageData = base64_encode($imageData);

            $body = [
              "base64_image" => $encodedImageData
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo "{\"base64_image\":\"`base64 myImage.jpg  | tr -d '\n'`\"}" >
            data.json


            shutterstock images upload-ephemeral-image data.json
  /v2/images/categories:
    get:
      description: >-
        This endpoint lists the categories (Shutterstock-assigned genres) that
        images can belong to.
      operationId: listImageCategories
      parameters:
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CategoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List image categories
      tags:
        - images
  /v2/images/collections:
    get:
      description: >-
        This endpoint lists your collections of images and their basic
        attributes.
      operationId: getImageCollectionList
      parameters:
        - collectionFormat: multi
          description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          in: query
          items:
            enum:
              - share_code
              - share_url
            type: string
          name: embed
          type: array
          x-example: share_code
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
          x-example: 1
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
          x-example: 2
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: List image collections
      tags:
        - images
    post:
      consumes:
        - application/json
      description: >-
        This endpoint creates one or more image collections (lightboxes). To add
        images to the collections, use `POST /v2/images/collections/{id}/items`.
      operationId: createImageCollection
      parameters:
        - description: The names of the new collections
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Successfully created image collection
          schema:
            $ref: '#/definitions/CollectionCreateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Create image collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "My collection"
            }'

            curl -X POST https://api.shutterstock.com/v2/images/collections \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const body = {
              "name": "My collection"
            };

            imagesApi.createImageCollection(body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "My collection"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "name": "My collection"
            }' > data.json


            shutterstock images create-image-collection data.json
  /v2/images/collections/featured:
    get:
      description: >-
        This endpoint lists featured collections of specific types and a name
        and cover image for each collection.
      operationId: getFeaturedImageCollectionList
      parameters:
        - description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          enum:
            - share_url
          in: query
          name: embed
          type: string
          x-example: share_url
        - collectionFormat: multi
          description: The types of collections to return
          in: query
          items:
            enum:
              - photo
              - editorial
              - vector
            type: string
          name: type
          type: array
          x-example: photo
        - default: 1x
          description: Cover image size
          enum:
            - 1x
            - 2x
          in: query
          name: asset_hint
          type: string
          x-example: 1x
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeaturedCollectionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List featured image collections
      tags:
        - images
  '/v2/images/collections/featured/{id}':
    get:
      description: >-
        This endpoint gets more detailed information about a featured
        collection, including its cover image and timestamps for its creation
        and most recent update. To get the images, use `GET
        /v2/images/collections/featured/{id}/items`.
      operationId: getFeaturedImageCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '136351027'
        - description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          enum:
            - share_url
          in: query
          name: embed
          type: string
        - default: 1x
          description: Cover image size
          enum:
            - 1x
            - 2x
          in: query
          name: asset_hint
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeaturedCollection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Featured collection not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get the details of featured image collections
      tags:
        - images
  '/v2/images/collections/featured/{id}/items':
    get:
      description: >-
        This endpoint lists the IDs of images in a featured collection and the
        date that each was added.
      operationId: getFeaturedImageCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '136351027'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionItemDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Featured collection not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get the contents of featured image collections
      tags:
        - images
  '/v2/images/collections/{id}':
    delete:
      description: This endpoint deletes an image collection.
      operationId: deleteImageCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '136351027'
      responses:
        '204':
          description: Successfully deleted collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Delete image collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >-
            curl -X DELETE
            https://api.shutterstock.com/v2/images/collections/136351027 \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "136351027"; // Collection ID

            imagesApi.deleteImageCollection(collectionId)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/136351027",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock images delete-image-collection 136351027
    get:
      description: >-
        This endpoint gets more detailed information about a collection,
        including its cover image and timestamps for its creation and most
        recent update. To get the images in collections, use `GET
        /v2/images/collections/{id}/items`.
      operationId: getImageCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '126351027'
        - collectionFormat: multi
          description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          in: query
          items:
            enum:
              - share_code
              - share_url
            type: string
          name: embed
          type: array
        - description: Code to retrieve a shared collection
          in: query
          name: share_code
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Collection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the details of image collections
      tags:
        - images
    post:
      consumes:
        - application/json
      description: This endpoint sets a new name for an image collection.
      operationId: renameImageCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '126351027'
        - description: The new name for the collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionUpdateRequest'
      responses:
        '204':
          description: Successfully updated collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Rename image collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "name": "My new collection name"
            }'


            curl -X POST
            https://api.shutterstock.com/v2/images/collections/126351027 \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "126351027"; // Collection ID

            const body = {
              "name": "My new collection name"
            };

            imagesApi.renameImageCollection(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "My new collection name"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/126351027",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "name": "My new collection name"
            }' > data.json


            shutterstock images rename-image-collection 48433107 data.json
  '/v2/images/collections/{id}/items':
    delete:
      description: This endpoint removes one or more images from a collection.
      operationId: deleteImageCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '126351027'
        - collectionFormat: multi
          description: One or more image IDs to remove from the collection
          in: query
          items:
            type: string
          name: item_id
          type: array
      responses:
        '204':
          description: Successfully removed collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Remove images from collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >-
            curl -X DELETE
            https://api.shutterstock.com/v2/images/collections/186726599/items?item_id=495863218
            \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "126351027"; // Collection ID

            // Array of images to remove
            const imagesToRemove = {
              "item_id": [
                "495863218"
              ]
            };

            imagesApi.deleteImageCollectionItems(collectionId, imagesToRemove)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/126351027/items?item_id=495863218",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock images delete-image-collection-items 186726599
            --item-id 495863218
    get:
      description: >-
        This endpoint lists the IDs of images in a collection and the date that
        each was added.
      operationId: getImageCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '126351027'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
        - description: Code to retrieve the contents of a shared collection
          in: query
          name: share_code
          type: string
        - default: oldest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionItemDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the contents of image collections
      tags:
        - images
    post:
      consumes:
        - application/json
      description: This endpoint adds one or more images to a collection by image IDs.
      operationId: addImageCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '126351027'
        - description: Array of image IDs to add to the collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionItemRequest'
      responses:
        '204':
          description: Successfully added collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Add images to collections
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "items": [
                {
                  "id": "49572945",
                  "media_type": "image"
                }
              ]
            }'


            curl -X POST
            https://api.shutterstock.com/v2/images/collections/126351027/items \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const collectionId = "126351027"; // Collection ID

            const body = {
              "items": [
                {
                  "id": "495863218",
                  "media_type": "image"
                }
              ]
            };

            imagesApi.addImageCollectionItems(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "items" => [
                [
                  "id" => "49572945",
                  "media_type" => "image"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/collections/126351027/items",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "items": [
                {
                  "id": "49572945",
                  "media_type": "image"
                }
              ]
            }' > data.json


            shutterstock images add-image-collection-items 126351027 data.json
  /v2/images/licenses:
    get:
      description: This endpoint lists existing licenses.
      operationId: getImageLicenseList
      parameters:
        - description: Show licenses for the specified image ID
          in: query
          name: image_id
          pattern: '^[1-9]\d*$'
          type: string
          x-example: '12345678'
        - description: >-
            Show images that are available with the specified license, such as
            `standard` or `enhanced`; prepending a `-` sign excludes results
            from that license
          in: query
          name: license
          pattern: ^.+$
          type: string
          x-example: standard
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 200
          minimum: 1
          name: per_page
          type: integer
        - default: newest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: Filter licenses by username of licensee
          in: query
          name: username
          type: string
          x-example: aUniqueUsername
        - description: Show licenses created on or after the specified date
          format: date-time
          in: query
          name: start_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: Show licenses created before the specified date
          format: date-time
          in: query
          name: end_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
          x-relationships:
            - in: query
              name: start_date
              relationship: '>'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadHistoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List image licenses
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/images/licenses \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
            -G \
            --data-urlencode "start_date=2016-10-03T01:25:13.521Z" \
            --data-urlencode "end_date=2016-10-04T13:25:13.521Z" \
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const queryParams = {
              "start_date": "2016-10-03T01:25:13.521Z",
              "end_date": "2016-10-04T13:25:13.521Z"
            };

            imagesApi.getImageLicenseList(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "start_date" => "2016-10-03T01:25:13.521Z",
              "end_date" => "2016-10-04T13:25:13.521Z"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/licenses" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock images get-image-license-list --start-date
            "2021-01-03T01:25:13.521Z" --end-date "2021-05-04T13:25:13.521Z"
    post:
      consumes:
        - application/json
      description: >-
        This endpoint gets licenses for one or more images. You must specify the
        image IDs in the body parameter and other details like the format, size,
        and subscription ID either in the query parameter or with each image ID
        in the body parameter. Values in the body parameter override values in
        the query parameters.
      operationId: licenseImages
      parameters:
        - description: Subscription ID to use to license the image
          in: query
          name: subscription_id
          type: string
        - default: jpg
          description: Image format
          enum:
            - eps
            - jpg
          in: query
          name: format
          type: string
        - default: huge
          description: Image size
          enum:
            - small
            - medium
            - huge
            - vector
            - custom
          in: query
          name: size
          type: string
        - description: Search ID that was provided in the results of an image search
          in: query
          name: search_id
          type: string
        - description: >-
            List of images to request licenses for and information about each
            license transaction; these values override the defaults in the query
            parameters
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LicenseImageRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LicenseImageResultDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
            - purchases.view
      summary: License images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >
            DATA='{
              "images": [
                {
                  "image_id": "59656357",
                  "price": 12.50,
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            }'


            curl -X POST
            "https://api.shutterstock.com/v2/images/licenses?subscription_id=$SUBSCRIPTION_ID"
            \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \

            -H 'Content-Type: application/json' \

            -d "$DATA"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const body = {
              "images": [
                {
                  "image_id": "419235589",
                  "price": 12.50,
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            };

            const queryParams = {
              "format": "jpg",
              "size": "huge",
              "subscription_id": process.env.SUBSCRIPTION_ID
            };

            imagesApi.licenseImages(body, queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "images" => [
                [
                  "image_id" => "539753938",
                  "price" => 12.50,
                  "metadata" => [
                    "customer_id" => "12345"
                  ]
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/licenses?subscription_id=$SUBSCRIPTION_ID",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "images": [
                {
                  "image_id": "59656357",
                  "price": 12.50,
                  "metadata": {
                    "customer_id": "12345"
                  }
                }
              ]
            }' > data.json


            shutterstock images license-images --subscription-id
            $SUBSCRIPTION_ID data.json
  '/v2/images/licenses/{id}/downloads':
    post:
      consumes:
        - application/json
      description: >-
        This endpoint redownloads images that you have already received a
        license for.
      operationId: downloadImage
      parameters:
        - description: License ID
          in: path
          name: id
          required: true
          type: string
          x-example: e123
        - description: Information about the images to redownload
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RedownloadImage'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Url'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: Download images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >
            DATA='{
              "size": "huge"
            }'


            curl -X POST
            https://api.shutterstock.com/v2/images/licenses/e123/downloads \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const licenseId = "e123"; // license ID, not image ID

            const body = {
              "size": "huge"
            };

            imagesApi.downloadImage(licenseId, body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "size" => "huge"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/licenses/e123/downloads",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >+
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "size": "huge"
            }' > data.json


            shutterstock images download-image e123 data.json

  /v2/images/recommendations:
    get:
      description: >-
        This endpoint returns images that customers put in the same collection
        as the specified image IDs.
      operationId: getImageRecommendations
      parameters:
        - collectionFormat: multi
          description: Image IDs
          in: query
          items:
            type: string
          name: id
          required: true
          type: array
          x-example:
            - 465011609
        - default: 20
          description: Maximum number of results returned in the response
          in: query
          maximum: 500
          minimum: 1
          name: max_items
          type: integer
        - default: true
          description: Restrict results to safe images
          in: query
          name: safe
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RecommendationDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List recommended images
      tags:
        - images
  /v2/images/search:
    get:
      description: >-
        This endpoint searches for images. If you specify more than one search
        parameter, the API uses an AND condition. Array parameters can be
        specified multiple times; in this case, the API uses an AND or an OR
        condition with those values, depending on the parameter. You can also
        filter search terms out in the `query` parameter by prefixing the term
        with NOT. Free API accounts show results only from a limited library of
        media, not the full Shutterstock media library. Also, the number of
        search fields they can use in a request is limited.
      operationId: searchImages
      parameters:
        - description: Show images added on the specified date
          format: date
          in: query
          name: added_date
          type: string
          x-example: '2021-03-29T00:00:00.000Z'
        - description: Show images added on or after the specified date
          format: date
          in: query
          name: added_date_start
          type: string
          x-example: '2021-03-29T00:00:00.000Z'
        - description: >-
            Show images with the specified aspect ratio or higher, using a
            positive decimal of the width divided by the height, such as 1.7778
            for a 16:9 image
          exclusiveMinimum: true
          in: query
          minimum: 0
          name: aspect_ratio_min
          type: number
          x-example: 1.7778
        - description: >-
            Show images with the specified aspect ratio or lower, using a
            positive decimal of the width divided by the height, such as 1.7778
            for a 16:9 image
          exclusiveMinimum: true
          in: query
          minimum: 0
          name: aspect_ratio_max
          type: number
          x-example: 1.7778
        - description: >-
            Show images with the specified aspect ratio, using a positive
            decimal of the width divided by the height, such as 1.7778 for a
            16:9 image
          exclusiveMinimum: true
          in: query
          minimum: 0
          name: aspect_ratio
          type: number
          x-example: 1.7778
        - description: Show images added before the specified date
          format: date
          in: query
          name: added_date_end
          type: string
          x-example: '2021-03-29T00:00:00.000Z'
        - description: >-
            Show images with the specified Shutterstock-defined category;
            specify a category name or ID
          in: query
          name: category
          type: string
        - description: >-
            Specify either a hexadecimal color in the format '4F21EA' or
            'grayscale'; the API returns images that use similar colors
          in: query
          name: color
          type: string
          x-example: 4F21EA
        - collectionFormat: multi
          description: >-
            Show images with the specified contributor names or IDs, allows
            multiple
          in: query
          items:
            type: string
          name: contributor
          type: array
          x-example:
            - '123456'
        - description: >-
            Show images from contributors in one or more specified countries, or
            start with NOT to exclude a country from the search
          in: query
          name: contributor_country
          x-example: US
        - description: >-
            Fields to display in the response; see the documentation for the
            fields parameter in the overview section
          in: query
          name: fields
          type: string
          uniqueItems: true
        - deprecated: true
          description: >-
            (Deprecated; use height_from and height_to instead) Show images with
            the specified height
          in: query
          name: height
          type: integer
        - description: 'Show images with the specified height or larger, in pixels'
          in: query
          name: height_from
          type: integer
          x-example: 1080
        - description: 'Show images with the specified height or smaller, in pixels'
          in: query
          name: height_to
          type: integer
          x-example: 1080
        - collectionFormat: multi
          description: Show images of the specified type
          in: query
          items:
            enum:
              - photo
              - illustration
              - vector
            type: string
          name: image_type
          type: array
          x-example: photo
        - default: true
          description: Hide results with potentially unsafe keywords
          in: query
          name: keyword_safe_search
          type: boolean
        - description: >-
            Set query and result language (uses Accept-Language header if not
            set)
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: fr
        - collectionFormat: multi
          description: Show only images with the specified license
          in: query
          items:
            default: commercial
            enum:
              - commercial
              - editorial
              - enhanced
            type: string
          name: license
          type: array
        - collectionFormat: multi
          description: Show image results with the specified model IDs
          in: query
          items:
            type: string
          name: model
          type: array
          x-example:
            - '12345'
            - '67890'
        - description: Show image results with horizontal or vertical orientation
          enum:
            - horizontal
            - vertical
          in: query
          name: orientation
          type: string
          x-example: vertical
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
          x-example: 1
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 0
          name: per_page
          type: integer
          x-example: 50
        - description: Show images of people with a signed model release
          in: query
          name: people_model_released
          type: boolean
          x-example: true
        - description: Show images that feature people of the specified age category
          enum:
            - infants
            - children
            - teenagers
            - 20s
            - 30s
            - 40s
            - 50s
            - 60s
            - older
          in: query
          name: people_age
          type: string
          x-example: 20s
        - collectionFormat: multi
          description: Show images with people of the specified ethnicities
          in: query
          items:
            enum:
              - african
              - african_american
              - black
              - brazilian
              - chinese
              - caucasian
              - east_asian
              - hispanic
              - japanese
              - middle_eastern
              - native_american
              - pacific_islander
              - south_asian
              - southeast_asian
              - other
            type: string
          name: people_ethnicity
          type: array
          x-example: hispanic
        - description: Show images with people of the specified gender
          enum:
            - male
            - female
            - both
          in: query
          name: people_gender
          type: string
          x-example: both
        - description: Show images with the specified number of people
          in: query
          maximum: 4
          minimum: 0
          name: people_number
          type: integer
          x-example: 2
        - description: >-
            One or more search terms separated by spaces; you can use NOT to
            filter out images that match a term
          in: query
          name: query
          type: string
          x-example: dogs on the beach
        - description: >-
            Raise or lower search result rankings based on the result's
            relevance to a specified region; you can provide a country code or
            an IP address from which the API infers a country
          in: query
          name: region
          x-example: US
        - default: true
          description: Enable or disable safe search
          in: query
          name: safe
          type: boolean
        - default: popular
          description: Sort by
          enum:
            - newest
            - popular
            - relevance
            - random
          in: query
          name: sort
          type: string
        - default: true
          description: >-
            Spellcheck the search query and return results on suggested
            spellings
          in: query
          name: spellcheck_query
          type: boolean
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
        - deprecated: true
          description: >-
            (Deprecated; use width_from and width_to instead) Show images with
            the specified width
          in: query
          name: width
          type: integer
        - description: 'Show images with the specified width or larger, in pixels'
          in: query
          name: width_from
          type: integer
          x-example: 1920
        - description: 'Show images with the specified width or smaller, in pixels'
          in: query
          name: width_to
          type: integer
          x-example: 1920
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImageSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search for images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/images/search \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "query=Vienna" \
            --data-urlencode "orientation=horizontal" \
            --data-urlencode "sort=popular"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const queryParams = {
              "query": "New York",
              "sort": "popular",
              "orientation": "horizontal"
            };

            imagesApi.searchImages(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "New York",
              "sort" => "popular",
              "orientation" => "horizontal"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock images search-images --query Vienna --orientation
            horizontal --sort popular
  /v2/images/search/suggestions:
    get:
      description: >-
        This endpoint provides autocomplete suggestions for partial search
        terms.
      operationId: getImageSuggestions
      parameters:
        - description: Search term for which you want keyword suggestions
          in: query
          name: query
          required: true
          type: string
          x-example: cats
        - default: 10
          description: Limit the number of suggestions
          in: query
          maximum: 25
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Suggestions'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get suggestions for a search term
      tags:
        - images
    post:
      consumes:
        - application/json
      description: >-
        This endpoint returns up to 10 important keywords from a block of plain
        text.
      operationId: getImageKeywordSuggestions
      parameters:
        - description: Plain text to extract keywords from
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SearchEntitiesRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SearchEntitiesResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get keywords from text
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: >
            DATA='{"text": "The beach is a wonderful place to visit. It has
            beautiful sand and ocean waves."}'


            curl -X POST
            https://api.shutterstock.com/v2/images/search/suggestions \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const body = {
              "text": "The beach is a wonderful place to visit. It has beautiful sand and ocean waves."
            };

            imagesApi.getImageKeywordSuggestions(body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "text" => "The beach is a wonderful place to visit. It has beautiful sand and ocean waves."
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/search/suggestions",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{"text": "The beach is a wonderful place to visit. It has
            beautiful sand and ocean waves."}' > data.json


            shutterstock images get-image-keyword-suggestions data.json
  /v2/images/updated:
    get:
      description: >-
        This endpoint lists images that have been updated in the specified time
        period to update content management systems (CMS) or digital asset
        management (DAM) systems. In most cases, use the `interval` parameter to
        show images that were updated recently, but you can also use the
        `start_date` and `end_date` parameters to specify a range of no more
        than three days. Do not use the `interval` parameter with either
        `start_date` or `end_date`.
      operationId: getUpdatedImages
      parameters:
        - collectionFormat: multi
          description: >-
            Show images that were added, deleted, or edited; by default, the
            endpoint returns images that were updated in any of these ways
          in: query
          items:
            enum:
              - addition
              - deletion
              - edit
            type: string
          name: type
          type: array
          x-example: addition
        - description: Show images updated on or after the specified date
          format: date
          in: query
          name: start_date
          type: string
          x-example: '2021-03-29T00:00:00.000Z'
        - description: Show images updated before the specified date
          format: date
          in: query
          name: end_date
          type: string
          x-example: '2021-03-29T00:00:00.000Z'
        - default: 1 HOUR
          description: >-
            Show images updated in the specified time period, where the time
            period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or
            30 MINUTE; the default is 1 HOUR, which shows images that were
            updated in the hour preceding the request
          in: query
          name: interval
          type: string
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 2000
          minimum: 1
          name: per_page
          type: integer
        - default: newest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UpdatedMediaDataList'
      security:
        - basic: []
        - customer_accessCode: []
      summary: List updated images
      tags:
        - images
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/images/updated \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "interval=30 MINUTE"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const imagesApi = new sstk.ImagesApi();

            const queryParams = {
              "interval": "30 MINUTE"
            };

            imagesApi.getUpdatedImages(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "interval" => "30 MINUTE"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/images/updated?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock images get-updated-images --interval "30 MINUTE"
  '/v2/images/{id}':
    get:
      description: >-
        This endpoint shows information about an image, including a URL to a
        preview image and the sizes that it is available in.
      operationId: getImage
      parameters:
        - description: Image ID
          in: path
          name: id
          required: true
          type: string
          x-example: '465011609'
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
        - default: full
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Image'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about images
      tags:
        - images
  '/v2/images/{id}/similar':
    get:
      description: >-
        This endpoint returns images that are visually similar to an image that
        you specify.
      operationId: getSimilarImages
      parameters:
        - description: Image ID
          in: path
          name: id
          required: true
          type: string
          x-example: '465011609'
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 1
          name: per_page
          type: integer
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImageSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar images
      tags:
        - images
  /v2/oauth/access_token:
    post:
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      description: >-
        This endpoint returns an access token for the specified user and with
        the specified scopes. The token does not expire until the user changes
        their password. The body parameters must be encoded as form data.
      operationId: createAccessToken
      parameters:
        - in: body
          name: body
          schema:
            properties:
              client_id:
                description: Client ID (Consumer Key) of your application
                type: string
              client_secret:
                description: Client Secret (Consumer Secret) of your application
                type: string
              code:
                description: >-
                  Response code from the /oauth/authorize flow; required if
                  grant_type=authorization_code
                type: string
              expires:
                default: false
                description: >-
                  Whether or not the token expires, expiring tokens come with a
                  refresh_token to renew the access_token
                type: boolean
              grant_type:
                description: >-
                  Grant type: authorization_code generates user tokens,
                  client_credentials generates short-lived client grants
                enum:
                  - authorization_code
                  - client_credentials
                  - refresh_token
                type: string
              realm:
                default: customer
                description: User type to be authorized (usually 'customer')
                enum:
                  - customer
                  - contributor
                type: string
              refresh_token:
                description: >-
                  Pass this along with grant_type=refresh_token to get a fresh
                  access token
                type: string
            required:
              - client_id
              - grant_type
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OauthAccessTokenResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Get access tokens
      tags:
        - oauth
      x-code-samples:
        - lang: shell
          source: |-
            curl "https://api.shutterstock.com/v2/oauth/access_token" \
            -X POST \
            --data-urlencode "client_id=$CLIENT_ID" \
            --data-urlencode "client_secret=$CLIENT_SECRET" \
            --data-urlencode "grant_type=authorization_code" \
            --data-urlencode "code=$CODE"
        - lang: javascript--nodejs
          source: >
            const axios = require("axios");


            const body = {
              "client_id": clientId,
              "client_secret": clientSecret,
              "grant_type": "authorization_code",
              "code": code,
            };


            axios.post("https://api.shutterstock.com/v2/oauth/access_token",
            body)
              .then((res) => {
                console.log(res);
              });
        - lang: php
          source: |
            $body = [
              "client_id" => $clientId,
              "client_secret" => $clientSecret,
              "grant_type" => "authorization_code",
              "code" => $code
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/oauth/access_token",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Content-Type: application/json",
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: |-
            curl "https://api.shutterstock.com/v2/oauth/access_token" \
            -X POST \
            --data-urlencode "client_id=$CLIENT_ID" \
            --data-urlencode "client_secret=$CLIENT_SECRET" \
            --data-urlencode "grant_type=authorization_code" \
            --data-urlencode "code=$CODE"
  /v2/oauth/authorize:
    get:
      description: >-
        This endpoint returns a redirect URI (in the 'Location' header) that the
        customer uses to authorize your application and, together with POST
        /v2/oauth/access_token, generate an access token that represents that
        authorization.
      operationId: authorize
      parameters:
        - description: Client ID (Consumer Key) of your application
          in: query
          name: client_id
          required: true
          type: string
          x-example: 6d097450b209c6dcd859
        - default: customer
          description: User type to be authorized (usually 'customer')
          enum:
            - customer
            - contributor
          in: query
          name: realm
          type: string
          x-example: customer
        - description: >-
            The callback URI to send the request to after authorization; must
            use a host name that is registered with your application
          in: query
          name: redirect_uri
          required: true
          type: string
          x-example: localhost
        - description: >-
            Type of temporary authorization code that will be used to generate
            an access code; the only valid value is 'code'
          enum:
            - code
          in: query
          name: response_type
          required: true
          type: string
          x-example: code
        - default: user.view
          description: Space-separated list of scopes to be authorized
          in: query
          name: scope
          type: string
          x-example: user.view
        - description: Unique value used by the calling app to verify the request
          in: query
          name: state
          required: true
          type: string
          x-example: '1540290465000'
      produces:
        - text/html
      responses:
        '200':
          description: No response was specified
        '302':
          description: Redirect user to authenticate with Shutterstock
          schema:
            $ref: '#/definitions/AuthorizeResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Authorize applications
      tags:
        - oauth
      x-code-samples:
        - lang: shell
          source: >-
            curl "https://api.shutterstock.com/v2/oauth/authorize" \

            -X GET \

            -G \

            --data-urlencode "scope=licenses.create licenses.view
            purchases.view" \

            --data-urlencode "state=demo_`date +%s`" \

            --data-urlencode "response_type=code" \

            --data-urlencode "redirect_uri=http://localhost:3000/callback" \

            --data-urlencode "client_id=$CLIENT_ID"
        - lang: javascript--nodejs
          source: |
            const axios = require("axios");

            axios.get("https://api.shutterstock.com/v2/oauth/authorize", {
              "params": {
                "scope": "licenses.create licenses.view purchases.view",
                "state": "demo_" + Math.round(new Date() / 1000),
                "response_type": "code",
                "redirect_uri": "http://localhost:3000/callback",
                "client_id": clientId
              },
              // Don't follow the redirect because this program is not running in a browser
              "maxRedirects": 0,
            })
              .catch(({ response }) => {
                // HTTP 302: Redirect
                console.log(response.data);
              });
        - lang: php
          source: >-
            $queryFields = [ "client_id" => $clientId, "redirect_uri" =>
            "http://localhost:3000/callback", "response_type" => "code", "scope"
            => "licenses.create licenses.view purchases.view", "state" => time()
            ];

            $options = [ CURLOPT_URL =>
            "https://api.shutterstock.com/v2/oauth/authorize?" .
            http_build_query($queryFields), CURLOPT_USERAGENT => "php/curl",
            CURLOPT_RETURNTRANSFER => 1 ];

            $handle = curl_init(); curl_setopt_array($handle, $options);
            $response = curl_exec($handle); curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            curl "https://api.shutterstock.com/v2/oauth/authorize" \

            -X GET \

            -G \

            --data-urlencode "scope=licenses.create licenses.view
            purchases.view" \

            --data-urlencode "state=demo_`date +%s`" \

            --data-urlencode "response_type=code" \

            --data-urlencode "redirect_uri=http://localhost:3000/callback" \

            --data-urlencode "client_id=$CLIENT_ID"
  /v2/test:
    get:
      operationId: echo
      parameters:
        - default: ok
          description: Text to echo
          in: query
          name: text
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TestEcho'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Echo text
      tags:
        - test
  /v2/test/validate:
    get:
      operationId: validate
      parameters:
        - description: Integer ID
          in: query
          name: id
          required: true
          type: integer
          x-example: 123
        - collectionFormat: multi
          description: List of tags
          in: query
          items:
            type: string
          name: tag
          type: array
        - description: User agent
          in: header
          name: user-agent
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TestValidate'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Validate input
      tags:
        - test
  /v2/user:
    get:
      operationId: getUser
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserDetails'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - user.view
      summary: Get user details
      tags:
        - users
  /v2/user/access_token:
    get:
      operationId: getAccessToken
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccessTokenDetails'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode: []
      summary: Get access token details
      tags:
        - users
  /v2/user/subscriptions:
    get:
      operationId: getUserSubscriptionList
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SubscriptionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - purchases.view
      summary: List user subscriptions
      tags:
        - users
  /v2/videos:
    get:
      description: >-
        This endpoint lists information about one or more videos, including the
        aspect ratio and URLs to previews.
      operationId: getVideoList
      parameters:
        - collectionFormat: multi
          description: One or more video IDs
          in: query
          items:
            type: string
          name: id
          required: true
          type: array
          x-example:
            - '639703'
            - '993721'
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List videos
      tags:
        - videos
  /v2/videos/categories:
    get:
      description: >-
        This endpoint lists the categories (Shutterstock-assigned genres) that
        videos can belong to.
      operationId: listVideoCategories
      parameters:
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CategoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List video categories
      tags:
        - videos
  /v2/videos/collections:
    get:
      description: >-
        This endpoint lists your collections of videos and their basic
        attributes.
      operationId: getVideoCollectionList
      parameters:
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
        - collectionFormat: multi
          description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          in: query
          items:
            enum:
              - share_code
              - share_url
            type: string
          name: embed
          type: array
          x-example: share_code
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.view
      summary: List video collections
      tags:
        - videos
    post:
      consumes:
        - application/json
      description: >-
        This endpoint creates one or more collections (clipboxes). To add videos
        to collections, use `POST /v2/videos/collections/{id}/items`.
      operationId: createVideoCollection
      parameters:
        - description: Collection metadata
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Successfully created video collection
          schema:
            $ref: '#/definitions/CollectionCreateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - collections.edit
      summary: Create video collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |-
            DATA='{
              "name": "New collection name"
            }'

            curl -X POST https://api.shutterstock.com/v2/videos/collections \
            -d "$DATA" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const body = {
              "name": "New collection name"
            };

            videosApi.createVideoCollection(body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "New collection name"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "name": "New collection name"
            }' > data.json


            shutterstock videos create-video-collection data.json
  /v2/videos/collections/featured:
    get:
      description: >-
        This endpoint lists featured video collections and a name and cover
        video for each collection.
      operationId: getFeaturedVideoCollectionList
      parameters:
        - description: >-
            What information to include in the response, such as a URL to the
            collection
          enum:
            - share_url
          in: query
          name: embed
          type: string
          x-example: share_url
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeaturedCollectionDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List featured video collections
      tags:
        - videos
  '/v2/videos/collections/featured/{id}':
    get:
      description: >-
        This endpoint gets more detailed information about a featured video
        collection, including its cover video and timestamps for its creation
        and most recent update. To get the videos, use `GET
        /v2/videos/collections/featured/{id}/items`.
      operationId: getFeaturedVideoCollection
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '136351027'
        - description: >-
            What information to include in the response, such as a URL to the
            collection
          enum:
            - share_url
          in: query
          name: embed
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeaturedCollection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Featured collection not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get the details of featured video collections
      tags:
        - videos
  '/v2/videos/collections/featured/{id}/items':
    get:
      description: >-
        This endpoint lists the IDs of videos in a featured collection and the
        date that each was added.
      operationId: getFeaturedVideoCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '136351027'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoCollectionItemDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Featured collection not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get the contents of featured video collections
      tags:
        - videos
  '/v2/videos/collections/{id}':
    delete:
      description: This endpoint deletes a collection.
      operationId: deleteVideoCollection
      parameters:
        - description: The ID of the collection to delete
          in: path
          name: id
          required: true
          type: string
          x-example: '17555176'
      responses:
        '204':
          description: Successfully deleted collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Delete video collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: >-
            curl -X DELETE
            https://api.shutterstock.com/v2/videos/collections/17555176 \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "17555176";

            videosApi.deleteVideoCollection(collectionId)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock videos delete-video-collection 17555176
    get:
      description: >-
        This endpoint gets more detailed information about a collection,
        including the timestamp for its creation and the number of videos in it.
        To get the videos in collections, use GET
        /v2/videos/collections/{id}/items.
      operationId: getVideoCollection
      parameters:
        - description: The ID of the collection to return
          in: path
          name: id
          required: true
          type: string
          x-example: '17555176'
        - collectionFormat: multi
          description: >-
            Which sharing information to include in the response, such as a URL
            to the collection
          in: query
          items:
            enum:
              - share_code
              - share_url
            type: string
          name: embed
          type: array
        - description: Code to retrieve a shared collection
          in: query
          name: share_code
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Collection'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the details of video collections
      tags:
        - videos
    post:
      consumes:
        - application/json
      description: This endpoint sets a new name for a collection.
      operationId: renameVideoCollection
      parameters:
        - description: The ID of the collection to rename
          in: path
          name: id
          required: true
          type: string
          x-example: '17555176'
        - description: The new name for the collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionUpdateRequest'
      responses:
        '204':
          description: Successfully updated collection
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Rename video collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "name": "Updated collection name"
            }'


            curl -X POST
            https://api.shutterstock.com/v2/videos/collections/17555176 \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "186765119";

            const body = {
              "name": "My new collection name"
            };

            videosApi.renameVideoCollection(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "name" => "Updated collection name"
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "name": "Updated collection name"
            }' > data.json


            shutterstock videos rename-video-collection 17555176 data.json
  '/v2/videos/collections/{id}/items':
    delete:
      description: This endpoint removes one or more videos from a collection.
      operationId: deleteVideoCollectionItems
      parameters:
        - description: The ID of the Collection from which items will be deleted
          in: path
          name: id
          required: true
          type: string
          x-example: '17555176'
        - collectionFormat: multi
          description: One or more video IDs to remove from the collection
          in: query
          items:
            type: string
          name: item_id
          type: array
      responses:
        '204':
          description: Successfully removed collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Remove videos from collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: >-
            curl -X DELETE
            https://api.shutterstock.com/v2/videos/collections/17555176/items?item_id=495863218
            \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "17555176";

            // Array of videos to remove
            const videosToRemove = {
              "item_id": [
                "10120264"
              ]
            };

            videosApi.deleteVideoCollectionItems(collectionId, videosToRemove)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176/items?item_id=495863218",
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock videos delete-video-collection-items 17555176 --item-id
            495863218
    get:
      description: >-
        This endpoint lists the IDs of videos in a collection and the date that
        each was added.
      operationId: getVideoCollectionItems
      parameters:
        - description: Collection ID
          in: path
          name: id
          required: true
          type: string
          x-example: '17555176'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 150
          minimum: 1
          name: per_page
          type: integer
        - description: Code to retrieve the contents of a shared collection
          in: query
          name: share_code
          type: string
        - default: oldest
          description: Sort order
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CollectionItemDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.view
      summary: Get the contents of video collections
      tags:
        - videos
    post:
      consumes:
        - application/json
      description: This endpoint adds one or more videos to a collection by video IDs.
      operationId: addVideoCollectionItems
      parameters:
        - description: The ID of the collection to which items should be added
          in: path
          name: id
          required: true
          type: string
          x-example: '17555176'
        - description: Array of video IDs to add to the collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CollectionItemRequest'
      responses:
        '204':
          description: Successfully added collection items
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found
      security:
        - customer_accessCode:
            - collections.edit
      summary: Add videos to collections
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: >-
            DATA='{
              "items": [
                {
                  "id": "10120264"
                },
                {
                  "id": "24419024"
                }
              ]
            }'


            curl -X POST
            https://api.shutterstock.com/v2/videos/collections/17555176/items \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const collectionId = "17555176"; // Collection ID

            // Array of videos to add
            const body = {
              "items": [
                {
                  "id": "10120264",
                  "media_type": "video"
                }
              ]
            };

            videosApi.addImageCollectionItems(collectionId, body)
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |-
            $body = [
              "items" => [
                [
                  "id" => "10120264"
                ],
                [
                  "id" => "24419024"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/collections/17555176/items",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "items": [
                {
                  "id": "10120264"
                },
                {
                  "id": "24419024"
                }
              ]
            }' > data.json


            shutterstock videos add-video-collection-items 17555176 data.json
  /v2/videos/licenses:
    get:
      description: This endpoint lists existing licenses.
      operationId: getVideoLicenseList
      parameters:
        - description: Show licenses for the specified video ID
          in: query
          name: video_id
          pattern: '^[1-9]\d*$'
          type: string
          x-example: '12345678'
        - description: >-
            Show videos that are available with the specified license, such as
            `standard` or `enhanced`; prepending a `-` sign excludes results
            from that license
          in: query
          name: license
          pattern: ^.+$
          type: string
          x-example: standard
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 200
          minimum: 1
          name: per_page
          type: integer
        - default: newest
          description: Sort by oldest or newest videos first
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
        - description: Filter licenses by username of licensee
          in: query
          name: username
          type: string
          x-example: aUniqueUsername
        - description: Show licenses created on or after the specified date
          format: date-time
          in: query
          name: start_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
        - description: Show licenses created before the specified date
          format: date-time
          in: query
          name: end_date
          type: string
          x-example: '2021-03-29T13:25:13.521Z'
          x-relationships:
            - in: query
              name: start_date
              relationship: '>'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadHistoryDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: List video licenses
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/videos/licenses \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
            -G \
            --data-urlencode "start_date=2016-10-03T01:25:13.521Z" \
            --data-urlencode "end_date=2016-10-04T13:25:13.521Z" \
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const queryParams = {
              "start_date": "2016-10-03T01:25:13.521Z",
              "end_date": "2016-10-04T13:25:13.521Z"
            };

            videosApi.getVideoLicenseList(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "start_date" => "2016-10-03T01:25:13.521Z",
              "end_date" => "2016-10-04T13:25:13.521Z"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/licenses" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock videos get-video-license-list --start-date
            "2021-01-03T01:25:13.521Z" --end-date "2021-05-04T13:25:13.521Z"
    post:
      consumes:
        - application/json
      description: >-
        This endpoint gets licenses for one or more videos. You must specify the
        video IDs in the body parameter and the size and subscription ID either
        in the query parameter or with each video ID in the body parameter.
        Values in the body parameter override values in the query parameters.
      operationId: licenseVideos
      parameters:
        - description: The subscription ID to use for licensing
          in: query
          name: subscription_id
          type: string
          x-example: s1234567
        - default: web
          description: The size of the video to license
          enum:
            - web
            - sd
            - hd
            - 4k
          in: query
          name: size
          type: string
        - description: The Search ID that led to this licensing event
          in: query
          name: search_id
          type: string
        - description: >-
            List of videos to request licenses for and information about each
            license transaction; these values override the defaults in the query
            parameters
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LicenseVideoRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LicenseVideoResultDataList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.create
            - purchases.view
      summary: License videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: >
            DATA='{
              "videos": [
                {
                  "video_id": "2140697",
                  "size": "hd"
                },
                {
                  "video_id": "5613314",
                  "size": "4k"
                }
              ]
            }'


            curl -X POST
            'https://api.shutterstock.com/v2/videos/licenses?subscription_id='$SUBSCRIPTION_ID
            \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const body = {
              "videos": [
                {
                  "video_id": "419235589"
                },
                {
                  "video_id": "1079756147"
                }
              ]
            };

            const queryParams = {
              "subscription_id": SHUTTERSTOCK_SUBSCRIPTION_ID,
              "size": "web"
            };

            videosApi.licenseVideos(body, queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [
              "videos" => [
                [
                  "video_id" => "2140697",
                  "size" => "hd"
                ],
                [
                  "video_id" => "5613314",
                  "size" => "4k"
                ]
              ]
            ];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/licenses?subscription_id=$SUBSCRIPTION_ID",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{
              "videos": [
                {
                  "video_id": "2140697",
                  "size": "hd"
                },
                {
                  "video_id": "5613314",
                  "size": "4k"
                }
              ]
            }' > data.json


            shutterstock videos license-videos --subscription-id
            $SUBSCRIPTION_ID data.json
  '/v2/videos/licenses/{id}/downloads':
    post:
      consumes:
        - application/json
      description: >-
        This endpoint redownloads videos that you have already received a
        license for.
      operationId: downloadVideos
      parameters:
        - description: The license ID of the item to (re)download
          in: path
          name: id
          required: true
          type: string
          x-example: e123
        - description: Information about the videos to redownload
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RedownloadVideo'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Url'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - customer_accessCode:
            - licenses.view
      summary: Download videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: >
            DATA='{}'


            curl -X POST
            https://api.shutterstock.com/v2/videos/licenses/e123/downloads \

            -d "$DATA" \

            -H "Content-Type: application/json" \

            -H "Accept: application/json" \

            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const licenseId = "e123";

            const body = {};

            videosApi.downloadVideos(licenseId, body)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $body = [];
            $encodedBody = json_encode($body);

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/licenses/e123/downloads",
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => $encodedBody,
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN",
                "Content-Type: application/json"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            echo '{}' > data.json


            shutterstock videos download-videos e123 data.json
  /v2/videos/search:
    get:
      description: >-
        This endpoint searches for videos. If you specify more than one search
        parameter, the API uses an AND condition. Array parameters can be
        specified multiple times; in this case, the API uses an AND or an OR
        condition with those values, depending on the parameter. You can also
        filter search terms out in the `query` parameter by prefixing the term
        with NOT.
      operationId: searchVideos
      parameters:
        - description: Show videos added on the specified date
          format: date
          in: query
          name: added_date
          type: string
          x-example: '2020-05-29T00:00:00.000Z'
        - description: Show videos added on or after the specified date
          format: date
          in: query
          name: added_date_start
          type: string
          x-example: '2020-05-29T00:00:00.000Z'
        - description: Show videos added before the specified date
          format: date
          in: query
          name: added_date_end
          type: string
          x-example: '2020-05-29T00:00:00.000Z'
        - description: Show videos with the specified aspect ratio
          enum:
            - 43
            - 169
            - nonstandard
          in: query
          name: aspect_ratio
          type: string
          x-example: 43
        - description: >-
            Show videos with the specified Shutterstock-defined category;
            specify a category name or ID
          in: query
          name: category
          type: string
        - collectionFormat: multi
          description: Show videos with the specified artist names or IDs
          in: query
          items:
            type: string
          name: contributor
          type: array
          x-example: '[12345678]'
        - collectionFormat: multi
          description: Show videos from contributors in one or more specified countries
          in: query
          items:
            format: country-code-2
            type: string
          name: contributor_country
          type: array
          x-example: US
        - deprecated: true
          description: >-
            (Deprecated; use duration_from and duration_to instead) Show videos
            with the specified duration in seconds
          in: query
          name: duration
          type: integer
        - description: Show videos with the specified duration or longer in seconds
          in: query
          name: duration_from
          type: integer
          x-example: 60
        - description: Show videos with the specified duration or shorter in seconds
          in: query
          name: duration_to
          type: integer
          x-example: 180
        - deprecated: true
          description: >-
            (Deprecated; use fps_from and fps_to instead) Show videos with the
            specified frames per second
          in: query
          name: fps
          type: number
        - description: Show videos with the specified frames per second or more
          in: query
          name: fps_from
          type: number
          x-example: 24
        - description: Show videos with the specified frames per second or fewer
          in: query
          name: fps_to
          type: number
          x-example: 60
        - default: true
          description: Hide results with potentially unsafe keywords
          in: query
          name: keyword_safe_search
          type: boolean
        - description: >-
            Set query and result language (uses Accept-Language header if not
            set)
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
        - collectionFormat: multi
          description: Show only videos with the specified license or licenses
          in: query
          items:
            default: commercial
            enum:
              - commercial
              - editorial
            type: string
          name: license
          type: array
          x-example:
            - commercial
            - editorial
        - collectionFormat: multi
          description: Show videos with each of the specified models
          in: query
          items:
            type: string
          name: model
          type: array
          x-example:
            - '442583'
            - '434750'
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 0
          name: per_page
          type: integer
        - description: Show videos that feature people of the specified age range
          enum:
            - infants
            - children
            - teenagers
            - 20s
            - 30s
            - 40s
            - 50s
            - 60s
            - older
          in: query
          name: people_age
          type: string
          x-example: 20s
        - collectionFormat: multi
          description: Show videos with people of the specified ethnicities
          in: query
          items:
            enum:
              - african
              - african_american
              - black
              - brazilian
              - chinese
              - caucasian
              - east_asian
              - hispanic
              - japanese
              - middle_eastern
              - native_american
              - pacific_islander
              - south_asian
              - southeast_asian
              - other
            type: string
          name: people_ethnicity
          type: array
          x-example: hispanic
        - description: Show videos with people with the specified gender
          enum:
            - male
            - female
            - both
          in: query
          name: people_gender
          type: string
          x-example: female
        - description: Show videos with the specified number of people
          in: query
          maximum: 4
          minimum: 0
          name: people_number
          type: integer
          x-example: 2
        - description: Show only videos of people with a signed model release
          in: query
          name: people_model_released
          type: boolean
          x-example: true
        - description: >-
            One or more search terms separated by spaces; you can use NOT to
            filter out videos that match a term
          in: query
          name: query
          type: string
          x-example: dogs running on the beach
        - description: Show videos with the specified resolution
          enum:
            - 4k
            - standard_definition
            - high_definition
          in: query
          name: resolution
          type: string
          x-example: 4k
        - default: true
          description: Enable or disable safe search
          in: query
          name: safe
          type: boolean
        - default: popular
          description: Sort by one of these categories
          enum:
            - newest
            - popular
            - relevance
            - random
          in: query
          name: sort
          type: string
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Search for videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET "https://api.shutterstock.com/v2/videos/search" \
            --header "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "query=hot air balloon" \
            --data-urlencode "duration_from=30" \
            --data-urlencode "sort=popular"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const queryParams = {
              "query": "hot air balloon",
              "duration_from": 30,
              "sort": "popular"
            };

            videosApi.searchVideos(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "query" => "hot air balloon",
              "duration_from" => 30,
              "sort" => "popular"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/search?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock videos search-videos --query "hot air balloon"
            --duration-from 30 --sort popular
  /v2/videos/search/suggestions:
    get:
      description: >-
        This endpoint provides autocomplete suggestions for partial search
        terms.
      operationId: getVideoSuggestions
      parameters:
        - description: Search term for which you want keyword suggestions
          in: query
          name: query
          required: true
          type: string
          x-example: cats
        - default: 10
          description: Limit the number of the suggestions
          in: query
          maximum: 25
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Suggestions'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get suggestions for a search term
      tags:
        - videos
  /v2/videos/updated:
    get:
      description: >-
        This endpoint lists videos that have been updated in the specified time
        period to update content management systems (CMS) or digital asset
        management (DAM) systems. In most cases, use the `interval` parameter to
        show videos that were updated recently, but you can also use the
        `start_date` and `end_date` parameters to specify a range of no more
        than three days. Do not use the `interval` parameter with either
        `start_date` or `end_date`.
      operationId: getUpdatedVideos
      parameters:
        - description: Show videos updated on or after the specified date
          format: date
          in: query
          name: start_date
          type: string
          x-example: '2020-05-29T00:00:00.000Z'
        - description: Show videos updated before the specified date
          format: date
          in: query
          name: end_date
          type: string
          x-example: '2021-05-29T00:00:00.000Z'
        - default: 1 HOUR
          description: >-
            Show videos updated in the specified time period, where the time
            period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or
            30 MINUTE; the default is 1 HOUR, which shows videos that were
            updated in the hour preceding the request
          in: query
          name: interval
          type: string
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 100
          description: Number of results per page
          in: query
          maximum: 2000
          minimum: 1
          name: per_page
          type: integer
        - default: newest
          description: Sort by oldest or newest videos first
          enum:
            - newest
            - oldest
          in: query
          name: sort
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UpdatedMediaDataList'
      security:
        - basic: []
        - customer_accessCode: []
      summary: List updated videos
      tags:
        - videos
      x-code-samples:
        - lang: shell
          source: |
            curl -X GET https://api.shutterstock.com/v2/videos/updated \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN" \
            -G \
            --data-urlencode "interval=30 MINUTE"
        - lang: javascript--nodejs
          source: |
            const sstk = require("shutterstock-api");

            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);

            const videosApi = new sstk.VideosApi();

            const queryParams = {
              "interval": "30 MINUTE"
            };

            videosApi.getUpdatedVideos(queryParams)
              .then((data) => {
                console.log(data);
              })
              .catch((error) => {
                console.error(error);
              });
        - lang: php
          source: |
            $queryFields = [
              "interval" => "30 MINUTE"
            ];

            $options = [
              CURLOPT_URL => "https://api.shutterstock.com/v2/videos/updated?" . http_build_query($queryFields),
              CURLOPT_USERAGENT => "php/curl",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer $SHUTTERSTOCK_API_TOKEN"
              ],
              CURLOPT_RETURNTRANSFER => 1
            ];

            $handle = curl_init();
            curl_setopt_array($handle, $options);
            $response = curl_exec($handle);
            curl_close($handle);

            $decodedResponse = json_decode($response);
            print_r($decodedResponse);
        - lang: bash
          source: >-
            export
            SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a


            shutterstock videos get-updated-videos --interval "30 MINUTE"
  '/v2/videos/{id}':
    get:
      description: >-
        This endpoint shows information about a video, including URLs to
        previews and the sizes that it is available in.
      operationId: getVideo
      parameters:
        - description: Video ID
          in: path
          name: id
          required: true
          type: string
          x-example: '639703'
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
        - default: full
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Video'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
      security:
        - basic: []
        - customer_accessCode: []
      summary: Get details about videos
      tags:
        - videos
  '/v2/videos/{id}/similar':
    get:
      description: >-
        This endpoint searches for videos that are similar to a video that you
        specify.
      operationId: getSimilarVideos
      parameters:
        - description: The ID of a video for which similar videos should be returned
          in: path
          name: id
          required: true
          type: string
          x-example: '2140697'
        - description: Language for the keywords and categories in the response
          enum:
            - cs
            - da
            - de
            - el
            - en
            - es
            - fi
            - fr
            - hu
            - id
            - it
            - ja
            - ko
            - nb
            - nl
            - pl
            - pt
            - ro
            - ru
            - sv
            - th
            - tr
            - vi
            - zh
            - zh-Hant
          in: query
          name: language
          type: string
          x-example: es
        - default: 1
          description: Page number
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 20
          description: Number of results per page
          in: query
          maximum: 500
          minimum: 1
          name: per_page
          type: integer
        - default: minimal
          description: Amount of detail to render in the response
          enum:
            - minimal
            - full
          in: query
          name: view
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoSearchResults'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - basic: []
        - customer_accessCode: []
      summary: List similar videos
      tags:
        - videos
schemes:
  - https
securityDefinitions:
  basic:
    type: basic
  customer_accessCode:
    authorizationUrl: 'https://accounts.shutterstock.com/oauth/authorize'
    flow: accessCode
    scopes:
      collections.edit: >-
        Grant the ability to create new collections, edit a collection, and
        modify the contents of a collection
      collections.view: Grant read-only access to a collection and its contents.
      licenses.create: Grant the ability to download and license media on behalf of the user.
      licenses.view: Grant read-only access to a user's licenses.
      purchases.view: Grant read-only access to a user's purchase history.
      user.view: '*Originally missing*'
    tokenUrl: 'https://api.shutterstock.com/v2/oauth/access_token'
    type: oauth2
    x-shutterstock-realm: customer
swagger: '2.0'
x-components:
  x-string-formats:
    asset-id:
      example: '18765466'
      format: >-
        A Shutterstock asset ID that starts with a nonzero digit and has any
        number of other digits
    asset-upload-id:
      example: U6ba16262e3bc2db470b8e3cfa8aaab25
      format: >-
        A Shutterstock upload ID consisting of the letter U followed by one or
        more other characters
    country-code-2:
      example: US
      format: A two-character (ISO 3166 Alpha-2) country code
    country-code-3:
      example: USA
      format: A three-character (ISO 3166 Alpha-3) country code
    date:
      example: '2020-05-29T00:00:00.000Z'
      format: YYYY-MM-DD
    date-time:
      example: '2020-05-29T17:10:22.000Z'
      format: 'YYYY-MM-DDTHH:mm:ssZ'
    ipv4:
      example: 1.1.1.1
      format: A valid IPv4 address
    negated-country-code-2:
      example: NOT US
      format: A NOT followed by a two-character (ISO 3166 Alpha-2) country code
    uri:
      example: 'https://wwww.shutterstock.com'
      format: A valid URI

