basePath: /api/v2
definitions:
  ASTResponse:
    description: Contains the AST for the supplied Flux query
    properties:
      ast:
        $ref: '#/definitions/Package'
    type: object
  AddResourceMemberRequestBody:
    properties:
      id:
        type: string
      name:
        type: string
    required:
      - id
    type: object
  AnalyzeQueryResponse:
    properties:
      errors:
        items:
          properties:
            character:
              type: integer
            column:
              type: integer
            line:
              type: integer
            message:
              type: string
          type: object
        type: array
    type: object
  ArrayExpression:
    description: Used to create and directly specify the elements of an array object
    properties:
      elements:
        description: Elements of the array
        items:
          $ref: '#/definitions/Expression'
        type: array
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Authorization:
    allOf:
      - $ref: '#/definitions/AuthorizationUpdateRequest'
      - properties:
          createdAt:
            format: date-time
            readOnly: true
            type: string
          id:
            readOnly: true
            type: string
          links:
            example:
              self: /api/v2/authorizations/1
              user: /api/v2/users/12
            properties:
              self:
                $ref: '#/definitions/Link'
                readOnly: true
              user:
                $ref: '#/definitions/Link'
                readOnly: true
            readOnly: true
            type: object
          org:
            description: Name of the org token is scoped to.
            readOnly: true
            type: string
          orgID:
            description: ID of org that authorization is scoped to.
            type: string
          permissions:
            description: >-
              List of permissions for an auth.  An auth must have at least one
              Permission.
            items:
              $ref: '#/definitions/Permission'
            minItems: 1
            type: array
          token:
            description: Passed via the Authorization Header and Token Authentication type.
            readOnly: true
            type: string
          updatedAt:
            format: date-time
            readOnly: true
            type: string
          user:
            description: Name of user that created and owns the token.
            readOnly: true
            type: string
          userID:
            description: ID of user that created and owns the token.
            readOnly: true
            type: string
        type: object
    required:
      - orgID
      - permissions
  AuthorizationPostRequest:
    allOf:
      - $ref: '#/definitions/AuthorizationUpdateRequest'
      - properties:
          orgID:
            description: ID of org that authorization is scoped to.
            type: string
          permissions:
            description: >-
              List of permissions for an auth.  An auth must have at least one
              Permission.
            items:
              $ref: '#/definitions/Permission'
            minItems: 1
            type: array
          userID:
            description: ID of user that authorization is scoped to.
            type: string
        type: object
    required:
      - orgID
      - permissions
  AuthorizationUpdateRequest:
    properties:
      description:
        description: A description of the token.
        type: string
      status:
        default: active
        description: >-
          If inactive the token is inactive and requests using the token will be
          rejected.
        enum:
          - active
          - inactive
        type: string
  Authorizations:
    properties:
      authorizations:
        items:
          $ref: '#/definitions/Authorization'
        type: array
      links:
        $ref: '#/definitions/Links'
        readOnly: true
    type: object
  Axes:
    description: The viewport for a View's visualizations
    properties:
      x:
        $ref: '#/definitions/Axis'
      'y':
        $ref: '#/definitions/Axis'
    required:
      - x
      - 'y'
    type: object
  Axis:
    description: The description of a particular axis for a visualization.
    properties:
      base:
        description: Base represents the radix for formatting axis values.
        enum:
          - ''
          - '2'
          - '10'
        type: string
      bounds:
        description: >-
          The extents of an axis in the form [lower, upper]. Clients determine
          whether bounds are to be inclusive or exclusive of their limits
        items:
          type: string
        maxItems: 2
        minItems: 0
        type: array
      label:
        description: Label is a description of this Axis
        type: string
      prefix:
        description: Prefix represents a label prefix for formatting axis values.
        type: string
      scale:
        $ref: '#/definitions/AxisScale'
      suffix:
        description: Suffix represents a label suffix for formatting axis values.
        type: string
    type: object
  AxisScale:
    description: 'Scale is the axis formatting scale. Supported: "log", "linear"'
    enum:
      - log
      - linear
    type: string
  BadStatement:
    description: >-
      A placeholder for statements for which no correct statement nodes can be
      created
    properties:
      text:
        description: Raw source text
        type: string
      type:
        $ref: '#/definitions/NodeType'
    type: object
  BandViewProperties:
    properties:
      axes:
        $ref: '#/definitions/Axes'
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      generateXAxisTicks:
        items:
          type: string
        type: array
      generateYAxisTicks:
        items:
          type: string
        type: array
      geom:
        $ref: '#/definitions/XYGeom'
      hoverDimension:
        enum:
          - auto
          - x
          - 'y'
          - xy
        type: string
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      lowerColumn:
        type: string
      mainColumn:
        type: string
      note:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      staticLegend:
        $ref: '#/definitions/StaticLegend'
      timeFormat:
        type: string
      type:
        enum:
          - band
        type: string
      upperColumn:
        type: string
      xColumn:
        type: string
      xTickStart:
        format: float
        type: number
      xTickStep:
        format: float
        type: number
      xTotalTicks:
        type: integer
      yColumn:
        type: string
      yTickStart:
        format: float
        type: number
      yTickStep:
        format: float
        type: number
      yTotalTicks:
        type: integer
    required:
      - type
      - geom
      - queries
      - shape
      - axes
      - colors
      - note
      - showNoteWhenEmpty
    type: object
  BinaryExpression:
    description: uses binary operators to act on two operands in an expression
    properties:
      left:
        $ref: '#/definitions/Expression'
      operator:
        type: string
      right:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Block:
    description: A set of statements
    properties:
      body:
        description: Block body
        items:
          $ref: '#/definitions/Statement'
        type: array
      type:
        $ref: '#/definitions/NodeType'
    type: object
  BooleanLiteral:
    description: Represents boolean values
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        type: boolean
    type: object
  Bucket:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      description:
        type: string
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      links:
        example:
          labels: /api/v2/buckets/1/labels
          members: /api/v2/buckets/1/members
          org: /api/v2/orgs/2
          owners: /api/v2/buckets/1/owners
          self: /api/v2/buckets/1
          write: /api/v2/write?org=2&amp;bucket=1
        properties:
          labels:
            $ref: '#/definitions/Link'
            description: URL to retrieve labels for this bucket
          members:
            $ref: '#/definitions/Link'
            description: URL to retrieve members that can read this bucket
          org:
            $ref: '#/definitions/Link'
            description: URL to retrieve parent organization for this bucket
          owners:
            $ref: '#/definitions/Link'
            description: URL to retrieve owners that can read and write to this bucket.
          self:
            $ref: '#/definitions/Link'
            description: URL for this bucket
          write:
            $ref: '#/definitions/Link'
            description: URL to write line protocol for this bucket
        readOnly: true
        type: object
      name:
        type: string
      orgID:
        type: string
      retentionRules:
        $ref: '#/definitions/RetentionRules'
      rp:
        type: string
      schemaType:
        $ref: '#/definitions/SchemaType'
        default: implicit
      type:
        default: user
        enum:
          - user
          - system
        readOnly: true
        type: string
      updatedAt:
        format: date-time
        readOnly: true
        type: string
    required:
      - name
      - retentionRules
  Buckets:
    properties:
      buckets:
        items:
          $ref: '#/definitions/Bucket'
        type: array
      links:
        $ref: '#/definitions/Links'
        readOnly: true
    type: object
  BuilderAggregateFunctionType:
    enum:
      - filter
      - group
    type: string
  BuilderConfig:
    properties:
      aggregateWindow:
        properties:
          fillValues:
            type: boolean
          period:
            type: string
        type: object
      buckets:
        items:
          type: string
        type: array
      functions:
        items:
          $ref: '#/definitions/BuilderFunctionsType'
        type: array
      tags:
        items:
          $ref: '#/definitions/BuilderTagsType'
        type: array
    type: object
  BuilderFunctionsType:
    properties:
      name:
        type: string
    type: object
  BuilderTagsType:
    properties:
      aggregateFunctionType:
        $ref: '#/definitions/BuilderAggregateFunctionType'
      key:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  BuiltinStatement:
    description: Declares a builtin identifier and its type
    properties:
      id:
        $ref: '#/definitions/Identifier'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  CallExpression:
    description: Represents a function call
    properties:
      arguments:
        description: Function arguments
        items:
          $ref: '#/definitions/Expression'
        type: array
      callee:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Cell:
    properties:
      h:
        format: int32
        type: integer
      id:
        type: string
      links:
        properties:
          self:
            type: string
          view:
            type: string
        type: object
      viewID:
        description: The reference to a view from the views API.
        type: string
      w:
        format: int32
        type: integer
      x:
        format: int32
        type: integer
      'y':
        format: int32
        type: integer
    type: object
  CellUpdate:
    properties:
      h:
        format: int32
        type: integer
      w:
        format: int32
        type: integer
      x:
        format: int32
        type: integer
      'y':
        format: int32
        type: integer
    type: object
  CellWithViewProperties:
    allOf:
      - $ref: '#/definitions/Cell'
      - properties:
          name:
            type: string
          properties:
            $ref: '#/definitions/ViewProperties'
        type: object
    type: object
  Cells:
    items:
      $ref: '#/definitions/Cell'
    type: array
  CellsWithViewProperties:
    items:
      $ref: '#/definitions/CellWithViewProperties'
    type: array
  Check:
    allOf:
      - $ref: '#/definitions/CheckDiscriminator'
  CheckBase:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      description:
        description: An optional description of the check.
        type: string
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      lastRunError:
        readOnly: true
        type: string
      lastRunStatus:
        enum:
          - failed
          - success
          - canceled
        readOnly: true
        type: string
      latestCompleted:
        description: 'Timestamp of latest scheduled, completed run, RFC3339.'
        format: date-time
        readOnly: true
        type: string
      links:
        example:
          labels: /api/v2/checks/1/labels
          members: /api/v2/checks/1/members
          owners: /api/v2/checks/1/owners
          query: /api/v2/checks/1/query
          self: /api/v2/checks/1
        properties:
          labels:
            $ref: '#/definitions/Link'
            description: URL to retrieve labels for this check
          members:
            $ref: '#/definitions/Link'
            description: URL to retrieve members for this check
          owners:
            $ref: '#/definitions/Link'
            description: URL to retrieve owners for this check
          query:
            $ref: '#/definitions/Link'
            description: URL to retrieve flux script for this check
          self:
            $ref: '#/definitions/Link'
            description: URL for this check
        readOnly: true
        type: object
      name:
        type: string
      orgID:
        description: The ID of the organization that owns this check.
        type: string
      ownerID:
        description: The ID of creator used to create this check.
        readOnly: true
        type: string
      query:
        $ref: '#/definitions/DashboardQuery'
      status:
        $ref: '#/definitions/TaskStatusType'
      taskID:
        description: The ID of the task associated with this check.
        type: string
      updatedAt:
        format: date-time
        readOnly: true
        type: string
    required:
      - name
      - orgID
      - query
  CheckDiscriminator: {}
  CheckPatch:
    properties:
      description:
        type: string
      name:
        type: string
      status:
        enum:
          - active
          - inactive
        type: string
    type: object
  CheckStatusLevel:
    description: The state to record if check matches a criteria.
    enum:
      - UNKNOWN
      - OK
      - INFO
      - CRIT
      - WARN
    type: string
  CheckViewProperties:
    properties:
      check:
        $ref: '#/definitions/Check'
      checkID:
        type: string
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      type:
        enum:
          - check
        type: string
    required:
      - type
      - shape
      - checkID
      - queries
      - colors
    type: object
  Checks:
    properties:
      checks:
        items:
          $ref: '#/definitions/Check'
        type: array
      links:
        $ref: '#/definitions/Links'
  ConditionalExpression:
    description: >-
      Selects one of two expressions, `Alternate` or `Consequent`, depending on
      a third boolean expression, `Test`
    properties:
      alternate:
        $ref: '#/definitions/Expression'
      consequent:
        $ref: '#/definitions/Expression'
      test:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  ConstantVariableProperties:
    properties:
      type:
        enum:
          - constant
        type: string
      values:
        items:
          type: string
        type: array
  CreateCell:
    properties:
      h:
        format: int32
        type: integer
      name:
        type: string
      usingView:
        description: Makes a copy of the provided view.
        type: string
      w:
        format: int32
        type: integer
      x:
        format: int32
        type: integer
      'y':
        format: int32
        type: integer
    type: object
  CreateDashboardRequest:
    properties:
      description:
        description: The user-facing description of the dashboard.
        type: string
      name:
        description: The user-facing name of the dashboard.
        type: string
      orgID:
        description: The ID of the organization that owns the dashboard.
        type: string
    required:
      - orgID
      - name
  CustomCheck:
    allOf:
      - $ref: '#/definitions/CheckBase'
      - properties:
          type:
            enum:
              - custom
            type: string
        required:
          - type
        type: object
  DBRP:
    properties:
      bucketID:
        description: the bucket ID used as target for the translation.
        type: string
      database:
        description: InfluxDB v1 database
        type: string
      default:
        description: >-
          Specify if this mapping represents the default retention policy for
          the database specificed.
        type: boolean
      id:
        description: the mapping identifier
        readOnly: true
        type: string
      links:
        $ref: '#/definitions/Links'
      org:
        description: the organization that owns this mapping.
        type: string
      orgID:
        description: the organization ID that owns this mapping.
        type: string
      retention_policy:
        description: InfluxDB v1 retention policy
        type: string
    type: object
  DBRPUpdate:
    properties:
      database:
        description: InfluxDB v1 database
        type: string
      default:
        type: boolean
      links:
        $ref: '#/definitions/Links'
      retention_policy:
        description: InfluxDB v1 retention policy
        type: string
  DBRPs:
    properties:
      content:
        items:
          $ref: '#/definitions/DBRP'
        type: array
  Dashboard:
    allOf:
      - $ref: '#/definitions/CreateDashboardRequest'
      - properties:
          cells:
            $ref: '#/definitions/Cells'
          id:
            readOnly: true
            type: string
          labels:
            $ref: '#/definitions/Labels'
          links:
            example:
              cells: /api/v2/dashboards/1/cells
              labels: /api/v2/dashboards/1/labels
              members: /api/v2/dashboards/1/members
              org: /api/v2/labels/1
              owners: /api/v2/dashboards/1/owners
              self: /api/v2/dashboards/1
            properties:
              cells:
                $ref: '#/definitions/Link'
              labels:
                $ref: '#/definitions/Link'
              members:
                $ref: '#/definitions/Link'
              org:
                $ref: '#/definitions/Link'
              owners:
                $ref: '#/definitions/Link'
              self:
                $ref: '#/definitions/Link'
            type: object
          meta:
            properties:
              createdAt:
                format: date-time
                type: string
              updatedAt:
                format: date-time
                type: string
            type: object
        type: object
    type: object
  DashboardColor:
    description: Defines an encoding of data value into color space.
    properties:
      hex:
        description: The hex number of the color
        maxLength: 7
        minLength: 7
        type: string
      id:
        description: The unique ID of the view color.
        type: string
      name:
        description: The user-facing name of the hex color.
        type: string
      type:
        description: Type is how the color is used.
        enum:
          - min
          - max
          - threshold
          - scale
          - text
          - background
        type: string
      value:
        description: The data value mapped to this color.
        format: float
        type: number
    required:
      - id
      - type
      - hex
      - name
      - value
    type: object
  DashboardQuery:
    properties:
      builderConfig:
        $ref: '#/definitions/BuilderConfig'
      editMode:
        $ref: '#/definitions/QueryEditMode'
      name:
        type: string
      text:
        description: The text of the Flux query.
        type: string
    type: object
  DashboardWithViewProperties:
    allOf:
      - $ref: '#/definitions/CreateDashboardRequest'
      - properties:
          cells:
            $ref: '#/definitions/CellsWithViewProperties'
          id:
            readOnly: true
            type: string
          labels:
            $ref: '#/definitions/Labels'
          links:
            example:
              cells: /api/v2/dashboards/1/cells
              labels: /api/v2/dashboards/1/labels
              members: /api/v2/dashboards/1/members
              org: /api/v2/labels/1
              owners: /api/v2/dashboards/1/owners
              self: /api/v2/dashboards/1
            properties:
              cells:
                $ref: '#/definitions/Link'
              labels:
                $ref: '#/definitions/Link'
              members:
                $ref: '#/definitions/Link'
              org:
                $ref: '#/definitions/Link'
              owners:
                $ref: '#/definitions/Link'
              self:
                $ref: '#/definitions/Link'
            type: object
          meta:
            properties:
              createdAt:
                format: date-time
                type: string
              updatedAt:
                format: date-time
                type: string
            type: object
        type: object
    type: object
  Dashboards:
    properties:
      dashboards:
        items:
          $ref: '#/definitions/Dashboard'
        type: array
      links:
        $ref: '#/definitions/Links'
    type: object
  DateTimeLiteral:
    description: >-
      Represents an instant in time with nanosecond precision using the syntax
      of golang's RFC3339 Nanosecond variant
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        format: date-time
        type: string
    type: object
  DeadmanCheck:
    allOf:
      - $ref: '#/definitions/CheckBase'
      - properties:
          every:
            description: Check repetition interval.
            type: string
          level:
            $ref: '#/definitions/CheckStatusLevel'
          offset:
            description: 'Duration to delay after the schedule, before executing check.'
            type: string
          reportZero:
            description: 'If only zero values reported since time, trigger an alert'
            type: boolean
          staleTime:
            description: >-
              String duration for time that a series is considered stale and
              should not trigger deadman.
            type: string
          statusMessageTemplate:
            description: The template used to generate and write a status message.
            type: string
          tags:
            description: List of tags to write to each status.
            items:
              properties:
                key:
                  type: string
                value:
                  type: string
              type: object
            type: array
          timeSince:
            description: String duration before deadman triggers.
            type: string
          type:
            enum:
              - deadman
            type: string
        required:
          - type
        type: object
  DecimalPlaces:
    description: >-
      Indicates whether decimal places should be enforced, and how many digits
      it should show.
    properties:
      digits:
        description: The number of digits after decimal to display
        format: int32
        type: integer
      isEnforced:
        description: Indicates whether decimal point setting should be enforced
        type: boolean
    type: object
  DeletePredicateRequest:
    description: The delete predicate request.
    properties:
      predicate:
        description: InfluxQL-like delete statement
        example: tag1="value1" and (tag2="value2" and tag3!="value3")
        type: string
      start:
        description: RFC3339Nano
        format: date-time
        type: string
      stop:
        description: RFC3339Nano
        format: date-time
        type: string
    required:
      - start
      - stop
    type: object
  Dialect:
    description: >-
      Dialect are options to change the default CSV output format;
      https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
    properties:
      annotations:
        description: 'https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns'
        items:
          enum:
            - group
            - datatype
            - default
          type: string
        type: array
        uniqueItems: true
      commentPrefix:
        default: '#'
        description: Character prefixed to comment strings
        maxLength: 1
        minLength: 0
        type: string
      dateTimeFormat:
        default: RFC3339
        description: Format of timestamps
        enum:
          - RFC3339
          - RFC3339Nano
        type: string
      delimiter:
        default: ','
        description: 'Separator between cells; the default is ,'
        maxLength: 1
        minLength: 1
        type: string
      header:
        default: true
        description: 'If true, the results will contain a header row'
        type: boolean
    type: object
  DictExpression:
    description: Used to create and directly specify the elements of a dictionary
    properties:
      elements:
        description: Elements of the dictionary
        items:
          $ref: '#/definitions/DictItem'
        type: array
      type:
        $ref: '#/definitions/NodeType'
    type: object
  DictItem:
    description: A key/value pair in a dictionary
    properties:
      key:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
      val:
        $ref: '#/definitions/Expression'
    type: object
  Document:
    properties:
      content:
        type: object
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      links:
        example:
          self: /api/v2/documents/templates/1
        properties:
          self:
            $ref: '#/definitions/Link'
            description: The document URL.
        readOnly: true
        type: object
      meta:
        $ref: '#/definitions/DocumentMeta'
    required:
      - id
      - meta
      - content
    type: object
  DocumentCreate:
    properties:
      content:
        type: object
      labels:
        description: An array of label IDs to be added as labels to the document.
        items:
          type: string
        type: array
      meta:
        $ref: '#/definitions/DocumentMeta'
      org:
        description: The organization Name. Specify either `orgID` or `org`.
        type: string
      orgID:
        description: The organization Name. Specify either `orgID` or `org`.
        type: string
    required:
      - meta
      - content
    type: object
  DocumentListEntry:
    properties:
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      links:
        example:
          self: /api/v2/documents/templates/1
        properties:
          self:
            $ref: '#/definitions/Link'
            description: The document URL.
        readOnly: true
        type: object
      meta:
        $ref: '#/definitions/DocumentMeta'
    required:
      - id
      - meta
    type: object
  DocumentMeta:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      description:
        type: string
      name:
        type: string
      templateID:
        type: string
      type:
        type: string
      updatedAt:
        format: date-time
        readOnly: true
        type: string
      version:
        type: string
    required:
      - name
      - version
    type: object
  DocumentUpdate:
    properties:
      content:
        type: object
      meta:
        $ref: '#/definitions/DocumentMeta'
    type: object
  Documents:
    properties:
      documents:
        items:
          $ref: '#/definitions/DocumentListEntry'
        type: array
    type: object
  Duration:
    description: >-
      A pair consisting of length of time and the unit of time measured. It is
      the atomic unit from which all duration literals are composed.
    properties:
      magnitude:
        type: integer
      type:
        $ref: '#/definitions/NodeType'
      unit:
        type: string
    type: object
  DurationLiteral:
    description: >-
      Represents the elapsed time between two instants as an int64 nanosecond
      count with syntax of golang's time.Duration
    properties:
      type:
        $ref: '#/definitions/NodeType'
      values:
        description: Duration values
        items:
          $ref: '#/definitions/Duration'
        type: array
    type: object
  Error:
    properties:
      code:
        description: code is the machine-readable error code.
        enum:
          - internal error
          - not found
          - conflict
          - invalid
          - unprocessable entity
          - empty value
          - unavailable
          - forbidden
          - too many requests
          - unauthorized
          - method not allowed
          - request too large
          - unsupported media type
        readOnly: true
        type: string
      err:
        description: >-
          err is a stack of errors that occurred during processing of the
          request. Useful for debugging.
        readOnly: true
        type: string
      message:
        description: message is a human-readable message.
        readOnly: true
        type: string
      op:
        description: >-
          op describes the logical code operation during error. Useful for
          debugging.
        readOnly: true
        type: string
    required:
      - code
      - message
  Expression: {}
  ExpressionStatement:
    description: >-
      May consist of an expression that does not return a value and is executed
      solely for its side-effects
    properties:
      expression:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Field:
    properties:
      alias:
        description: >-
          Alias overrides the field name in the returned response.  Applies only
          if type is `func`
        type: string
      args:
        description: Args are the arguments to the function
        items:
          $ref: '#/definitions/Field'
        type: array
      type:
        description: >-
          `type` describes the field type. `func` is a function. `field` is a
          field reference.
        enum:
          - func
          - field
          - integer
          - number
          - regex
          - wildcard
        type: string
      value:
        description: >-
          value is the value of the field.  Meaning of the value is implied by
          the `type` key
        type: string
    type: object
  File:
    description: Represents a source from a single file
    properties:
      body:
        description: List of Flux statements
        items:
          $ref: '#/definitions/Statement'
        type: array
      imports:
        description: A list of package imports
        items:
          $ref: '#/definitions/ImportDeclaration'
        type: array
      name:
        description: The name of the file.
        type: string
      package:
        $ref: '#/definitions/PackageClause'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Flags:
    additionalProperties: true
    type: object
  FloatLiteral:
    description: >-
      Represents floating point numbers according to the double representations
      defined by the IEEE-754-1985
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        type: number
    type: object
  FluxResponse:
    description: Rendered flux that backs the check or notification.
    properties:
      flux:
        type: string
  FluxSuggestion:
    properties:
      name:
        type: string
      params:
        additionalProperties:
          type: string
        type: object
    type: object
  FluxSuggestions:
    properties:
      funcs:
        items:
          $ref: '#/definitions/FluxSuggestion'
        type: array
    type: object
  FunctionExpression:
    description: Function expression
    properties:
      body:
        $ref: '#/definitions/Node'
      params:
        description: Function parameters
        items:
          $ref: '#/definitions/Property'
        type: array
      type:
        $ref: '#/definitions/NodeType'
    type: object
  GaugeViewProperties:
    properties:
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      decimalPlaces:
        $ref: '#/definitions/DecimalPlaces'
      note:
        type: string
      prefix:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      suffix:
        type: string
      tickPrefix:
        type: string
      tickSuffix:
        type: string
      type:
        enum:
          - gauge
        type: string
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - prefix
      - tickPrefix
      - suffix
      - tickSuffix
      - decimalPlaces
    type: object
  GeoCircleViewLayer:
    allOf:
      - $ref: '#/definitions/GeoViewLayerProperties'
      - properties:
          colorDimension:
            $ref: '#/definitions/Axis'
          colorField:
            description: Circle color field
            type: string
          colors:
            description: Colors define color encoding of data into a visualization
            items:
              $ref: '#/definitions/DashboardColor'
            type: array
          interpolateColors:
            description: Interpolate circle color based on displayed value
            type: boolean
          radius:
            description: Maximum radius size in pixels
            type: integer
          radiusDimension:
            $ref: '#/definitions/Axis'
          radiusField:
            description: Radius field
            type: string
        required:
          - radiusField
          - radiusDimension
          - colorField
          - colorDimension
          - colors
        type: object
  GeoHeatMapViewLayer:
    allOf:
      - $ref: '#/definitions/GeoViewLayerProperties'
      - properties:
          blur:
            description: Blur for heatmap points
            type: integer
          colors:
            description: Colors define color encoding of data into a visualization
            items:
              $ref: '#/definitions/DashboardColor'
            type: array
          intensityDimension:
            $ref: '#/definitions/Axis'
          intensityField:
            description: Intensity field
            type: string
          radius:
            description: Radius size in pixels
            type: integer
        required:
          - intensityField
          - intensityDimension
          - radius
          - blur
          - colors
        type: object
  GeoPointMapViewLayer:
    allOf:
      - $ref: '#/definitions/GeoViewLayerProperties'
      - properties:
          colorDimension:
            $ref: '#/definitions/Axis'
          colorField:
            description: Marker color field
            type: string
          colors:
            description: Colors define color encoding of data into a visualization
            items:
              $ref: '#/definitions/DashboardColor'
            type: array
          isClustered:
            description: Cluster close markers together
            type: boolean
        required:
          - colorField
          - colorDimension
          - colors
        type: object
  GeoTrackMapViewLayer:
    allOf:
      - $ref: '#/definitions/GeoViewLayerProperties'
      - required:
          - trackWidth
          - speed
          - randomColors
          - trackPointVisualization
        type: object
    properties:
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      randomColors:
        description: Assign different colors to different tracks
        type: boolean
      speed:
        description: Speed of the track animation
        type: integer
      trackWidth:
        description: Width of the track
        type: integer
  GeoViewLayer:
    type: object
  GeoViewLayerProperties:
    properties:
      type:
        enum:
          - heatmap
          - circleMap
          - pointMap
          - trackMap
        type: string
    required:
      - type
    type: object
  GeoViewProperties:
    properties:
      allowPanAndZoom:
        default: true
        description: 'If true, map zoom and pan controls are enabled on the dashboard view'
        type: boolean
      center:
        description: Coordinates of the center of the map
        properties:
          lat:
            description: Latitude of the center of the map
            format: double
            type: number
          lon:
            description: Longitude of the center of the map
            format: double
            type: number
        required:
          - lat
          - lon
        type: object
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      detectCoordinateFields:
        default: true
        description: >-
          If true, search results get automatically regroupped so that lon,lat
          and value are treated as columns
        type: boolean
      layers:
        description: List of individual layers shown in the map
        items:
          $ref: '#/definitions/GeoViewLayer'
        type: array
      mapStyle:
        description: 'Define map type - regular, satellite etc.'
        type: string
      note:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      type:
        enum:
          - geo
        type: string
      zoom:
        description: Zoom level used for initial display of the map
        format: double
        maximum: 28
        minimum: 1
        type: number
    required:
      - type
      - shape
      - queries
      - note
      - showNoteWhenEmpty
      - center
      - zoom
      - allowPanAndZoom
      - detectCoordinateFields
      - layers
    type: object
  GreaterThreshold:
    allOf:
      - $ref: '#/definitions/ThresholdBase'
      - properties:
          type:
            enum:
              - greater
            type: string
          value:
            format: float
            type: number
        required:
          - type
          - value
        type: object
  HTTPNotificationEndpoint:
    allOf:
      - $ref: '#/definitions/NotificationEndpointBase'
      - properties:
          authMethod:
            enum:
              - none
              - basic
              - bearer
            type: string
          contentTemplate:
            type: string
          headers:
            additionalProperties:
              type: string
            description: Customized headers.
            type: object
          method:
            enum:
              - POST
              - GET
              - PUT
            type: string
          password:
            type: string
          token:
            type: string
          url:
            type: string
          username:
            type: string
        required:
          - url
          - authMethod
          - method
        type: object
    type: object
  HTTPNotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleBase'
      - $ref: '#/definitions/HTTPNotificationRuleBase'
  HTTPNotificationRuleBase:
    properties:
      type:
        enum:
          - http
        type: string
      url:
        type: string
    required:
      - type
    type: object
  HealthCheck:
    properties:
      checks:
        items:
          $ref: '#/definitions/HealthCheck'
        type: array
      commit:
        type: string
      message:
        type: string
      name:
        type: string
      status:
        enum:
          - pass
          - fail
        type: string
      version:
        type: string
    required:
      - name
      - status
    type: object
  HeatmapViewProperties:
    properties:
      binSize:
        type: number
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          type: string
        type: array
      generateXAxisTicks:
        items:
          type: string
        type: array
      generateYAxisTicks:
        items:
          type: string
        type: array
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      note:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      timeFormat:
        type: string
      type:
        enum:
          - heatmap
        type: string
      xAxisLabel:
        type: string
      xColumn:
        type: string
      xDomain:
        items:
          type: number
        maxItems: 2
        type: array
      xPrefix:
        type: string
      xSuffix:
        type: string
      xTickStart:
        format: float
        type: number
      xTickStep:
        format: float
        type: number
      xTotalTicks:
        type: integer
      yAxisLabel:
        type: string
      yColumn:
        type: string
      yDomain:
        items:
          type: number
        maxItems: 2
        type: array
      yPrefix:
        type: string
      ySuffix:
        type: string
      yTickStart:
        format: float
        type: number
      yTickStep:
        format: float
        type: number
      yTotalTicks:
        type: integer
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - xColumn
      - yColumn
      - xDomain
      - yDomain
      - xAxisLabel
      - yAxisLabel
      - xPrefix
      - yPrefix
      - xSuffix
      - ySuffix
      - binSize
    type: object
  HistogramViewProperties:
    properties:
      binCount:
        type: integer
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      fillColumns:
        items:
          type: string
        type: array
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      note:
        type: string
      position:
        enum:
          - overlaid
          - stacked
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      type:
        enum:
          - histogram
        type: string
      xAxisLabel:
        type: string
      xColumn:
        type: string
      xDomain:
        items:
          format: float
          type: number
        type: array
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - xColumn
      - fillColumns
      - xDomain
      - xAxisLabel
      - position
      - binCount
    type: object
  Identifier:
    description: A valid Flux identifier
    properties:
      name:
        type: string
      type:
        $ref: '#/definitions/NodeType'
    type: object
  ImportDeclaration:
    description: Declares a package import
    properties:
      as:
        $ref: '#/definitions/Identifier'
      path:
        $ref: '#/definitions/StringLiteral'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  IndexExpression:
    description: Represents indexing into an array
    properties:
      array:
        $ref: '#/definitions/Expression'
      index:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  InfluxQLQuery:
    description: Query influx using the InfluxQL language
    properties:
      bucket:
        description: >-
          Bucket is to be used instead of the database and retention policy
          specified in the InfluxQL query.
        type: string
      query:
        description: InfluxQL query execute.
        type: string
      type:
        description: The type of query. Must be "influxql".
        enum:
          - influxql
        type: string
    required:
      - query
    type: object
  IntegerLiteral:
    description: Represents integer numbers
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        type: string
    type: object
  IsOnboarding:
    properties:
      allowed:
        description: >-
          True means that the influxdb instance has NOT had initial setup; false
          means that the database has been setup.
        type: boolean
    type: object
  Label:
    properties:
      id:
        readOnly: true
        type: string
      name:
        type: string
      orgID:
        readOnly: true
        type: string
      properties:
        additionalProperties:
          type: string
        description: >-
          Key/Value pairs associated with this label. Keys can be removed by
          sending an update with an empty value.
        example:
          color: ffb3b3
          description: this is a description
        type: object
    type: object
  LabelCreateRequest:
    properties:
      name:
        type: string
      orgID:
        type: string
      properties:
        additionalProperties:
          type: string
        description: >-
          Key/Value pairs associated with this label. Keys can be removed by
          sending an update with an empty value.
        example:
          color: ffb3b3
          description: this is a description
        type: object
    required:
      - orgID
      - name
    type: object
  LabelMapping:
    properties:
      labelID:
        type: string
    type: object
  LabelResponse:
    properties:
      label:
        $ref: '#/definitions/Label'
      links:
        $ref: '#/definitions/Links'
    type: object
  LabelUpdate:
    properties:
      name:
        type: string
      properties:
        additionalProperties:
          type: string
        description: >-
          Key/Value pairs associated with this label. Keys can be removed by
          sending an update with an empty value.
        example:
          color: ffb3b3
          description: this is a description
        type: object
    type: object
  Labels:
    items:
      $ref: '#/definitions/Label'
    type: array
  LabelsResponse:
    properties:
      labels:
        $ref: '#/definitions/Labels'
      links:
        $ref: '#/definitions/Links'
    type: object
  LanguageRequest:
    description: Flux query to be analyzed.
    properties:
      query:
        description: Flux query script to be analyzed
        type: string
    required:
      - query
    type: object
  LesserThreshold:
    allOf:
      - $ref: '#/definitions/ThresholdBase'
      - properties:
          type:
            enum:
              - lesser
            type: string
          value:
            format: float
            type: number
        required:
          - type
          - value
        type: object
  LinePlusSingleStatProperties:
    properties:
      axes:
        $ref: '#/definitions/Axes'
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      decimalPlaces:
        $ref: '#/definitions/DecimalPlaces'
      generateXAxisTicks:
        items:
          type: string
        type: array
      generateYAxisTicks:
        items:
          type: string
        type: array
      hoverDimension:
        enum:
          - auto
          - x
          - 'y'
          - xy
        type: string
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      note:
        type: string
      position:
        enum:
          - overlaid
          - stacked
        type: string
      prefix:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shadeBelow:
        type: boolean
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      staticLegend:
        $ref: '#/definitions/StaticLegend'
      suffix:
        type: string
      timeFormat:
        type: string
      type:
        enum:
          - line-plus-single-stat
        type: string
      xColumn:
        type: string
      xTickStart:
        format: float
        type: number
      xTickStep:
        format: float
        type: number
      xTotalTicks:
        type: integer
      yColumn:
        type: string
      yTickStart:
        format: float
        type: number
      yTickStep:
        format: float
        type: number
      yTotalTicks:
        type: integer
    required:
      - type
      - queries
      - shape
      - axes
      - colors
      - note
      - showNoteWhenEmpty
      - prefix
      - suffix
      - decimalPlaces
      - position
    type: object
  LineProtocolError:
    properties:
      code:
        description: Code is the machine-readable error code.
        enum:
          - internal error
          - not found
          - conflict
          - invalid
          - empty value
          - unavailable
        readOnly: true
        type: string
      err:
        description: >-
          Err is a stack of errors that occurred during processing of the
          request. Useful for debugging.
        readOnly: true
        type: string
      line:
        description: First line within sent body containing malformed data
        format: int32
        readOnly: true
        type: integer
      message:
        description: Message is a human-readable message.
        readOnly: true
        type: string
      op:
        description: >-
          Op describes the logical code operation during error. Useful for
          debugging.
        readOnly: true
        type: string
    required:
      - code
      - message
      - op
      - err
  LineProtocolLengthError:
    properties:
      code:
        description: Code is the machine-readable error code.
        enum:
          - invalid
        readOnly: true
        type: string
      maxLength:
        description: Max length in bytes for a body of line-protocol.
        format: int32
        readOnly: true
        type: integer
      message:
        description: Message is a human-readable message.
        readOnly: true
        type: string
    required:
      - code
      - message
      - maxLength
  Link:
    description: URI of resource.
    format: uri
    readOnly: true
    type: string
  Links:
    properties:
      next:
        $ref: '#/definitions/Link'
      prev:
        $ref: '#/definitions/Link'
      self:
        $ref: '#/definitions/Link'
    required:
      - self
    type: object
  LogEvent:
    properties:
      message:
        description: A description of the event that occurred.
        example: Halt and catch fire
        readOnly: true
        type: string
      runID:
        description: the ID of the task that logged
        readOnly: true
        type: string
      time:
        description: 'Time event occurred, RFC3339Nano.'
        format: date-time
        readOnly: true
        type: string
    type: object
  LogicalExpression:
    description: >-
      Represents the rule conditions that collectively evaluate to either true
      or false
    properties:
      left:
        $ref: '#/definitions/Expression'
      operator:
        type: string
      right:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Logs:
    properties:
      events:
        items:
          $ref: '#/definitions/LogEvent'
        readOnly: true
        type: array
    type: object
  MapVariableProperties:
    properties:
      type:
        enum:
          - map
        type: string
      values:
        additionalProperties:
          type: string
        type: object
  MarkdownViewProperties:
    properties:
      note:
        type: string
      shape:
        enum:
          - chronograf-v2
        type: string
      type:
        enum:
          - markdown
        type: string
    required:
      - type
      - shape
      - note
    type: object
  MemberAssignment:
    description: Object property assignment
    properties:
      init:
        $ref: '#/definitions/Expression'
      member:
        $ref: '#/definitions/MemberExpression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  MemberExpression:
    description: Represents accessing a property of an object
    properties:
      object:
        $ref: '#/definitions/Expression'
      property:
        $ref: '#/definitions/PropertyKey'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  MosaicViewProperties:
    properties:
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          type: string
        type: array
      fillColumns:
        items:
          type: string
        type: array
      generateXAxisTicks:
        items:
          type: string
        type: array
      hoverDimension:
        enum:
          - auto
          - x
          - 'y'
          - xy
        type: string
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      note:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      timeFormat:
        type: string
      type:
        enum:
          - mosaic
        type: string
      xAxisLabel:
        type: string
      xColumn:
        type: string
      xDomain:
        items:
          type: number
        maxItems: 2
        type: array
      xPrefix:
        type: string
      xSuffix:
        type: string
      xTickStart:
        format: float
        type: number
      xTickStep:
        format: float
        type: number
      xTotalTicks:
        type: integer
      yAxisLabel:
        type: string
      yDomain:
        items:
          type: number
        maxItems: 2
        type: array
      yLabelColumnSeparator:
        type: string
      yLabelColumns:
        items:
          type: string
        type: array
      yPrefix:
        type: string
      ySeriesColumns:
        items:
          type: string
        type: array
      ySuffix:
        type: string
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - xColumn
      - ySeriesColumns
      - fillColumns
      - xDomain
      - yDomain
      - xAxisLabel
      - yAxisLabel
      - xPrefix
      - yPrefix
      - xSuffix
      - ySuffix
    type: object
  Node: {}
  NodeType:
    description: Type of AST node
    type: string
  NotificationEndpoint:
    allOf:
      - $ref: '#/definitions/NotificationEndpointDiscriminator'
  NotificationEndpointBase:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      description:
        description: An optional description of the notification endpoint.
        type: string
      id:
        type: string
      labels:
        $ref: '#/definitions/Labels'
      links:
        example:
          labels: /api/v2/notificationEndpoints/1/labels
          members: /api/v2/notificationEndpoints/1/members
          owners: /api/v2/notificationEndpoints/1/owners
          self: /api/v2/notificationEndpoints/1
        properties:
          labels:
            $ref: '#/definitions/Link'
            description: URL to retrieve labels for this endpoint.
          members:
            $ref: '#/definitions/Link'
            description: URL to retrieve members for this endpoint.
          owners:
            $ref: '#/definitions/Link'
            description: URL to retrieve owners for this endpoint.
          self:
            $ref: '#/definitions/Link'
            description: URL for this endpoint.
        readOnly: true
        type: object
      name:
        type: string
      orgID:
        type: string
      status:
        default: active
        description: The status of the endpoint.
        enum:
          - active
          - inactive
        type: string
      type:
        $ref: '#/definitions/NotificationEndpointType'
      updatedAt:
        format: date-time
        readOnly: true
        type: string
      userID:
        type: string
    required:
      - type
      - name
    type: object
  NotificationEndpointDiscriminator: {}
  NotificationEndpointType:
    enum:
      - slack
      - pagerduty
      - http
      - telegram
    type: string
  NotificationEndpointUpdate:
    properties:
      description:
        type: string
      name:
        type: string
      status:
        enum:
          - active
          - inactive
        type: string
    type: object
  NotificationEndpoints:
    properties:
      links:
        $ref: '#/definitions/Links'
      notificationEndpoints:
        items:
          $ref: '#/definitions/NotificationEndpoint'
        type: array
  NotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleDiscriminator'
  NotificationRuleBase:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      description:
        description: An optional description of the notification rule.
        type: string
      endpointID:
        type: string
      every:
        description: The notification repetition interval.
        type: string
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      lastRunError:
        readOnly: true
        type: string
      lastRunStatus:
        enum:
          - failed
          - success
          - canceled
        readOnly: true
        type: string
      latestCompleted:
        description: 'Timestamp of latest scheduled, completed run, RFC3339.'
        format: date-time
        readOnly: true
        type: string
      limit:
        description: >-
          Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt;
          seconds. If set, limitEvery cannot be empty.
        type: integer
      limitEvery:
        description: >-
          Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt;
          seconds. If set, limit cannot be empty.
        type: integer
      links:
        example:
          labels: /api/v2/notificationRules/1/labels
          members: /api/v2/notificationRules/1/members
          owners: /api/v2/notificationRules/1/owners
          query: /api/v2/notificationRules/1/query
          self: /api/v2/notificationRules/1
        properties:
          labels:
            $ref: '#/definitions/Link'
            description: URL to retrieve labels for this notification rule.
          members:
            $ref: '#/definitions/Link'
            description: URL to retrieve members for this notification rule.
          owners:
            $ref: '#/definitions/Link'
            description: URL to retrieve owners for this notification rule.
          query:
            $ref: '#/definitions/Link'
            description: URL to retrieve flux script for this notification rule.
          self:
            $ref: '#/definitions/Link'
            description: URL for this endpoint.
        readOnly: true
        type: object
      name:
        description: Human-readable name describing the notification rule.
        type: string
      offset:
        description: 'Duration to delay after the schedule, before executing check.'
        type: string
      orgID:
        description: The ID of the organization that owns this notification rule.
        type: string
      ownerID:
        description: The ID of creator used to create this notification rule.
        readOnly: true
        type: string
      runbookLink:
        type: string
      sleepUntil:
        type: string
      status:
        $ref: '#/definitions/TaskStatusType'
      statusRules:
        description: List of status rules the notification rule attempts to match.
        items:
          $ref: '#/definitions/StatusRule'
        minItems: 1
        type: array
      tagRules:
        description: List of tag rules the notification rule attempts to match.
        items:
          $ref: '#/definitions/TagRule'
        type: array
      taskID:
        description: The ID of the task associated with this notification rule.
        type: string
      updatedAt:
        format: date-time
        readOnly: true
        type: string
    required:
      - orgID
      - status
      - name
      - statusRules
      - endpointID
    type: object
  NotificationRuleDiscriminator: {}
  NotificationRuleUpdate:
    properties:
      description:
        type: string
      name:
        type: string
      status:
        enum:
          - active
          - inactive
        type: string
    type: object
  NotificationRules:
    properties:
      links:
        $ref: '#/definitions/Links'
      notificationRules:
        items:
          $ref: '#/definitions/NotificationRule'
        type: array
  ObjectExpression:
    description: Allows the declaration of an anonymous object within a declaration
    properties:
      properties:
        description: Object properties
        items:
          $ref: '#/definitions/Property'
        type: array
      type:
        $ref: '#/definitions/NodeType'
    type: object
  OnboardingRequest:
    properties:
      bucket:
        type: string
      org:
        type: string
      password:
        type: string
      retentionPeriodHrs:
        description: >
          Retention period *in nanoseconds* for the new bucket. This key's name
          has been misleading since OSS 2.0 GA, please transition to use
          `retentionPeriodSeconds`
        type: integer
        x-deprecated: true
      retentionPeriodSeconds:
        format: int64
        type: integer
      token:
        description: >
          Authentication token to set on the initial user. If not specified, the
          server will generate a token.
        type: string
      username:
        type: string
    required:
      - username
      - org
      - bucket
    type: object
  OnboardingResponse:
    properties:
      auth:
        $ref: '#/definitions/Authorization'
      bucket:
        $ref: '#/definitions/Bucket'
      org:
        $ref: '#/definitions/Organization'
      user:
        $ref: '#/definitions/UserResponse'
    type: object
  OptionStatement:
    description: A single variable declaration
    properties:
      assignment: {}
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Organization:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      description:
        type: string
      id:
        readOnly: true
        type: string
      links:
        example:
          buckets: /api/v2/buckets?org=myorg
          dashboards: /api/v2/dashboards?org=myorg
          labels: /api/v2/orgs/1/labels
          members: /api/v2/orgs/1/members
          owners: /api/v2/orgs/1/owners
          secrets: /api/v2/orgs/1/secrets
          self: /api/v2/orgs/1
          tasks: /api/v2/tasks?org=myorg
        properties:
          buckets:
            $ref: '#/definitions/Link'
          dashboards:
            $ref: '#/definitions/Link'
          labels:
            $ref: '#/definitions/Link'
          members:
            $ref: '#/definitions/Link'
          owners:
            $ref: '#/definitions/Link'
          secrets:
            $ref: '#/definitions/Link'
          self:
            $ref: '#/definitions/Link'
          tasks:
            $ref: '#/definitions/Link'
        readOnly: true
        type: object
      name:
        type: string
      status:
        default: active
        description: If inactive the organization is inactive.
        enum:
          - active
          - inactive
        type: string
      updatedAt:
        format: date-time
        readOnly: true
        type: string
    required:
      - name
  Organizations:
    properties:
      links:
        $ref: '#/definitions/Links'
      orgs:
        items:
          $ref: '#/definitions/Organization'
        type: array
    type: object
  Package:
    description: Represents a complete package source tree.
    properties:
      files:
        description: Package files
        items:
          $ref: '#/definitions/File'
        type: array
      package:
        description: Package name
        type: string
      path:
        description: Package import path
        type: string
      type:
        $ref: '#/definitions/NodeType'
    type: object
  PackageClause:
    description: Defines a package identifier
    properties:
      name:
        $ref: '#/definitions/Identifier'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  PagerDutyNotificationEndpoint:
    allOf:
      - $ref: '#/definitions/NotificationEndpointBase'
      - properties:
          clientURL:
            type: string
          routingKey:
            type: string
        required:
          - routingKey
        type: object
    type: object
  PagerDutyNotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleBase'
      - $ref: '#/definitions/PagerDutyNotificationRuleBase'
  PagerDutyNotificationRuleBase:
    properties:
      messageTemplate:
        type: string
      type:
        enum:
          - pagerduty
        type: string
    required:
      - type
      - messageTemplate
    type: object
  ParenExpression:
    description: Represents an expression wrapped in parenthesis
    properties:
      expression:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  PasswordResetBody:
    properties:
      password:
        type: string
    required:
      - password
  PatchBucketRequest:
    description: Updates to an existing bucket resource.
    properties:
      description:
        type: string
      name:
        type: string
      retentionRules:
        $ref: '#/definitions/PatchRetentionRules'
    type: object
  PatchOrganizationRequest:
    properties:
      description:
        description: New description to set on the organization
        type: string
      name:
        description: New name to set on the organization
        type: string
    type: object
  PatchRetentionRule:
    description: Updates to a rule to expire or retain data.
    properties:
      everySeconds:
        description: >-
          Duration in seconds for how long data will be kept in the database. 0
          means infinite.
        example: 86400
        format: int64
        minimum: 0
        type: integer
      shardGroupDurationSeconds:
        description: Shard duration measured in seconds.
        format: int64
        type: integer
      type:
        default: expire
        enum:
          - expire
        type: string
    required:
      - type
    type: object
  PatchRetentionRules:
    description: Updates to rules to expire or retain data. No rules means no updates.
    items:
      $ref: '#/definitions/PatchRetentionRule'
    type: array
  Permission:
    properties:
      action:
        enum:
          - read
          - write
        type: string
      resource:
        $ref: '#/definitions/Resource'
    required:
      - action
      - resource
  PipeExpression:
    description: Call expression with pipe argument
    properties:
      argument:
        $ref: '#/definitions/Expression'
      call:
        $ref: '#/definitions/CallExpression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  PipeLiteral:
    description: >-
      Represents a specialized literal value, indicating the left hand value of
      a pipe expression
    properties:
      type:
        $ref: '#/definitions/NodeType'
    type: object
  PostBucketRequest:
    properties:
      description:
        type: string
      name:
        type: string
      orgID:
        type: string
      retentionRules:
        $ref: '#/definitions/RetentionRules'
      rp:
        type: string
      schemaType:
        $ref: '#/definitions/SchemaType'
        default: implicit
    required:
      - orgID
      - name
      - retentionRules
  PostCheck:
    allOf:
      - $ref: '#/definitions/CheckDiscriminator'
  PostNotificationEndpoint:
    allOf:
      - $ref: '#/definitions/NotificationEndpointDiscriminator'
  PostNotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleDiscriminator'
  PostOrganizationRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
      - name
    type: object
  Property:
    description: The value associated with a key
    properties:
      key:
        $ref: '#/definitions/PropertyKey'
      type:
        $ref: '#/definitions/NodeType'
      value:
        $ref: '#/definitions/Expression'
    type: object
  PropertyKey: {}
  Query:
    description: Query influx using the Flux language
    properties:
      dialect:
        $ref: '#/definitions/Dialect'
      extern:
        $ref: '#/definitions/File'
      now:
        description: >-
          Specifies the time that should be reported as "now" in the query.
          Default is the server's now time.
        format: date-time
        type: string
      params:
        additionalProperties: true
        description: >
          Enumeration of key/value pairs that respresent parameters to be
          injected into query (can only specify either this field or extern and
          not both)
        type: object
      query:
        description: Query script to execute.
        type: string
      type:
        description: The type of query. Must be "flux".
        enum:
          - flux
        type: string
    required:
      - query
    type: object
  QueryEditMode:
    enum:
      - builder
      - advanced
    type: string
  QueryVariableProperties:
    properties:
      type:
        enum:
          - query
        type: string
      values:
        properties:
          language:
            type: string
          query:
            type: string
        type: object
  RangeThreshold:
    allOf:
      - $ref: '#/definitions/ThresholdBase'
      - properties:
          max:
            format: float
            type: number
          min:
            format: float
            type: number
          type:
            enum:
              - range
            type: string
          within:
            type: boolean
        required:
          - type
          - min
          - max
          - within
        type: object
  Ready:
    properties:
      started:
        example: '2019-03-13T14:09:33.891Z'
        format: date-time
        type: string
      status:
        enum:
          - ready
        type: string
      up:
        example: 14m45.911966424s
        type: string
    type: object
  RegexpLiteral:
    description: >-
      Expressions begin and end with `/` and are regular expressions with syntax
      accepted by RE2
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        type: string
    type: object
  RenamableField:
    description: Describes a field that can be renamed and made visible or invisible.
    properties:
      displayName:
        description: The name that a field is renamed to by the user.
        type: string
      internalName:
        description: The calculated name of a field.
        readOnly: true
        type: string
      visible:
        description: Indicates whether this field should be visible on the table.
        type: boolean
    type: object
  Resource:
    properties:
      id:
        description: >-
          If ID is set that is a permission for a specific resource. if it is
          not set it is a permission for all resources of that resource type.
        type: string
        x-nullable: true
      name:
        description: Optional name of the resource if the resource has a name field.
        type: string
        x-nullable: true
      org:
        description: Optional name of the organization of the organization with orgID.
        type: string
        x-nullable: true
      orgID:
        description: >-
          If orgID is set that is a permission for all resources owned my that
          org. if it is not set it is a permission for all resources of that
          resource type.
        type: string
        x-nullable: true
      type:
        enum:
          - authorizations
          - buckets
          - dashboards
          - orgs
          - sources
          - tasks
          - telegrafs
          - users
          - variables
          - scrapers
          - secrets
          - labels
          - views
          - documents
          - notificationRules
          - notificationEndpoints
          - checks
          - dbrp
          - notebooks
        type: string
    required:
      - type
    type: object
  ResourceMember:
    allOf:
      - $ref: '#/definitions/UserResponse'
      - properties:
          role:
            default: member
            enum:
              - member
            type: string
        type: object
  ResourceMembers:
    properties:
      links:
        properties:
          self:
            format: uri
            type: string
        type: object
      users:
        items:
          $ref: '#/definitions/ResourceMember'
        type: array
    type: object
  ResourceOwner:
    allOf:
      - $ref: '#/definitions/UserResponse'
      - properties:
          role:
            default: owner
            enum:
              - owner
            type: string
        type: object
  ResourceOwners:
    properties:
      links:
        properties:
          self:
            format: uri
            type: string
        type: object
      users:
        items:
          $ref: '#/definitions/ResourceOwner'
        type: array
    type: object
  RetentionRule:
    properties:
      everySeconds:
        description: >-
          Duration in seconds for how long data will be kept in the database. 0
          means infinite.
        example: 86400
        format: int64
        minimum: 0
        type: integer
      shardGroupDurationSeconds:
        description: Shard duration measured in seconds.
        format: int64
        type: integer
      type:
        default: expire
        enum:
          - expire
        type: string
    required:
      - type
      - everySeconds
    type: object
  RetentionRules:
    description: Rules to expire or retain data.  No rules means data never expires.
    items:
      $ref: '#/definitions/RetentionRule'
    type: array
  ReturnStatement:
    description: Defines an expression to return
    properties:
      argument:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Routes:
    properties:
      authorizations:
        format: uri
        type: string
      buckets:
        format: uri
        type: string
      dashboards:
        format: uri
        type: string
      external:
        properties:
          statusFeed:
            format: uri
            type: string
        type: object
      flags:
        format: uri
        type: string
      me:
        format: uri
        type: string
      orgs:
        format: uri
        type: string
      query:
        properties:
          analyze:
            format: uri
            type: string
          ast:
            format: uri
            type: string
          self:
            format: uri
            type: string
          suggestions:
            format: uri
            type: string
        type: object
      setup:
        format: uri
        type: string
      signin:
        format: uri
        type: string
      signout:
        format: uri
        type: string
      sources:
        format: uri
        type: string
      system:
        properties:
          debug:
            format: uri
            type: string
          health:
            format: uri
            type: string
          metrics:
            format: uri
            type: string
        type: object
      tasks:
        format: uri
        type: string
      telegrafs:
        format: uri
        type: string
      users:
        format: uri
        type: string
      variables:
        format: uri
        type: string
      write:
        format: uri
        type: string
  RuleStatusLevel:
    description: The state to record if check matches a criteria.
    enum:
      - UNKNOWN
      - OK
      - INFO
      - CRIT
      - WARN
      - ANY
    type: string
  Run:
    properties:
      finishedAt:
        description: 'Time run finished executing, RFC3339Nano.'
        format: date-time
        readOnly: true
        type: string
      id:
        readOnly: true
        type: string
      links:
        example:
          retry: /api/v2/tasks/1/runs/1/retry
          self: /api/v2/tasks/1/runs/1
          task: /api/v2/tasks/1
        properties:
          retry:
            format: uri
            type: string
          self:
            format: uri
            type: string
          task:
            format: uri
            type: string
        readOnly: true
        type: object
      log:
        description: An array of logs associated with the run.
        items:
          $ref: '#/definitions/LogEvent'
        readOnly: true
        type: array
      requestedAt:
        description: 'Time run was manually requested, RFC3339Nano.'
        format: date-time
        readOnly: true
        type: string
      scheduledFor:
        description: 'Time used for run''s "now" option, RFC3339.'
        format: date-time
        type: string
      startedAt:
        description: 'Time run started executing, RFC3339Nano.'
        format: date-time
        readOnly: true
        type: string
      status:
        enum:
          - scheduled
          - started
          - failed
          - success
          - canceled
        readOnly: true
        type: string
      taskID:
        readOnly: true
        type: string
  RunManually:
    properties:
      scheduledFor:
        description: >-
          Time used for run's "now" option, RFC3339.  Default is the server's
          now time.
        format: date-time
        nullable: true
        type: string
  Runs:
    properties:
      links:
        $ref: '#/definitions/Links'
      runs:
        items:
          $ref: '#/definitions/Run'
        type: array
    type: object
  SMTPNotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleBase'
      - $ref: '#/definitions/SMTPNotificationRuleBase'
  SMTPNotificationRuleBase:
    properties:
      bodyTemplate:
        type: string
      subjectTemplate:
        type: string
      to:
        type: string
      type:
        enum:
          - smtp
        type: string
    required:
      - type
      - subjectTemplate
      - to
    type: object
  ScatterViewProperties:
    properties:
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          type: string
        type: array
      fillColumns:
        items:
          type: string
        type: array
      generateXAxisTicks:
        items:
          type: string
        type: array
      generateYAxisTicks:
        items:
          type: string
        type: array
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      note:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      symbolColumns:
        items:
          type: string
        type: array
      timeFormat:
        type: string
      type:
        enum:
          - scatter
        type: string
      xAxisLabel:
        type: string
      xColumn:
        type: string
      xDomain:
        items:
          type: number
        maxItems: 2
        type: array
      xPrefix:
        type: string
      xSuffix:
        type: string
      xTickStart:
        format: float
        type: number
      xTickStep:
        format: float
        type: number
      xTotalTicks:
        type: integer
      yAxisLabel:
        type: string
      yColumn:
        type: string
      yDomain:
        items:
          type: number
        maxItems: 2
        type: array
      yPrefix:
        type: string
      ySuffix:
        type: string
      yTickStart:
        format: float
        type: number
      yTickStep:
        format: float
        type: number
      yTotalTicks:
        type: integer
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - xColumn
      - yColumn
      - fillColumns
      - symbolColumns
      - xDomain
      - yDomain
      - xAxisLabel
      - yAxisLabel
      - xPrefix
      - yPrefix
      - xSuffix
      - ySuffix
    type: object
  SchemaType:
    enum:
      - implicit
      - explicit
    type: string
  ScraperTargetRequest:
    properties:
      allowInsecure:
        default: false
        description: Skip TLS verification on endpoint.
        type: boolean
      bucketID:
        description: The ID of the bucket to write to.
        type: string
      name:
        description: The name of the scraper target.
        type: string
      orgID:
        description: The organization ID.
        type: string
      type:
        description: The type of the metrics to be parsed.
        enum:
          - prometheus
        type: string
      url:
        description: The URL of the metrics endpoint.
        example: 'http://localhost:9090/metrics'
        type: string
    type: object
  ScraperTargetResponse:
    allOf:
      - $ref: '#/definitions/ScraperTargetRequest'
      - properties:
          bucket:
            description: The bucket name.
            type: string
          id:
            readOnly: true
            type: string
          links:
            example:
              bucket: /api/v2/buckets/1
              members: /api/v2/scrapers/1/members
              organization: /api/v2/orgs/1
              owners: /api/v2/scrapers/1/owners
              self: /api/v2/scrapers/1
            properties:
              bucket:
                $ref: '#/definitions/Link'
              members:
                $ref: '#/definitions/Link'
              organization:
                $ref: '#/definitions/Link'
              owners:
                $ref: '#/definitions/Link'
              self:
                $ref: '#/definitions/Link'
            readOnly: true
            type: object
          org:
            description: The name of the organization.
            type: string
        type: object
    type: object
  ScraperTargetResponses:
    properties:
      configurations:
        items:
          $ref: '#/definitions/ScraperTargetResponse'
        type: array
    type: object
  SecretKeys:
    properties:
      secrets:
        items:
          type: string
        type: array
    type: object
  SecretKeysResponse:
    allOf:
      - $ref: '#/definitions/SecretKeys'
      - properties:
          links:
            properties:
              org:
                type: string
              self:
                type: string
            readOnly: true
            type: object
        type: object
  Secrets:
    additionalProperties:
      type: string
    example:
      apikey: abc123xyz
  SingleStatViewProperties:
    properties:
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      decimalPlaces:
        $ref: '#/definitions/DecimalPlaces'
      note:
        type: string
      prefix:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      staticLegend:
        $ref: '#/definitions/StaticLegend'
      suffix:
        type: string
      tickPrefix:
        type: string
      tickSuffix:
        type: string
      type:
        enum:
          - single-stat
        type: string
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - prefix
      - tickPrefix
      - suffix
      - tickSuffix
      - decimalPlaces
    type: object
  SlackNotificationEndpoint:
    allOf:
      - $ref: '#/definitions/NotificationEndpointBase'
      - properties:
          token:
            description: Specifies the API token string. Specify either `URL` or `Token`.
            type: string
          url:
            description: >-
              Specifies the URL of the Slack endpoint. Specify either `URL` or
              `Token`.
            type: string
        type: object
    type: object
  SlackNotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleBase'
      - $ref: '#/definitions/SlackNotificationRuleBase'
  SlackNotificationRuleBase:
    properties:
      channel:
        type: string
      messageTemplate:
        type: string
      type:
        enum:
          - slack
        type: string
    required:
      - type
      - messageTemplate
    type: object
  Source:
    properties:
      default:
        type: boolean
      defaultRP:
        type: string
      id:
        type: string
      insecureSkipVerify:
        type: boolean
      languages:
        items:
          enum:
            - flux
            - influxql
          type: string
        readOnly: true
        type: array
      links:
        properties:
          buckets:
            type: string
          health:
            type: string
          query:
            type: string
          self:
            type: string
        type: object
      metaUrl:
        format: uri
        type: string
      name:
        type: string
      orgID:
        type: string
      password:
        type: string
      sharedSecret:
        type: string
      telegraf:
        type: string
      token:
        type: string
      type:
        enum:
          - v1
          - v2
          - self
        type: string
      url:
        format: uri
        type: string
      username:
        type: string
    type: object
  Sources:
    properties:
      links:
        properties:
          self:
            format: uri
            type: string
        type: object
      sources:
        items:
          $ref: '#/definitions/Source'
        type: array
    type: object
  Stack:
    properties:
      createdAt:
        format: date-time
        readOnly: true
        type: string
      events:
        items:
          properties:
            description:
              type: string
            eventType:
              type: string
            name:
              type: string
            resources:
              items:
                properties:
                  apiVersion:
                    type: string
                  associations:
                    items:
                      properties:
                        kind:
                          $ref: '#/definitions/TemplateKind'
                        metaName:
                          type: string
                      type: object
                    type: array
                  kind:
                    $ref: '#/definitions/TemplateKind'
                  links:
                    properties:
                      self:
                        type: string
                    type: object
                  resourceID:
                    type: string
                  templateMetaName:
                    type: string
                type: object
              type: array
            sources:
              items:
                type: string
              type: array
            updatedAt:
              format: date-time
              readOnly: true
              type: string
            urls:
              items:
                type: string
              type: array
          type: object
        type: array
      id:
        type: string
      orgID:
        type: string
    type: object
  Statement: {}
  StaticLegend:
    description: StaticLegend represents the options specific to the static legend
    properties:
      colorizeRows:
        type: boolean
      heightRatio:
        format: float
        type: number
      hide:
        type: boolean
      opacity:
        format: float
        type: number
      orientationThreshold:
        type: integer
      valueAxis:
        type: string
      widthRatio:
        format: float
        type: number
    type: object
  StatusRule:
    properties:
      count:
        type: integer
      currentLevel:
        $ref: '#/definitions/RuleStatusLevel'
      period:
        type: string
      previousLevel:
        $ref: '#/definitions/RuleStatusLevel'
    type: object
  StringLiteral:
    description: Expressions begin and end with double quote marks
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        type: string
    type: object
  TableViewProperties:
    properties:
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      decimalPlaces:
        $ref: '#/definitions/DecimalPlaces'
      fieldOptions:
        description: >-
          fieldOptions represent the fields retrieved by the query with
          customization options
        items:
          $ref: '#/definitions/RenamableField'
        type: array
      note:
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      tableOptions:
        properties:
          fixFirstColumn:
            description: >-
              fixFirstColumn indicates whether the first column of the table
              should be locked
            type: boolean
          sortBy:
            $ref: '#/definitions/RenamableField'
          verticalTimeAxis:
            description: >-
              verticalTimeAxis describes the orientation of the table by
              indicating whether the time axis will be displayed vertically
            type: boolean
          wrapping:
            description: >-
              Wrapping describes the text wrapping style to be used in table
              views
            enum:
              - truncate
              - wrap
              - single-line
            type: string
        type: object
      timeFormat:
        description: >-
          timeFormat describes the display format for time values according to
          moment.js date formatting
        type: string
      type:
        enum:
          - table
        type: string
    required:
      - type
      - queries
      - colors
      - shape
      - note
      - showNoteWhenEmpty
      - tableOptions
      - fieldOptions
      - timeFormat
      - decimalPlaces
    type: object
  TagRule:
    properties:
      key:
        type: string
      operator:
        enum:
          - equal
          - notequal
          - equalregex
          - notequalregex
        type: string
      value:
        type: string
    type: object
  Task:
    properties:
      authorizationID:
        description: >-
          The ID of the authorization used when this task communicates with the
          query engine.
        type: string
      createdAt:
        format: date-time
        readOnly: true
        type: string
      cron:
        description: >-
          A task repetition schedule in the form '* * * * * *'; parsed from
          Flux.
        type: string
      description:
        description: An optional description of the task.
        type: string
      every:
        description: A simple task repetition schedule; parsed from Flux.
        type: string
      flux:
        description: The Flux script to run for this task.
        type: string
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      lastRunError:
        readOnly: true
        type: string
      lastRunStatus:
        enum:
          - failed
          - success
          - canceled
        readOnly: true
        type: string
      latestCompleted:
        description: 'Timestamp of latest scheduled, completed run, RFC3339.'
        format: date-time
        readOnly: true
        type: string
      links:
        example:
          labels: /api/v2/tasks/1/labels
          logs: /api/v2/tasks/1/logs
          members: /api/v2/tasks/1/members
          owners: /api/v2/tasks/1/owners
          runs: /api/v2/tasks/1/runs
          self: /api/v2/tasks/1
        properties:
          labels:
            $ref: '#/definitions/Link'
          logs:
            $ref: '#/definitions/Link'
          members:
            $ref: '#/definitions/Link'
          owners:
            $ref: '#/definitions/Link'
          runs:
            $ref: '#/definitions/Link'
          self:
            $ref: '#/definitions/Link'
        readOnly: true
        type: object
      name:
        description: The name of the task.
        type: string
      offset:
        description: >-
          Duration to delay after the schedule, before executing the task;
          parsed from flux, if set to zero it will remove this option and use 0
          as the default.
        type: string
      org:
        description: The name of the organization that owns this Task.
        type: string
      orgID:
        description: The ID of the organization that owns this Task.
        type: string
      status:
        $ref: '#/definitions/TaskStatusType'
      type:
        description: >-
          The type of task, this can be used for filtering tasks on list
          actions.
        type: string
      updatedAt:
        format: date-time
        readOnly: true
        type: string
    required:
      - id
      - name
      - orgID
      - flux
    type: object
  TaskCreateRequest:
    properties:
      description:
        description: An optional description of the task.
        type: string
      flux:
        description: The Flux script to run for this task.
        type: string
      org:
        description: The name of the organization that owns this Task.
        type: string
      orgID:
        description: The ID of the organization that owns this Task.
        type: string
      status:
        $ref: '#/definitions/TaskStatusType'
    required:
      - flux
    type: object
  TaskStatusType:
    enum:
      - active
      - inactive
    type: string
  TaskUpdateRequest:
    properties:
      cron:
        description: Override the 'cron' option in the flux script.
        type: string
      description:
        description: An optional description of the task.
        type: string
      every:
        description: Override the 'every' option in the flux script.
        type: string
      flux:
        description: The Flux script to run for this task.
        type: string
      name:
        description: Override the 'name' option in the flux script.
        type: string
      offset:
        description: Override the 'offset' option in the flux script.
        type: string
      status:
        $ref: '#/definitions/TaskStatusType'
    type: object
  Tasks:
    properties:
      links:
        $ref: '#/definitions/Links'
        readOnly: true
      tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
    type: object
  Telegraf:
    allOf:
      - $ref: '#/definitions/TelegrafRequest'
      - properties:
          id:
            readOnly: true
            type: string
          labels:
            $ref: '#/definitions/Labels'
            readOnly: true
          links:
            example:
              lables: /api/v2/telegrafs/1/labels
              members: /api/v2/telegrafs/1/members
              owners: /api/v2/telegrafs/1/owners
              self: /api/v2/telegrafs/1
            properties:
              labels:
                $ref: '#/definitions/Link'
              members:
                $ref: '#/definitions/Link'
              owners:
                $ref: '#/definitions/Link'
              self:
                $ref: '#/definitions/Link'
            readOnly: true
            type: object
        type: object
    type: object
  TelegrafPlugin:
    properties:
      config:
        type: string
      description:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  TelegrafPlugins:
    properties:
      os:
        type: string
      plugins:
        items:
          $ref: '#/definitions/TelegrafPlugin'
        type: array
      version:
        type: string
    type: object
  TelegrafRequest:
    properties:
      config:
        type: string
      description:
        type: string
      metadata:
        properties:
          buckets:
            items:
              type: string
            type: array
        type: object
      name:
        type: string
      orgID:
        type: string
    type: object
  Telegrafs:
    properties:
      configurations:
        items:
          $ref: '#/definitions/Telegraf'
        type: array
    type: object
  TelegramNotificationEndpoint:
    allOf:
      - $ref: '#/definitions/NotificationEndpointBase'
      - properties:
          channel:
            description: >-
              ID of the telegram channel, a chat_id in
              https://core.telegram.org/bots/api#sendmessage .
            type: string
          token:
            description: >-
              Specifies the Telegram bot token. See
              https://core.telegram.org/bots#creating-a-new-bot .
            type: string
        required:
          - token
          - channel
        type: object
    type: object
  TelegramNotificationRule:
    allOf:
      - $ref: '#/definitions/NotificationRuleBase'
      - $ref: '#/definitions/TelegramNotificationRuleBase'
  TelegramNotificationRuleBase:
    properties:
      disableWebPagePreview:
        description: >-
          Disables preview of web links in the sent messages when "true".
          Defaults to "false" .
        type: boolean
      messageTemplate:
        description: The message template as a flux interpolated string.
        type: string
      parseMode:
        description: >-
          Parse mode of the message text per
          https://core.telegram.org/bots/api#formatting-options . Defaults to
          "MarkdownV2" .
        enum:
          - MarkdownV2
          - HTML
          - Markdown
        type: string
      type:
        description: >-
          The discriminator between other types of notification rules is
          "telegram".
        enum:
          - telegram
        type: string
    required:
      - type
      - messageTemplate
      - channel
    type: object
  Template:
    items:
      properties:
        apiVersion:
          type: string
        kind:
          $ref: '#/definitions/TemplateKind'
        meta:
          properties:
            name:
              type: string
          type: object
        spec:
          type: object
      type: object
    type: array
  TemplateApply:
    properties:
      actions:
        items: {}
        type: array
      dryRun:
        type: boolean
      envRefs:
        additionalProperties:
          oneOf:
            - type: string
            - type: integer
            - type: number
            - type: boolean
        type: object
      orgID:
        type: string
      remotes:
        items:
          properties:
            contentType:
              type: string
            url:
              type: string
          required:
            - url
          type: object
        type: array
      secrets:
        additionalProperties:
          type: string
        type: object
      stackID:
        type: string
      template:
        properties:
          contentType:
            type: string
          contents:
            $ref: '#/definitions/Template'
          sources:
            items:
              type: string
            type: array
        type: object
      templates:
        items:
          properties:
            contentType:
              type: string
            contents:
              $ref: '#/definitions/Template'
            sources:
              items:
                type: string
              type: array
          type: object
        type: array
    type: object
  TemplateChart:
    properties:
      height:
        type: integer
      properties:
        $ref: '#/definitions/ViewProperties'
      width:
        type: integer
      xPos:
        type: integer
      yPos:
        type: integer
    type: object
  TemplateEnvReferences:
    items:
      properties:
        defaultValue:
          description: >-
            Default value that will be provided for the reference when no value
            is provided
          x-nullable: true
        envRefKey:
          description: >-
            Key identified as environment reference and is the key identified in
            the template
          type: string
        resourceField:
          description: Field the environment reference corresponds too
          type: string
        value:
          description: Value provided to fulfill reference
          x-nullable: true
      required:
        - resourceField
        - envRefKey
      type: object
    type: array
  TemplateExportByID:
    properties:
      orgIDs:
        items:
          properties:
            orgID:
              type: string
            resourceFilters:
              properties:
                byLabel:
                  items:
                    type: string
                  type: array
                byResourceKind:
                  items:
                    $ref: '#/definitions/TemplateKind'
                  type: array
              type: object
          type: object
        type: array
      resources:
        properties:
          id:
            type: string
          kind:
            $ref: '#/definitions/TemplateKind'
          name:
            description: >-
              if defined with id, name is used for resource exported by id. if
              defined independently, resources strictly matching name are
              exported
            type: string
        required:
          - id
          - kind
        type: object
      stackID:
        type: string
    type: object
  TemplateExportByName:
    properties:
      orgIDs:
        items:
          properties:
            orgID:
              type: string
            resourceFilters:
              properties:
                byLabel:
                  items:
                    type: string
                  type: array
                byResourceKind:
                  items:
                    $ref: '#/definitions/TemplateKind'
                  type: array
              type: object
          type: object
        type: array
      resources:
        properties:
          kind:
            $ref: '#/definitions/TemplateKind'
          name:
            type: string
        required:
          - name
          - kind
        type: object
      stackID:
        type: string
    type: object
  TemplateKind:
    enum:
      - Bucket
      - Check
      - CheckDeadman
      - CheckThreshold
      - Dashboard
      - Label
      - NotificationEndpoint
      - NotificationEndpointHTTP
      - NotificationEndpointPagerDuty
      - NotificationEndpointSlack
      - NotificationRule
      - Task
      - Telegraf
      - Variable
    type: string
  TemplateSummary:
    properties:
      diff:
        properties:
          buckets:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  properties:
                    description:
                      type: string
                    name:
                      type: string
                    retentionRules:
                      $ref: '#/definitions/RetentionRules'
                  type: object
                old:
                  properties:
                    description:
                      type: string
                    name:
                      type: string
                    retentionRules:
                      $ref: '#/definitions/RetentionRules'
                  type: object
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          checks:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  $ref: '#/definitions/CheckDiscriminator'
                old:
                  $ref: '#/definitions/CheckDiscriminator'
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          dashboards:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  properties:
                    charts:
                      items:
                        $ref: '#/definitions/TemplateChart'
                      type: array
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                old:
                  properties:
                    charts:
                      items:
                        $ref: '#/definitions/TemplateChart'
                      type: array
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          labelMappings:
            items:
              properties:
                labelID:
                  type: string
                labelName:
                  type: string
                labelTemplateMetaName:
                  type: string
                resourceID:
                  type: string
                resourceName:
                  type: string
                resourceTemplateMetaName:
                  type: string
                resourceType:
                  type: string
                status:
                  type: string
              type: object
            type: array
          labels:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  properties:
                    color:
                      type: string
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                old:
                  properties:
                    color:
                      type: string
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          notificationEndpoints:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  $ref: '#/definitions/NotificationEndpointDiscriminator'
                old:
                  $ref: '#/definitions/NotificationEndpointDiscriminator'
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          notificationRules:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  properties:
                    description:
                      type: string
                    endpointID:
                      type: string
                    endpointName:
                      type: string
                    endpointType:
                      type: string
                    every:
                      type: string
                    messageTemplate:
                      type: string
                    name:
                      type: string
                    offset:
                      type: string
                    status:
                      type: string
                    statusRules:
                      items:
                        properties:
                          currentLevel:
                            type: string
                          previousLevel:
                            type: string
                        type: object
                      type: array
                    tagRules:
                      items:
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                  type: object
                old:
                  properties:
                    description:
                      type: string
                    endpointID:
                      type: string
                    endpointName:
                      type: string
                    endpointType:
                      type: string
                    every:
                      type: string
                    messageTemplate:
                      type: string
                    name:
                      type: string
                    offset:
                      type: string
                    status:
                      type: string
                    statusRules:
                      items:
                        properties:
                          currentLevel:
                            type: string
                          previousLevel:
                            type: string
                        type: object
                      type: array
                    tagRules:
                      items:
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                  type: object
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          tasks:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  properties:
                    cron:
                      type: string
                    description:
                      type: string
                    every:
                      type: string
                    name:
                      type: string
                    offset:
                      type: string
                    query:
                      type: string
                    status:
                      type: string
                  type: object
                old:
                  properties:
                    cron:
                      type: string
                    description:
                      type: string
                    every:
                      type: string
                    name:
                      type: string
                    offset:
                      type: string
                    query:
                      type: string
                    status:
                      type: string
                  type: object
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          telegrafConfigs:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  $ref: '#/definitions/TelegrafRequest'
                old:
                  $ref: '#/definitions/TelegrafRequest'
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          variables:
            items:
              properties:
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                new:
                  properties:
                    args:
                      $ref: '#/definitions/VariableProperties'
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                old:
                  properties:
                    args:
                      $ref: '#/definitions/VariableProperties'
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                stateStatus:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
        type: object
      errors:
        items:
          properties:
            fields:
              items:
                type: string
              type: array
            indexes:
              items:
                type: integer
              type: array
            kind:
              $ref: '#/definitions/TemplateKind'
            reason:
              type: string
          type: object
        type: array
      sources:
        items:
          type: string
        type: array
      stackID:
        type: string
      summary:
        properties:
          buckets:
            items:
              properties:
                description:
                  type: string
                envReferences:
                  $ref: '#/definitions/TemplateEnvReferences'
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                labelAssociations:
                  items:
                    $ref: '#/definitions/TemplateSummaryLabel'
                  type: array
                name:
                  type: string
                orgID:
                  type: string
                retentionPeriod:
                  type: integer
                templateMetaName:
                  type: string
              type: object
            type: array
          checks:
            items:
              allOf:
                - $ref: '#/definitions/CheckDiscriminator'
                - properties:
                    envReferences:
                      $ref: '#/definitions/TemplateEnvReferences'
                    kind:
                      $ref: '#/definitions/TemplateKind'
                    labelAssociations:
                      items:
                        $ref: '#/definitions/TemplateSummaryLabel'
                      type: array
                    templateMetaName:
                      type: string
                  type: object
            type: array
          dashboards:
            items:
              properties:
                charts:
                  items:
                    $ref: '#/definitions/TemplateChart'
                  type: array
                description:
                  type: string
                envReferences:
                  $ref: '#/definitions/TemplateEnvReferences'
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                labelAssociations:
                  items:
                    $ref: '#/definitions/TemplateSummaryLabel'
                  type: array
                name:
                  type: string
                orgID:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          labelMappings:
            items:
              properties:
                labelID:
                  type: string
                labelName:
                  type: string
                labelTemplateMetaName:
                  type: string
                resourceID:
                  type: string
                resourceName:
                  type: string
                resourceTemplateMetaName:
                  type: string
                resourceType:
                  type: string
                status:
                  type: string
              type: object
            type: array
          labels:
            items:
              $ref: '#/definitions/TemplateSummaryLabel'
            type: array
          missingEnvRefs:
            items:
              type: string
            type: array
          missingSecrets:
            items:
              type: string
            type: array
          notificationEndpoints:
            items:
              allOf:
                - $ref: '#/definitions/NotificationEndpointDiscriminator'
                - properties:
                    envReferences:
                      $ref: '#/definitions/TemplateEnvReferences'
                    kind:
                      $ref: '#/definitions/TemplateKind'
                    labelAssociations:
                      items:
                        $ref: '#/definitions/TemplateSummaryLabel'
                      type: array
                    templateMetaName:
                      type: string
                  type: object
            type: array
          notificationRules:
            items:
              properties:
                description:
                  type: string
                endpointID:
                  type: string
                endpointTemplateMetaName:
                  type: string
                endpointType:
                  type: string
                envReferences:
                  $ref: '#/definitions/TemplateEnvReferences'
                every:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                labelAssociations:
                  items:
                    $ref: '#/definitions/TemplateSummaryLabel'
                  type: array
                messageTemplate:
                  type: string
                name:
                  type: string
                offset:
                  type: string
                status:
                  type: string
                statusRules:
                  items:
                    properties:
                      currentLevel:
                        type: string
                      previousLevel:
                        type: string
                    type: object
                  type: array
                tagRules:
                  items:
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                      value:
                        type: string
                    type: object
                  type: array
                templateMetaName:
                  type: string
              type: object
            type: array
          tasks:
            items:
              properties:
                cron:
                  type: string
                description:
                  type: string
                envReferences:
                  $ref: '#/definitions/TemplateEnvReferences'
                every:
                  type: string
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                name:
                  type: string
                offset:
                  type: string
                query:
                  type: string
                status:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
          telegrafConfigs:
            items:
              allOf:
                - $ref: '#/definitions/TelegrafRequest'
                - properties:
                    envReferences:
                      $ref: '#/definitions/TemplateEnvReferences'
                    kind:
                      $ref: '#/definitions/TemplateKind'
                    labelAssociations:
                      items:
                        $ref: '#/definitions/TemplateSummaryLabel'
                      type: array
                    templateMetaName:
                      type: string
                  type: object
            type: array
          variables:
            items:
              properties:
                arguments:
                  $ref: '#/definitions/VariableProperties'
                description:
                  type: string
                envReferences:
                  $ref: '#/definitions/TemplateEnvReferences'
                id:
                  type: string
                kind:
                  $ref: '#/definitions/TemplateKind'
                labelAssociations:
                  items:
                    $ref: '#/definitions/TemplateSummaryLabel'
                  type: array
                name:
                  type: string
                orgID:
                  type: string
                templateMetaName:
                  type: string
              type: object
            type: array
        type: object
    type: object
  TemplateSummaryLabel:
    properties:
      envReferences:
        $ref: '#/definitions/TemplateEnvReferences'
      id:
        type: string
      kind:
        $ref: '#/definitions/TemplateKind'
      name:
        type: string
      orgID:
        type: string
      properties:
        properties:
          color:
            type: string
          description:
            type: string
        type: object
      templateMetaName:
        type: string
    type: object
  TestStatement:
    description: Declares a Flux test case
    properties:
      assignment:
        $ref: '#/definitions/VariableAssignment'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  Threshold: {}
  ThresholdBase:
    properties:
      allValues:
        description: 'If true, only alert if all values meet threshold.'
        type: boolean
      level:
        $ref: '#/definitions/CheckStatusLevel'
  ThresholdCheck:
    allOf:
      - $ref: '#/definitions/CheckBase'
      - properties:
          every:
            description: Check repetition interval.
            type: string
          offset:
            description: 'Duration to delay after the schedule, before executing check.'
            type: string
          statusMessageTemplate:
            description: The template used to generate and write a status message.
            type: string
          tags:
            description: List of tags to write to each status.
            items:
              properties:
                key:
                  type: string
                value:
                  type: string
              type: object
            type: array
          thresholds:
            items:
              $ref: '#/definitions/Threshold'
            type: array
          type:
            enum:
              - threshold
            type: string
        required:
          - type
        type: object
  UnaryExpression:
    description: Uses operators to act on a single operand in an expression
    properties:
      argument:
        $ref: '#/definitions/Expression'
      operator:
        type: string
      type:
        $ref: '#/definitions/NodeType'
    type: object
  UnsignedIntegerLiteral:
    description: Represents integer numbers
    properties:
      type:
        $ref: '#/definitions/NodeType'
      value:
        type: string
    type: object
  User:
    properties:
      id:
        readOnly: true
        type: string
      name:
        type: string
      oauthID:
        type: string
      status:
        default: active
        description: If inactive the user is inactive.
        enum:
          - active
          - inactive
        type: string
    required:
      - name
  UserResponse:
    properties:
      id:
        readOnly: true
        type: string
      links:
        example:
          self: /api/v2/users/1
        properties:
          self:
            format: uri
            type: string
        readOnly: true
        type: object
      name:
        type: string
      oauthID:
        type: string
      status:
        default: active
        description: If inactive the user is inactive.
        enum:
          - active
          - inactive
        type: string
    required:
      - name
  Users:
    properties:
      links:
        properties:
          self:
            format: uri
            type: string
        type: object
      users:
        items:
          $ref: '#/definitions/UserResponse'
        type: array
    type: object
  Variable:
    properties:
      arguments:
        $ref: '#/definitions/VariableProperties'
      createdAt:
        format: date-time
        type: string
      description:
        type: string
      id:
        readOnly: true
        type: string
      labels:
        $ref: '#/definitions/Labels'
      links:
        properties:
          labels:
            format: uri
            type: string
          org:
            format: uri
            type: string
          self:
            format: uri
            type: string
        readOnly: true
        type: object
      name:
        type: string
      orgID:
        type: string
      selected:
        items:
          type: string
        type: array
      updatedAt:
        format: date-time
        type: string
    required:
      - name
      - orgID
      - arguments
    type: object
  VariableAssignment:
    description: Represents the declaration of a variable
    properties:
      id:
        $ref: '#/definitions/Identifier'
      init:
        $ref: '#/definitions/Expression'
      type:
        $ref: '#/definitions/NodeType'
    type: object
  VariableProperties:
    type: object
  Variables:
    example:
      variables:
        - arguments:
            type: constant
            values:
              - howdy
              - hello
              - hi
              - yo
              - oy
          id: '1221432'
          name: ':ok:'
          selected:
            - hello
        - arguments:
            type: map
            values:
              a: fdjaklfdjkldsfjlkjdsa
              b: dfaksjfkljekfajekdljfas
              c: fdjksajfdkfeawfeea
          id: '1221432'
          name: ':ok:'
          selected:
            - c
        - arguments:
            language: flux
            query: 'from(bucket: "foo") |&gt; showMeasurements()'
            type: query
          id: '1221432'
          name: ':ok:'
          selected:
            - host
    properties:
      variables:
        items:
          $ref: '#/definitions/Variable'
        type: array
    type: object
  View:
    properties:
      id:
        readOnly: true
        type: string
      links:
        properties:
          self:
            type: string
        readOnly: true
        type: object
      name:
        type: string
      properties:
        $ref: '#/definitions/ViewProperties'
    required:
      - name
      - properties
  ViewProperties: {}
  Views:
    properties:
      links:
        properties:
          self:
            type: string
        type: object
      views:
        items:
          $ref: '#/definitions/View'
        type: array
    type: object
  WritePrecision:
    enum:
      - ms
      - s
      - us
      - ns
    type: string
  XYGeom:
    enum:
      - line
      - step
      - stacked
      - bar
      - monotoneX
    type: string
  XYViewProperties:
    properties:
      axes:
        $ref: '#/definitions/Axes'
      colors:
        description: Colors define color encoding of data into a visualization
        items:
          $ref: '#/definitions/DashboardColor'
        type: array
      generateXAxisTicks:
        items:
          type: string
        type: array
      generateYAxisTicks:
        items:
          type: string
        type: array
      geom:
        $ref: '#/definitions/XYGeom'
      hoverDimension:
        enum:
          - auto
          - x
          - 'y'
          - xy
        type: string
      legendColorizeRows:
        type: boolean
      legendHide:
        type: boolean
      legendOpacity:
        format: float
        type: number
      legendOrientationThreshold:
        type: integer
      note:
        type: string
      position:
        enum:
          - overlaid
          - stacked
        type: string
      queries:
        items:
          $ref: '#/definitions/DashboardQuery'
        type: array
      shadeBelow:
        type: boolean
      shape:
        enum:
          - chronograf-v2
        type: string
      showNoteWhenEmpty:
        description: 'If true, will display note when empty'
        type: boolean
      staticLegend:
        $ref: '#/definitions/StaticLegend'
      timeFormat:
        type: string
      type:
        enum:
          - xy
        type: string
      xColumn:
        type: string
      xTickStart:
        format: float
        type: number
      xTickStep:
        format: float
        type: number
      xTotalTicks:
        type: integer
      yColumn:
        type: string
      yTickStart:
        format: float
        type: number
      yTickStep:
        format: float
        type: number
      yTotalTicks:
        type: integer
    required:
      - type
      - geom
      - queries
      - shape
      - axes
      - colors
      - note
      - showNoteWhenEmpty
      - position
    type: object
info:
  description: |-
    # Authentication

    &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
  title: Influx OSS API Service
  version: 2.0.0
  x-apisguru-categories:
    - iot
  x-logo:
    url: 'https://www.influxdata.com/wp-content/uploads/Favicon-blue-200x200.png'
  x-origin:
    - format: openapi
      url: 'blob:https://docs.influxdata.com/blobId'
      version: '3.0'
  x-providerName: influxdata.com
paths:
  /:
    get:
      operationId: GetRoutes
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        default:
          description: All routes
          schema:
            $ref: '#/definitions/Routes'
      summary: List all top level routes
      tags:
        - Routes
  /authorizations:
    get:
      operationId: GetAuthorizations
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Only show authorizations that belong to a user ID.
          in: query
          name: userID
          type: string
        - description: Only show authorizations that belong to a user name.
          in: query
          name: user
          type: string
        - description: Only show authorizations that belong to an organization ID.
          in: query
          name: orgID
          type: string
        - description: Only show authorizations that belong to a organization name.
          in: query
          name: org
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of authorizations
          schema:
            $ref: '#/definitions/Authorizations'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: List all authorizations
      tags:
        - Authorizations
    post:
      consumes:
        - application/json
      operationId: PostAuthorizations
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Authorization to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AuthorizationPostRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Authorization created
          schema:
            $ref: '#/definitions/Authorization'
        '400':
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Create an authorization
      tags:
        - Authorizations
  '/authorizations/{authID}':
    delete:
      operationId: DeleteAuthorizationsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the authorization to delete.
          in: path
          name: authID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Authorization deleted
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete an authorization
      tags:
        - Authorizations
    get:
      operationId: GetAuthorizationsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the authorization to get.
          in: path
          name: authID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Authorization details
          schema:
            $ref: '#/definitions/Authorization'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve an authorization
      tags:
        - Authorizations
    patch:
      consumes:
        - application/json
      operationId: PatchAuthorizationsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the authorization to update.
          in: path
          name: authID
          required: true
          type: string
        - description: Authorization to update
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AuthorizationUpdateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: The active or inactie authorization
          schema:
            $ref: '#/definitions/Authorization'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Update an authorization to be active or inactive
      tags:
        - Authorizations
  /buckets:
    get:
      operationId: GetBuckets
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: >
            The last resource ID from which to seek from (but not including).
            This is to be used instead of `offset`.
          in: query
          name: after
          required: false
          type: string
        - description: The name of the organization.
          in: query
          name: org
          type: string
        - description: The organization ID.
          in: query
          name: orgID
          type: string
        - description: Only returns buckets with a specific name.
          in: query
          name: name
          type: string
        - description: Only returns buckets with a specific ID.
          in: query
          name: id
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of buckets
          schema:
            $ref: '#/definitions/Buckets'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all buckets
      tags:
        - Buckets
    post:
      consumes:
        - application/json
      operationId: PostBuckets
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Bucket to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostBucketRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Bucket created
          schema:
            $ref: '#/definitions/Bucket'
        '422':
          description: Request body failed validation
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}':
    delete:
      operationId: DeleteBucketsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the bucket to delete.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Bucket not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a bucket
      tags:
        - Buckets
    get:
      operationId: GetBucketsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Bucket details
          schema:
            $ref: '#/definitions/Bucket'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a bucket
      tags:
        - Buckets
    patch:
      consumes:
        - application/json
      operationId: PatchBucketsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
        - description: Bucket update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PatchBucketRequest'
      produces:
        - application/json
      responses:
        '200':
          description: An updated bucket
          schema:
            $ref: '#/definitions/Bucket'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}/labels':
    get:
      operationId: GetBucketsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a bucket
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a bucket
      tags:
        - Buckets
    post:
      consumes:
        - application/json
      operationId: PostBucketsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The newly added label
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}/labels/{labelID}':
    delete:
      operationId: DeleteBucketsIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
        - description: The ID of the label to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Bucket not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}/members':
    get:
      operationId: GetBucketsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of bucket members
          schema:
            $ref: '#/definitions/ResourceMembers'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all users with member privileges for a bucket
      tags:
        - Buckets
    post:
      consumes:
        - application/json
      operationId: PostBucketsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
        - description: User to add as member
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Member added to bucket
          schema:
            $ref: '#/definitions/ResourceMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}/members/{userID}':
    delete:
      operationId: DeleteBucketsIDMembersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the member to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}/owners':
    get:
      operationId: GetBucketsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of bucket owners
          schema:
            $ref: '#/definitions/ResourceOwners'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all owners of a bucket
      tags:
        - Buckets
    post:
      consumes:
        - application/json
      operationId: PostBucketsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
        - description: User to add as owner
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Bucket owner added
          schema:
            $ref: '#/definitions/ResourceOwner'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add an owner to a bucket
      tags:
        - Buckets
  '/buckets/{bucketID}/owners/{userID}':
    delete:
      operationId: DeleteBucketsIDOwnersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the owner to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The bucket ID.
          in: path
          name: bucketID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an owner from a bucket
      tags:
        - Buckets
  /checks:
    get:
      operationId: GetChecks
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: Only show checks that belong to a specific organization ID.
          in: query
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of checks
          schema:
            $ref: '#/definitions/Checks'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all checks
      tags:
        - Checks
    post:
      consumes:
        - application/json
      operationId: CreateCheck
      parameters:
        - description: Check to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCheck'
      produces:
        - application/json
      responses:
        '201':
          description: Check created
          schema:
            $ref: '#/definitions/Check'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add new check
      tags:
        - Checks
  '/checks/{checkID}':
    delete:
      operationId: DeleteChecksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: The check was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a check
      tags:
        - Checks
    get:
      operationId: GetChecksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The check requested
          schema:
            $ref: '#/definitions/Check'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a check
      tags:
        - Checks
    patch:
      consumes:
        - application/json
      operationId: PatchChecksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
        - description: Check update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CheckPatch'
      produces:
        - application/json
      responses:
        '200':
          description: An updated check
          schema:
            $ref: '#/definitions/Check'
        '404':
          description: The check was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a check
      tags:
        - Checks
    put:
      consumes:
        - application/json
      operationId: PutChecksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
        - description: Check update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Check'
      produces:
        - application/json
      responses:
        '200':
          description: An updated check
          schema:
            $ref: '#/definitions/Check'
        '404':
          description: The check was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a check
      tags:
        - Checks
  '/checks/{checkID}/labels':
    get:
      operationId: GetChecksIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a check
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a check
      tags:
        - Checks
    post:
      consumes:
        - application/json
      operationId: PostChecksIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The label was added to the check
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a check
      tags:
        - Checks
  '/checks/{checkID}/labels/{labelID}':
    delete:
      operationId: DeleteChecksIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
        - description: The ID of the label to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Check or label not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete label from a check
      tags:
        - Checks
  '/checks/{checkID}/query':
    get:
      operationId: GetChecksIDQuery
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The check ID.
          in: path
          name: checkID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The check query requested
          schema:
            $ref: '#/definitions/FluxResponse'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Check not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a check query
      tags:
        - Checks
  /dashboards:
    get:
      operationId: GetDashboards
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - default: false
          in: query
          name: descending
          required: false
          type: boolean
        - description: >-
            A user identifier. Returns only dashboards where this user has the
            `owner` role.
          in: query
          name: owner
          type: string
        - description: The column to sort by.
          enum:
            - ID
            - CreatedAt
            - UpdatedAt
          in: query
          name: sortBy
          type: string
        - collectionFormat: multi
          description: >-
            A list of dashboard identifiers. Returns only the listed dashboards.
            If both `id` and `owner` are specified, only `id` is used.
          in: query
          items:
            type: string
          name: id
          type: array
        - description: The identifier of the organization.
          in: query
          name: orgID
          type: string
        - description: The name of the organization.
          in: query
          name: org
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: All dashboards
          schema:
            $ref: '#/definitions/Dashboards'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all dashboards
      tags:
        - Dashboards
    post:
      consumes:
        - application/json
      operationId: PostDashboards
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Dashboard to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateDashboardRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Added dashboard
          schema: {}
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}':
    delete:
      operationId: DeleteDashboardsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a dashboard
      tags:
        - Dashboards
    get:
      operationId: GetDashboardsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: >-
            Includes the cell view properties in the response if set to
            `properties`
          enum:
            - properties
          in: query
          name: include
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Retrieve a single dashboard
          schema: {}
        '404':
          description: Dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a Dashboard
      tags:
        - Dashboards
    patch:
      consumes:
        - application/json
      operationId: PatchDashboardsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: Patching of a dashboard
          in: body
          name: body
          required: true
          schema:
            properties:
              cells:
                $ref: '#/definitions/CellWithViewProperties'
                description: >-
                  optional, when provided will replace all existing cells with
                  the cells provided
              description:
                description: 'optional, when provided will replace the description'
                type: string
              name:
                description: 'optional, when provided will replace the name'
                type: string
            title: PatchDashboardRequest
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Updated dashboard
          schema:
            $ref: '#/definitions/Dashboard'
        '404':
          description: Dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}/cells':
    post:
      consumes:
        - application/json
      operationId: PostDashboardsIDCells
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: Cell that will be added
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateCell'
      produces:
        - application/json
      responses:
        '201':
          description: Cell successfully added
          schema:
            $ref: '#/definitions/Cell'
        '404':
          description: Dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a dashboard cell
      tags:
        - Cells
        - Dashboards
    put:
      consumes:
        - application/json
      description: >-
        Replaces all cells in a dashboard. This is used primarily to update the
        positional information of all cells.
      operationId: PutDashboardsIDCells
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Cells'
      produces:
        - application/json
      responses:
        '201':
          description: Replaced dashboard cells
          schema:
            $ref: '#/definitions/Dashboard'
        '404':
          description: Dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Replace cells in a dashboard
      tags:
        - Cells
        - Dashboards
  '/dashboards/{dashboardID}/cells/{cellID}':
    delete:
      operationId: DeleteDashboardsIDCellsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to delete.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: The ID of the cell to delete.
          in: path
          name: cellID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Cell successfully deleted
        '404':
          description: Cell or dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a dashboard cell
      tags:
        - Cells
        - Dashboards
    patch:
      consumes:
        - application/json
      description: >-
        Updates the non positional information related to a cell. Updates to a
        single cell's positional data could cause grid conflicts.
      operationId: PatchDashboardsIDCellsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: The ID of the cell to update.
          in: path
          name: cellID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CellUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Updated dashboard cell
          schema:
            $ref: '#/definitions/Cell'
        '404':
          description: Cell or dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update the non-positional information related to a cell
      tags:
        - Cells
        - Dashboards
  '/dashboards/{dashboardID}/cells/{cellID}/view':
    get:
      operationId: GetDashboardsIDCellsIDView
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: The cell ID.
          in: path
          name: cellID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A dashboard cells view
          schema:
            $ref: '#/definitions/View'
        '404':
          description: Cell or dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve the view for a cell
      tags:
        - Cells
        - Dashboards
        - Views
    patch:
      consumes:
        - application/json
      operationId: PatchDashboardsIDCellsIDView
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the dashboard to update.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: The ID of the cell to update.
          in: path
          name: cellID
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/View'
      produces:
        - application/json
      responses:
        '200':
          description: Updated cell view
          schema:
            $ref: '#/definitions/View'
        '404':
          description: Cell or dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update the view for a cell
      tags:
        - Cells
        - Dashboards
        - Views
  '/dashboards/{dashboardID}/labels':
    get:
      operationId: GetDashboardsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a dashboard
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a dashboard
      tags:
        - Dashboards
    post:
      consumes:
        - application/json
      operationId: PostDashboardsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The label added to the dashboard
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}/labels/{labelID}':
    delete:
      operationId: DeleteDashboardsIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: The ID of the label to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Dashboard not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}/members':
    get:
      operationId: GetDashboardsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of users who have member privileges for a dashboard
          schema:
            $ref: '#/definitions/ResourceMembers'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all dashboard members
      tags:
        - Dashboards
    post:
      consumes:
        - application/json
      operationId: PostDashboardsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: User to add as member
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Added to dashboard members
          schema:
            $ref: '#/definitions/ResourceMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}/members/{userID}':
    delete:
      operationId: DeleteDashboardsIDMembersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the member to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}/owners':
    get:
      operationId: GetDashboardsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of users who have owner privileges for a dashboard
          schema:
            $ref: '#/definitions/ResourceOwners'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all dashboard owners
      tags:
        - Dashboards
    post:
      consumes:
        - application/json
      operationId: PostDashboardsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
        - description: User to add as owner
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Added to dashboard owners
          schema:
            $ref: '#/definitions/ResourceOwner'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add an owner to a dashboard
      tags:
        - Dashboards
  '/dashboards/{dashboardID}/owners/{userID}':
    delete:
      operationId: DeleteDashboardsIDOwnersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the owner to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The dashboard ID.
          in: path
          name: dashboardID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an owner from a dashboard
      tags:
        - Dashboards
  /dbrps:
    get:
      operationId: GetDBRPs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the organization ID to filter on
          in: query
          name: orgID
          required: true
          type: string
        - description: Specifies the mapping ID to filter on
          in: query
          name: id
          type: string
        - description: Specifies the bucket ID to filter on
          in: query
          name: bucketID
          type: string
        - description: Specifies filtering on default
          in: query
          name: default
          type: boolean
        - description: Specifies the database to filter on
          in: query
          name: db
          type: string
        - description: Specifies the retention policy to filter on
          in: query
          name: rp
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all database retention policy mappings
          schema:
            $ref: '#/definitions/DBRPs'
        '400':
          description: if any of the parameter passed is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all database retention policy mappings
      tags:
        - DBRPs
    post:
      consumes:
        - application/json
      operationId: PostDBRP
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The database retention policy mapping to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DBRP'
      produces:
        - application/json
      responses:
        '201':
          description: Database retention policy mapping created
          schema:
            $ref: '#/definitions/DBRP'
        '400':
          description: if any of the IDs in the mapping is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a database retention policy mapping
      tags:
        - DBRPs
  '/dbrps/{dbrpID}':
    delete:
      operationId: DeleteDBRPID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the organization ID of the mapping
          in: query
          name: orgID
          required: true
          type: string
        - description: The database retention policy mapping
          in: path
          name: dbrpID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '400':
          description: if any of the IDs passed is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a database retention policy
      tags:
        - DBRPs
    get:
      operationId: GetDBRPsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the organization ID of the mapping
          in: query
          name: orgID
          required: true
          type: string
        - description: The database retention policy mapping ID
          in: path
          name: dbrpID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The database retention policy requested
          schema:
            $ref: '#/definitions/DBRP'
        '400':
          description: if any of the IDs passed is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a database retention policy mapping
      tags:
        - DBRPs
    patch:
      consumes:
        - application/json
      operationId: PatchDBRPID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the organization ID of the mapping
          in: query
          name: orgID
          required: true
          type: string
        - description: The database retention policy mapping.
          in: path
          name: dbrpID
          required: true
          type: string
        - description: Database retention policy update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DBRPUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: An updated mapping
          schema:
            $ref: '#/definitions/DBRP'
        '400':
          description: if any of the IDs passed is invalid
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The mapping was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a database retention policy mapping
      tags:
        - DBRPs
  /delete:
    post:
      consumes:
        - application/json
      operationId: PostDelete
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the organization to delete data from.
          in: query
          name: org
          type: string
        - description: Specifies the bucket to delete data from.
          in: query
          name: bucket
          type: string
        - description: Specifies the organization ID of the resource.
          in: query
          name: orgID
          type: string
        - description: Specifies the bucket ID to delete data from.
          in: query
          name: bucketID
          type: string
        - description: Predicate delete request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeletePredicateRequest'
      produces:
        - application/json
      responses:
        '204':
          description: delete has been accepted
        '400':
          description: Invalid request.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: no token was sent or does not have sufficient permissions.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: the bucket or organization is not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete time series data from InfluxDB
      tags:
        - Delete
  /documents/templates:
    get:
      operationId: GetDocumentsTemplates
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the name of the organization of the template.
          in: query
          name: org
          type: string
        - description: Specifies the organization ID of the template.
          in: query
          name: orgID
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of template documents
          schema:
            $ref: '#/definitions/Documents'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all templates
      tags:
        - Templates
    post:
      consumes:
        - application/json
      operationId: PostDocumentsTemplates
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Template that will be created
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DocumentCreate'
      produces:
        - application/json
      responses:
        '201':
          description: Template created
          schema:
            $ref: '#/definitions/Document'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a template
      tags:
        - Templates
  '/documents/templates/{templateID}':
    delete:
      operationId: DeleteDocumentsTemplatesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The template ID.
          in: path
          name: templateID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a template
      tags:
        - Templates
    get:
      operationId: GetDocumentsTemplatesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The template ID.
          in: path
          name: templateID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The template requested
          schema:
            $ref: '#/definitions/Document'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a template
      tags:
        - Templates
    put:
      consumes:
        - application/json
      operationId: PutDocumentsTemplatesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The template ID.
          in: path
          name: templateID
          required: true
          type: string
        - description: Template that will be updated
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DocumentUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: The newly updated template
          schema:
            $ref: '#/definitions/Document'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a template
      tags:
        - Templates
  '/documents/templates/{templateID}/labels':
    get:
      operationId: GetDocumentsTemplatesIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The template ID.
          in: path
          name: templateID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a template
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a template
      tags:
        - Templates
    post:
      consumes:
        - application/json
      operationId: PostDocumentsTemplatesIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The template ID.
          in: path
          name: templateID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The label added to the template
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a template
      tags:
        - Templates
  '/documents/templates/{templateID}/labels/{labelID}':
    delete:
      operationId: DeleteDocumentsTemplatesIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The template ID.
          in: path
          name: templateID
          required: true
          type: string
        - description: The label ID.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Template not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a template
      tags:
        - Templates
  /flags:
    get:
      operationId: GetFlags
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '200':
          description: Feature flags for the currently authenticated user
          schema:
            $ref: '#/definitions/Flags'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Return the feature flags for the currently authenticated user
      tags:
        - Users
  /health:
    get:
      operationId: GetHealth
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '200':
          description: The instance is healthy
          schema:
            $ref: '#/definitions/HealthCheck'
        '503':
          description: The instance is unhealthy
          schema:
            $ref: '#/definitions/HealthCheck'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the health of an instance
      tags:
        - Health
    servers:
      - url: ''
  /labels:
    get:
      operationId: GetLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: query
          name: orgID
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of labels
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels
      tags:
        - Labels
    post:
      consumes:
        - application/json
      operationId: PostLabels
      parameters:
        - description: Label to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Added label
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a label
      tags:
        - Labels
  '/labels/{labelID}':
    delete:
      operationId: DeleteLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the label to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Label not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label
      tags:
        - Labels
    get:
      operationId: GetLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the label to update.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A label
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a label
      tags:
        - Labels
    patch:
      consumes:
        - application/json
      operationId: PatchLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the label to update.
          in: path
          name: labelID
          required: true
          type: string
        - description: Label update
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Updated label
          schema:
            $ref: '#/definitions/LabelResponse'
        '404':
          description: Label not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a label
      tags:
        - Labels
  /me:
    get:
      operationId: GetMe
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '200':
          description: The currently authenticated user.
          schema:
            $ref: '#/definitions/UserResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve the currently authenticated user
      tags:
        - Users
  /me/password:
    put:
      consumes:
        - application/json
      operationId: PutMePassword
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: New password
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PasswordResetBody'
      produces:
        - application/json
      responses:
        '204':
          description: Password successfully updated
        default:
          description: Unsuccessful authentication
          schema:
            $ref: '#/definitions/Error'
      security:
        - BasicAuth: []
      summary: Update a password
      tags:
        - Users
  /notificationEndpoints:
    get:
      operationId: GetNotificationEndpoints
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: >-
            Only show notification endpoints that belong to specific
            organization ID.
          in: query
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of notification endpoints
          schema:
            $ref: '#/definitions/NotificationEndpoints'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all notification endpoints
      tags:
        - NotificationEndpoints
    post:
      consumes:
        - application/json
      operationId: CreateNotificationEndpoint
      parameters:
        - description: Notification endpoint to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostNotificationEndpoint'
      produces:
        - application/json
      responses:
        '201':
          description: Notification endpoint created
          schema:
            $ref: '#/definitions/NotificationEndpoint'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a notification endpoint
      tags:
        - NotificationEndpoints
  '/notificationEndpoints/{endpointID}':
    delete:
      operationId: DeleteNotificationEndpointsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: The endpoint was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a notification endpoint
      tags:
        - NotificationEndpoints
    get:
      operationId: GetNotificationEndpointsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The notification endpoint requested
          schema:
            $ref: '#/definitions/NotificationEndpoint'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a notification endpoint
      tags:
        - NotificationEndpoints
    patch:
      consumes:
        - application/json
      operationId: PatchNotificationEndpointsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
        - description: Check update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationEndpointUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: An updated notification endpoint
          schema:
            $ref: '#/definitions/NotificationEndpoint'
        '404':
          description: The notification endpoint was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a notification endpoint
      tags:
        - NotificationEndpoints
    put:
      consumes:
        - application/json
      operationId: PutNotificationEndpointsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
        - description: A new notification endpoint to replace the existing endpoint with
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationEndpoint'
      produces:
        - application/json
      responses:
        '200':
          description: An updated notification endpoint
          schema:
            $ref: '#/definitions/NotificationEndpoint'
        '404':
          description: The notification endpoint was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a notification endpoint
      tags:
        - NotificationEndpoints
  '/notificationEndpoints/{endpointID}/labels':
    get:
      operationId: GetNotificationEndpointsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a notification endpoint
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a notification endpoint
      tags:
        - NotificationEndpoints
    post:
      consumes:
        - application/json
      operationId: PostNotificationEndpointIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The label was added to the notification endpoint
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a notification endpoint
      tags:
        - NotificationEndpoints
  '/notificationEndpoints/{endpointID}/labels/{labelID}':
    delete:
      operationId: DeleteNotificationEndpointsIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification endpoint ID.
          in: path
          name: endpointID
          required: true
          type: string
        - description: The ID of the label to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Endpoint or label not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a notification endpoint
      tags:
        - NotificationEndpoints
  /notificationRules:
    get:
      operationId: GetNotificationRules
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: >-
            Only show notification rules that belong to a specific organization
            ID.
          in: query
          name: orgID
          required: true
          type: string
        - description: Only show notifications that belong to the specific check ID.
          in: query
          name: checkID
          type: string
        - description: >-
            Only return notification rules that "would match" statuses which
            contain the tag key value pairs provided.
          in: query
          name: tag
          pattern: '^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$'
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of notification rules
          schema:
            $ref: '#/definitions/NotificationRules'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all notification rules
      tags:
        - NotificationRules
    post:
      consumes:
        - application/json
      operationId: CreateNotificationRule
      parameters:
        - description: Notification rule to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostNotificationRule'
      produces:
        - application/json
      responses:
        '201':
          description: Notification rule created
          schema:
            $ref: '#/definitions/NotificationRule'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a notification rule
      tags:
        - NotificationRules
  '/notificationRules/{ruleID}':
    delete:
      operationId: DeleteNotificationRulesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: The check was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a notification rule
      tags:
        - NotificationRules
    get:
      operationId: GetNotificationRulesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The notification rule requested
          schema:
            $ref: '#/definitions/NotificationRule'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a notification rule
      tags:
        - NotificationRules
    patch:
      consumes:
        - application/json
      operationId: PatchNotificationRulesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
        - description: Notification rule update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationRuleUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: An updated notification rule
          schema:
            $ref: '#/definitions/NotificationRule'
        '404':
          description: The notification rule was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a notification rule
      tags:
        - NotificationRules
    put:
      consumes:
        - application/json
      operationId: PutNotificationRulesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
        - description: Notification rule update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationRule'
      produces:
        - application/json
      responses:
        '200':
          description: An updated notification rule
          schema:
            $ref: '#/definitions/NotificationRule'
        '404':
          description: The notification rule was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a notification rule
      tags:
        - NotificationRules
  '/notificationRules/{ruleID}/labels':
    get:
      operationId: GetNotificationRulesIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a notification rule
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a notification rule
      tags:
        - NotificationRules
    post:
      consumes:
        - application/json
      operationId: PostNotificationRuleIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The label was added to the notification rule
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a notification rule
      tags:
        - NotificationRules
  '/notificationRules/{ruleID}/labels/{labelID}':
    delete:
      operationId: DeleteNotificationRulesIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
        - description: The ID of the label to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Rule or label not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete label from a notification rule
      tags:
        - NotificationRules
  '/notificationRules/{ruleID}/query':
    get:
      operationId: GetNotificationRulesIDQuery
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The notification rule ID.
          in: path
          name: ruleID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The notification rule query requested
          schema:
            $ref: '#/definitions/FluxResponse'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Notification rule not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a notification rule query
      tags:
        - Rules
  /orgs:
    get:
      operationId: GetOrgs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - default: false
          in: query
          name: descending
          required: false
          type: boolean
        - description: Filter organizations to a specific organization name.
          in: query
          name: org
          type: string
        - description: Filter organizations to a specific organization ID.
          in: query
          name: orgID
          type: string
        - description: Filter organizations to a specific user ID.
          in: query
          name: userID
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of organizations
          schema:
            $ref: '#/definitions/Organizations'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all organizations
      tags:
        - Organizations
    post:
      consumes:
        - application/json
      operationId: PostOrgs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Organization to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostOrganizationRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Organization created
          schema:
            $ref: '#/definitions/Organization'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create an organization
      tags:
        - Organizations
  '/orgs/{orgID}':
    delete:
      operationId: DeleteOrgsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the organization to delete.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Organization not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete an organization
      tags:
        - Organizations
    get:
      operationId: GetOrgsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the organization to get.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Organization details
          schema:
            $ref: '#/definitions/Organization'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve an organization
      tags:
        - Organizations
    patch:
      consumes:
        - application/json
      operationId: PatchOrgsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the organization to get.
          in: path
          name: orgID
          required: true
          type: string
        - description: Organization update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PatchOrganizationRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Organization updated
          schema:
            $ref: '#/definitions/Organization'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update an organization
      tags:
        - Organizations
  '/orgs/{orgID}/members':
    get:
      operationId: GetOrgsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of organization members
          schema:
            $ref: '#/definitions/ResourceMembers'
        '404':
          description: Organization not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all members of an organization
      tags:
        - Organizations
    post:
      consumes:
        - application/json
      operationId: PostOrgsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
        - description: User to add as member
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Added to organization created
          schema:
            $ref: '#/definitions/ResourceMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to an organization
      tags:
        - Organizations
  '/orgs/{orgID}/members/{userID}':
    delete:
      operationId: DeleteOrgsIDMembersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the member to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from an organization
      tags:
        - Organizations
  '/orgs/{orgID}/owners':
    get:
      operationId: GetOrgsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of organization owners
          schema:
            $ref: '#/definitions/ResourceOwners'
        '404':
          description: Organization not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all owners of an organization
      tags:
        - Organizations
    post:
      consumes:
        - application/json
      operationId: PostOrgsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
        - description: User to add as owner
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Organization owner added
          schema:
            $ref: '#/definitions/ResourceOwner'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add an owner to an organization
      tags:
        - Organizations
  '/orgs/{orgID}/owners/{userID}':
    delete:
      operationId: DeleteOrgsIDOwnersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the owner to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an owner from an organization
      tags:
        - Organizations
  '/orgs/{orgID}/secrets':
    get:
      operationId: GetOrgsIDSecrets
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all secret keys
          schema:
            $ref: '#/definitions/SecretKeysResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all secret keys for an organization
      tags:
        - Secrets
        - Organizations
    patch:
      consumes:
        - application/json
      operationId: PatchOrgsIDSecrets
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
        - description: Secret key value pairs to update/add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Secrets'
      produces:
        - application/json
      responses:
        '204':
          description: Keys successfully patched
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update secrets in an organization
      tags:
        - Secrets
        - Organizations
  '/orgs/{orgID}/secrets/delete':
    post:
      consumes:
        - application/json
      operationId: PostOrgsIDSecrets
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID.
          in: path
          name: orgID
          required: true
          type: string
        - description: Secret key to delete
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SecretKeys'
      produces:
        - application/json
      responses:
        '204':
          description: Keys successfully patched
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete secrets from an organization
      tags:
        - Secrets
        - Organizations
  /query:
    post:
      consumes:
        - application/json
        - application/vnd.flux
      operationId: PostQuery
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - default: identity
          description: >-
            The Accept-Encoding request HTTP header advertises which content
            encoding, usually a compression algorithm, the client is able to
            understand.
          enum:
            - gzip
            - identity
          in: header
          name: Accept-Encoding
          type: string
        - enum:
            - application/json
            - application/vnd.flux
          in: header
          name: Content-Type
          type: string
        - description: >-
            Specifies the name of the organization executing the query. Takes
            either the ID or Name interchangeably. If both `orgID` and `org` are
            specified, `org` takes precedence.
          in: query
          name: org
          type: string
        - description: >-
            Specifies the ID of the organization executing the query. If both
            `orgID` and `org` are specified, `org` takes precedence.
          in: query
          name: orgID
          type: string
        - description: Flux query or specification to execute
          in: body
          name: body
          schema: {}
      produces:
        - application/vnd.influx.arrow
        - text/csv
        - application/json
      responses:
        '200':
          description: Query results
          headers:
            Content-Encoding:
              description: >-
                The Content-Encoding entity header is used to compress the
                media-type.  When present, its value indicates which encodings
                were applied to the entity-body
              type: string
            Trace-Id:
              description: >-
                The Trace-Id header reports the request's trace ID, if one was
                generated.
              type: string
          schema:
            format: binary
            type: string
        '429':
          description: >-
            Token is temporarily over quota. The Retry-After header describes
            when to try the read again.
          headers:
            Retry-After:
              description: >-
                A non-negative decimal integer indicating the seconds to delay
                after the response is received.
              format: int32
              type: integer
        default:
          description: Error processing query
          schema:
            $ref: '#/definitions/Error'
      summary: Query InfluxDB
      tags:
        - Query
  /query/analyze:
    post:
      consumes:
        - application/json
      operationId: PostQueryAnalyze
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - enum:
            - application/json
          in: header
          name: Content-Type
          type: string
        - description: Flux or InfluxQL query to analyze
          in: body
          name: body
          schema:
            $ref: '#/definitions/Query'
      produces:
        - application/json
      responses:
        '200':
          description: Query analyze results. Errors will be empty if the query is valid.
          schema:
            $ref: '#/definitions/AnalyzeQueryResponse'
        default:
          description: Internal server error
          headers:
            X-Influx-Error:
              description: Error string describing the problem
              type: string
            X-Influx-Reference:
              description: Reference code unique to the error type
              type: integer
          schema:
            $ref: '#/definitions/Error'
      summary: Analyze an InfluxQL or Flux query
      tags:
        - Query
  /query/ast:
    post:
      consumes:
        - application/json
      description: Analyzes flux query and generates a query specification.
      operationId: PostQueryAst
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - enum:
            - application/json
          in: header
          name: Content-Type
          type: string
        - description: Analyzed Flux query to generate abstract syntax tree.
          in: body
          name: body
          schema:
            $ref: '#/definitions/LanguageRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Abstract syntax tree of the flux query.
          schema:
            $ref: '#/definitions/ASTResponse'
        default:
          description: Any response other than 200 is an internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Generate an Abstract Syntax Tree (AST) from a query
      tags:
        - Query
  /query/suggestions:
    get:
      operationId: GetQuerySuggestions
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '200':
          description: Suggestions for next functions in call chain
          schema:
            $ref: '#/definitions/FluxSuggestions'
        default:
          description: Any response other than 200 is an internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve query suggestions
      tags:
        - Query
  '/query/suggestions/{name}':
    get:
      operationId: GetQuerySuggestionsName
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The name of the branching suggestion.
          in: path
          name: name
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Suggestions for next functions in call chain
          schema:
            $ref: '#/definitions/FluxSuggestion'
        default:
          description: Any response other than 200 is an internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve query suggestions for a branching suggestion
      tags:
        - Query
  /ready:
    get:
      operationId: GetReady
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '200':
          description: The instance is ready
          schema:
            $ref: '#/definitions/Ready'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the readiness of an instance at startup
      tags:
        - Ready
    servers:
      - url: ''
  /scrapers:
    get:
      operationId: GetScrapers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Specifies the name of the scraper target.
          in: query
          name: name
          type: string
        - collectionFormat: multi
          description: >-
            List of scraper target IDs to return. If both `id` and `owner` are
            specified, only `id` is used.
          in: query
          items:
            type: string
          name: id
          type: array
        - description: Specifies the organization ID of the scraper target.
          in: query
          name: orgID
          type: string
        - description: Specifies the organization name of the scraper target.
          in: query
          name: org
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: All scraper targets
          schema:
            $ref: '#/definitions/ScraperTargetResponses'
      summary: List all scraper targets
      tags:
        - Scraper Targets
    post:
      consumes:
        - application/json
      operationId: PostScrapers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Scraper target to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ScraperTargetRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Scraper target created
          schema:
            $ref: '#/definitions/ScraperTargetResponse'
        default:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}':
    delete:
      operationId: DeleteScrapersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The identifier of the scraper target.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Scraper target deleted
        default:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a scraper target
      tags:
        - Scraper Targets
    get:
      operationId: GetScrapersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The identifier of the scraper target.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The scraper target
          schema:
            $ref: '#/definitions/ScraperTargetResponse'
        default:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a scraper target
      tags:
        - Scraper Targets
    patch:
      consumes:
        - application/json
      operationId: PatchScrapersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The identifier of the scraper target.
          in: path
          name: scraperTargetID
          required: true
          type: string
        - description: Scraper target update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ScraperTargetRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Scraper target updated
          schema:
            $ref: '#/definitions/ScraperTargetResponse'
        default:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}/labels':
    get:
      operationId: GetScrapersIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of labels for a scraper target.
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a scraper target
      tags:
        - Scraper Targets
    post:
      consumes:
        - application/json
      operationId: PostScrapersIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The newly added label
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}/labels/{labelID}':
    delete:
      operationId: DeleteScrapersIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
        - description: The label ID.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Scraper target not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}/members':
    get:
      operationId: GetScrapersIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of scraper target members
          schema:
            $ref: '#/definitions/ResourceMembers'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all users with member privileges for a scraper target
      tags:
        - Scraper Targets
    post:
      consumes:
        - application/json
      operationId: PostScrapersIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
        - description: User to add as member
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Member added to scraper targets
          schema:
            $ref: '#/definitions/ResourceMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}/members/{userID}':
    delete:
      operationId: DeleteScrapersIDMembersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of member to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}/owners':
    get:
      operationId: GetScrapersIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of scraper target owners
          schema:
            $ref: '#/definitions/ResourceOwners'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all owners of a scraper target
      tags:
        - Scraper Targets
    post:
      consumes:
        - application/json
      operationId: PostScrapersIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
        - description: User to add as owner
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Scraper target owner added
          schema:
            $ref: '#/definitions/ResourceOwner'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add an owner to a scraper target
      tags:
        - Scraper Targets
  '/scrapers/{scraperTargetID}/owners/{userID}':
    delete:
      operationId: DeleteScrapersIDOwnersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of owner to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The scraper target ID.
          in: path
          name: scraperTargetID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an owner from a scraper target
      tags:
        - Scraper Targets
  /setup:
    get:
      description: >-
        Returns `true` if no default user, organization, or bucket has been
        created.
      operationId: GetSetup
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '200':
          description: allowed true or false
          schema:
            $ref: '#/definitions/IsOnboarding'
      summary: 'Check if database has default user, org, bucket'
      tags:
        - Setup
    post:
      consumes:
        - application/json
      description: 'Post an onboarding request to set up initial user, org and bucket.'
      operationId: PostSetup
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Source to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OnboardingRequest'
      produces:
        - application/json
      responses:
        '201':
          description: 'Created default user, bucket, org'
          schema:
            $ref: '#/definitions/OnboardingResponse'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Set up initial user, org and bucket'
      tags:
        - Setup
  /signin:
    post:
      operationId: PostSignin
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '204':
          description: Successfully authenticated
        '401':
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: user account is disabled
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unsuccessful authentication
          schema:
            $ref: '#/definitions/Error'
      security:
        - BasicAuth: []
      summary: Exchange basic auth credentials for session
  /signout:
    post:
      operationId: PostSignout
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
      produces:
        - application/json
      responses:
        '204':
          description: Session successfully expired
        '401':
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unsuccessful session expiry
          schema:
            $ref: '#/definitions/Error'
      summary: Expire the current session
  /sources:
    get:
      operationId: GetSources
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The name of the organization.
          in: query
          name: org
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of sources
          schema:
            $ref: '#/definitions/Sources'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all sources
      tags:
        - Sources
    post:
      consumes:
        - application/json
      operationId: PostSources
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Source to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Source'
      produces:
        - application/json
      responses:
        '201':
          description: Created Source
          schema:
            $ref: '#/definitions/Source'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a source
      tags:
        - Sources
  '/sources/{sourceID}':
    delete:
      operationId: DeleteSourcesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The source ID.
          in: path
          name: sourceID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: View not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a source
      tags:
        - Sources
    get:
      operationId: GetSourcesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The source ID.
          in: path
          name: sourceID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A source
          schema:
            $ref: '#/definitions/Source'
        '404':
          description: Source not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a source
      tags:
        - Sources
    patch:
      consumes:
        - application/json
      operationId: PatchSourcesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The source ID.
          in: path
          name: sourceID
          required: true
          type: string
        - description: Source update
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Source'
      produces:
        - application/json
      responses:
        '200':
          description: Created Source
          schema:
            $ref: '#/definitions/Source'
        '404':
          description: Source not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a Source
      tags:
        - Sources
  '/sources/{sourceID}/buckets':
    get:
      operationId: GetSourcesIDBuckets
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The source ID.
          in: path
          name: sourceID
          required: true
          type: string
        - description: The name of the organization.
          in: query
          name: org
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A source
          schema:
            $ref: '#/definitions/Buckets'
        '404':
          description: Source not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Get buckets in a source
      tags:
        - Sources
        - Buckets
  '/sources/{sourceID}/health':
    get:
      operationId: GetSourcesIDHealth
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The source ID.
          in: path
          name: sourceID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The source is healthy
          schema:
            $ref: '#/definitions/HealthCheck'
        '503':
          description: The source is not healthy
          schema:
            $ref: '#/definitions/HealthCheck'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Get the health of a source
      tags:
        - Sources
  /stacks:
    get:
      operationId: ListStacks
      parameters:
        - description: The organization id of the stacks
          in: query
          name: orgID
          required: true
          type: string
        - description: A collection of names to filter the list by.
          in: query
          name: name
          type: string
        - description: A collection of stackIDs to filter the list by.
          in: query
          name: stackID
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Influx stacks found
          schema:
            properties:
              stacks:
                items:
                  $ref: '#/definitions/Stack'
                type: array
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all installed InfluxDB templates
      tags:
        - InfluxDB Templates
    post:
      consumes:
        - application/json
      operationId: CreateStack
      parameters:
        - description: Stack to create.
          in: body
          name: body
          required: true
          schema:
            properties:
              description:
                type: string
              name:
                type: string
              orgID:
                type: string
              urls:
                items:
                  type: string
                type: array
            title: PostStackRequest
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: InfluxDB Stack created
          schema:
            $ref: '#/definitions/Stack'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new stack
      tags:
        - InfluxDB Templates
  '/stacks/{stack_id}':
    delete:
      operationId: DeleteStack
      parameters:
        - description: Theidentifier of the stack.
          in: path
          name: stack_id
          required: true
          type: string
        - description: The identifier of the organization.
          in: query
          name: orgID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: The stack and its associated resources are deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a stack and associated resources
      tags:
        - InfluxDB Templates
    get:
      operationId: ReadStack
      parameters:
        - description: Theidentifier of the stack.
          in: path
          name: stack_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The InfluxDB stack
          schema:
            $ref: '#/definitions/Stack'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a stack
      tags:
        - InfluxDB Templates
    patch:
      consumes:
        - application/json
      operationId: UpdateStack
      parameters:
        - description: Theidentifier of the stack.
          in: path
          name: stack_id
          required: true
          type: string
        - description: Influx stack to update.
          in: body
          name: body
          required: true
          schema:
            properties:
              additionalResources:
                items:
                  properties:
                    kind:
                      type: string
                    resourceID:
                      type: string
                    templateMetaName:
                      type: string
                  required:
                    - kind
                    - resourceID
                  type: object
                type: array
              description:
                type: string
                x-nullable: true
              name:
                type: string
                x-nullable: true
              templateURLs:
                items:
                  type: string
                type: array
                x-nullable: true
            title: PatchStackRequest
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Influx stack updated
          schema:
            $ref: '#/definitions/Stack'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update an InfluxDB Stack
      tags:
        - InfluxDB Templates
  '/stacks/{stack_id}/uninstall':
    post:
      operationId: UninstallStack
      parameters:
        - description: The stack id
          in: path
          name: stack_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Influx stack uninstalled
          schema:
            $ref: '#/definitions/Stack'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Uninstall an InfluxDB Stack
      tags:
        - InfluxDB Templates
  /tasks:
    get:
      operationId: GetTasks
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Returns task with a specific name.
          in: query
          name: name
          type: string
        - description: Return tasks after a specified ID.
          in: query
          name: after
          type: string
        - description: Filter tasks to a specific user ID.
          in: query
          name: user
          type: string
        - description: Filter tasks to a specific organization name.
          in: query
          name: org
          type: string
        - description: Filter tasks to a specific organization ID.
          in: query
          name: orgID
          type: string
        - description: Filter tasks by a status--"inactive" or "active".
          enum:
            - active
            - inactive
          in: query
          name: status
          type: string
        - default: 100
          description: The number of tasks to return
          in: query
          maximum: 500
          minimum: 1
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of tasks
          schema:
            $ref: '#/definitions/Tasks'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all tasks
      tags:
        - Tasks
    post:
      consumes:
        - application/json
      operationId: PostTasks
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Task to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TaskCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Task created
          schema:
            $ref: '#/definitions/Task'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new task
      tags:
        - Tasks
  '/tasks/{taskID}':
    delete:
      description: Deletes a task and all associated records
      operationId: DeleteTasksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the task to delete.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Task deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a task
      tags:
        - Tasks
    get:
      operationId: GetTasksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Task details
          schema:
            $ref: '#/definitions/Task'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a task
      tags:
        - Tasks
    patch:
      consumes:
        - application/json
      description: Update a task. This will cancel all queued runs.
      operationId: PatchTasksID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: Task update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TaskUpdateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Task updated
          schema:
            $ref: '#/definitions/Task'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a task
      tags:
        - Tasks
  '/tasks/{taskID}/labels':
    get:
      operationId: GetTasksIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a task
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a task
      tags:
        - Tasks
    post:
      consumes:
        - application/json
      operationId: PostTasksIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: A list of all labels for a task
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a task
      tags:
        - Tasks
  '/tasks/{taskID}/labels/{labelID}':
    delete:
      operationId: DeleteTasksIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: The label ID.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Task not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a task
      tags:
        - Tasks
  '/tasks/{taskID}/logs':
    get:
      operationId: GetTasksIDLogs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: All logs for a task
          schema:
            $ref: '#/definitions/Logs'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve all logs for a task
      tags:
        - Tasks
  '/tasks/{taskID}/members':
    get:
      operationId: GetTasksIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of users who have member privileges for a task
          schema:
            $ref: '#/definitions/ResourceMembers'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all task members
      tags:
        - Tasks
    post:
      consumes:
        - application/json
      operationId: PostTasksIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: User to add as member
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Added to task members
          schema:
            $ref: '#/definitions/ResourceMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to a task
      tags:
        - Tasks
  '/tasks/{taskID}/members/{userID}':
    delete:
      operationId: DeleteTasksIDMembersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the member to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from a task
      tags:
        - Tasks
  '/tasks/{taskID}/owners':
    get:
      operationId: GetTasksIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of users who have owner privileges for a task
          schema:
            $ref: '#/definitions/ResourceOwners'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all owners of a task
      tags:
        - Tasks
    post:
      consumes:
        - application/json
      operationId: PostTasksIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: User to add as owner
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Added to task owners
          schema:
            $ref: '#/definitions/ResourceOwner'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add an owner to a task
      tags:
        - Tasks
  '/tasks/{taskID}/owners/{userID}':
    delete:
      operationId: DeleteTasksIDOwnersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the owner to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an owner from a task
      tags:
        - Tasks
  '/tasks/{taskID}/runs':
    get:
      operationId: GetTasksIDRuns
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the task to get runs for.
          in: path
          name: taskID
          required: true
          type: string
        - description: Returns runs after a specific ID.
          in: query
          name: after
          type: string
        - default: 100
          description: The number of runs to return
          in: query
          maximum: 500
          minimum: 1
          name: limit
          type: integer
        - description: 'Filter runs to those scheduled after this time, RFC3339'
          format: date-time
          in: query
          name: afterTime
          type: string
        - description: 'Filter runs to those scheduled before this time, RFC3339'
          format: date-time
          in: query
          name: beforeTime
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of task runs
          schema:
            $ref: '#/definitions/Runs'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List runs for a task
      tags:
        - Tasks
    post:
      consumes:
        - application/json
      operationId: PostTasksIDRuns
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: path
          name: taskID
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RunManually'
      produces:
        - application/json
      responses:
        '201':
          description: Run scheduled to start
          schema:
            $ref: '#/definitions/Run'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: 'Manually start a task run, overriding the current schedule'
      tags:
        - Tasks
  '/tasks/{taskID}/runs/{runID}':
    delete:
      operationId: DeleteTasksIDRunsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: The run ID.
          in: path
          name: runID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Cancel a running task
      tags:
        - Tasks
    get:
      operationId: GetTasksIDRunsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: The run ID.
          in: path
          name: runID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The run record
          schema:
            $ref: '#/definitions/Run'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a single run for a task
      tags:
        - Tasks
  '/tasks/{taskID}/runs/{runID}/logs':
    get:
      operationId: GetTasksIDRunsIDLogs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: ID of task to get logs for.
          in: path
          name: taskID
          required: true
          type: string
        - description: ID of run to get logs for.
          in: path
          name: runID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: All logs for a run
          schema:
            $ref: '#/definitions/Logs'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve all logs for a run
      tags:
        - Tasks
  '/tasks/{taskID}/runs/{runID}/retry':
    post:
      consumes:
        - application/json; charset=utf-8
      operationId: PostTasksIDRunsIDRetry
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The task ID.
          in: path
          name: taskID
          required: true
          type: string
        - description: The run ID.
          in: path
          name: runID
          required: true
          type: string
        - in: body
          name: body
          schema:
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Run that has been queued
          schema:
            $ref: '#/definitions/Run'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retry a task run
      tags:
        - Tasks
  /telegraf/plugins:
    get:
      operationId: GetTelegrafPlugins
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The type of plugin desired.
          in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of Telegraf plugins.
          schema:
            $ref: '#/definitions/TelegrafPlugins'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all Telegraf plugins
      tags:
        - Telegraf Plugins
  /telegrafs:
    get:
      operationId: GetTelegrafs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The organization ID the Telegraf config belongs to.
          in: query
          name: orgID
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of Telegraf configurations
          schema:
            $ref: '#/definitions/Telegrafs'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all Telegraf configurations
      tags:
        - Telegrafs
    post:
      consumes:
        - application/json
      operationId: PostTelegrafs
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Telegraf configuration to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TelegrafRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Telegraf configuration created
          schema:
            $ref: '#/definitions/Telegraf'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a Telegraf configuration
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}':
    delete:
      operationId: DeleteTelegrafsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf configuration ID.
          in: path
          name: telegrafID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a Telegraf configuration
      tags:
        - Telegrafs
    get:
      operationId: GetTelegrafsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf configuration ID.
          in: path
          name: telegrafID
          required: true
          type: string
        - default: application/toml
          enum:
            - application/toml
            - application/json
            - application/octet-stream
          in: header
          name: Accept
          required: false
          type: string
      produces:
        - application/json
        - application/octet-stream
        - application/toml
      responses:
        '200':
          description: Telegraf configuration details
          examples:
            application/octet-stream: |-
              [agent]
              interval = "10s"
            application/toml: |-
              [agent]
              interval = "10s"
          schema:
            $ref: '#/definitions/Telegraf'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a Telegraf configuration
      tags:
        - Telegrafs
    put:
      consumes:
        - application/json
      operationId: PutTelegrafsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
        - description: Telegraf configuration update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TelegrafRequest'
      produces:
        - application/json
      responses:
        '200':
          description: An updated Telegraf configurations
          schema:
            $ref: '#/definitions/Telegraf'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a Telegraf configuration
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}/labels':
    get:
      operationId: GetTelegrafsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a Telegraf config
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a Telegraf config
      tags:
        - Telegrafs
    post:
      consumes:
        - application/json
      operationId: PostTelegrafsIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The label added to the Telegraf config
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a Telegraf config
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}/labels/{labelID}':
    delete:
      operationId: DeleteTelegrafsIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
        - description: The label ID.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Telegraf config not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a Telegraf config
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}/members':
    get:
      operationId: GetTelegrafsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of Telegraf config members
          schema:
            $ref: '#/definitions/ResourceMembers'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all users with member privileges for a Telegraf config
      tags:
        - Telegrafs
    post:
      consumes:
        - application/json
      operationId: PostTelegrafsIDMembers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
        - description: User to add as member
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: Member added to Telegraf config
          schema:
            $ref: '#/definitions/ResourceMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to a Telegraf config
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}/members/{userID}':
    delete:
      operationId: DeleteTelegrafsIDMembersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the member to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from a Telegraf config
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}/owners':
    get:
      operationId: GetTelegrafsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf configuration ID.
          in: path
          name: telegrafID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Returns Telegraf configuration owners as a ResourceOwners list
          schema:
            $ref: '#/definitions/ResourceOwners'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all owners of a Telegraf configuration
      tags:
        - Telegrafs
    post:
      consumes:
        - application/json
      operationId: PostTelegrafsIDOwners
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The Telegraf configuration ID.
          in: path
          name: telegrafID
          required: true
          type: string
        - description: User to add as owner
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AddResourceMemberRequestBody'
      produces:
        - application/json
      responses:
        '201':
          description: >-
            Telegraf configuration owner was added. Returns a ResourceOwner that
            references the User.
          schema:
            $ref: '#/definitions/ResourceOwner'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add an owner to a Telegraf configuration
      tags:
        - Telegrafs
  '/telegrafs/{telegrafID}/owners/{userID}':
    delete:
      operationId: DeleteTelegrafsIDOwnersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the owner to remove.
          in: path
          name: userID
          required: true
          type: string
        - description: The Telegraf config ID.
          in: path
          name: telegrafID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an owner from a Telegraf config
      tags:
        - Telegrafs
  /templates/apply:
    post:
      consumes:
        - application/json
        - application/x-jsonnet
        - text/yml
      operationId: ApplyTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TemplateApply'
      produces:
        - application/json
      responses:
        '200':
          description: >
            Influx package dry-run successful, no new resources created. The
            provided diff and summary will not have IDs for resources that do
            not exist at the time of the dry run.
          schema:
            $ref: '#/definitions/TemplateSummary'
        '201':
          description: >
            Influx package applied successfully. Newly created resources created
            available in summary. The diff compares the state of the world
            before the package is applied with the changes the application will
            impose. This corresponds to `"dryRun": true`
          schema:
            $ref: '#/definitions/TemplateSummary'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Apply or dry-run an InfluxDB Template
      tags:
        - InfluxDB Templates
  /templates/export:
    post:
      consumes:
        - application/json
      operationId: ExportTemplate
      parameters:
        - description: Export resources as an InfluxDB template.
          in: body
          name: body
          required: false
          schema: {}
      produces:
        - application/json
        - application/x-yaml
      responses:
        '200':
          description: InfluxDB template created
          schema:
            $ref: '#/definitions/Template'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Export a new Influx Template
      tags:
        - InfluxDB Templates
  /users:
    get:
      operationId: GetUsers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - in: query
          minimum: 0
          name: offset
          required: false
          type: integer
        - default: 20
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: >
            The last resource ID from which to seek from (but not including).
            This is to be used instead of `offset`.
          in: query
          name: after
          required: false
          type: string
        - in: query
          name: name
          type: string
        - in: query
          name: id
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of users
          schema:
            $ref: '#/definitions/Users'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: List all users
      tags:
        - Users
    post:
      consumes:
        - application/json
      operationId: PostUsers
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: User to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '201':
          description: User created
          schema:
            $ref: '#/definitions/UserResponse'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a user
      tags:
        - Users
  '/users/{userID}':
    delete:
      operationId: DeleteUsersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the user to delete.
          in: path
          name: userID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: User deleted
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a user
      tags:
        - Users
    get:
      operationId: GetUsersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The user ID.
          in: path
          name: userID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: User details
          schema:
            $ref: '#/definitions/UserResponse'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a user
      tags:
        - Users
    patch:
      consumes:
        - application/json
      operationId: PatchUsersID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The ID of the user to update.
          in: path
          name: userID
          required: true
          type: string
        - description: User update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: User updated
          schema:
            $ref: '#/definitions/UserResponse'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Update a user
      tags:
        - Users
  '/users/{userID}/password':
    post:
      consumes:
        - application/json
      operationId: PostUsersIDPassword
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The user ID.
          in: path
          name: userID
          required: true
          type: string
        - description: New password
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PasswordResetBody'
      produces:
        - application/json
      responses:
        '204':
          description: Password successfully updated
        default:
          description: Unsuccessful authentication
          schema:
            $ref: '#/definitions/Error'
      security:
        - BasicAuth: []
      summary: Update a password
      tags:
        - Users
  /variables:
    get:
      operationId: GetVariables
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The name of the organization.
          in: query
          name: org
          type: string
        - description: The organization ID.
          in: query
          name: orgID
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of variables for an organization
          schema:
            $ref: '#/definitions/Variables'
        '400':
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: List all variables
      tags:
        - Variables
    post:
      consumes:
        - application/json
      operationId: PostVariables
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: Variable to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Variable'
      produces:
        - application/json
      responses:
        '201':
          description: Variable created
          schema:
            $ref: '#/definitions/Variable'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a variable
      tags:
        - Variables
  '/variables/{variableID}':
    delete:
      operationId: DeleteVariablesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Variable deleted
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a variable
      tags:
        - Variables
    get:
      operationId: GetVariablesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Variable found
          schema:
            $ref: '#/definitions/Variable'
        '404':
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a variable
      tags:
        - Variables
    patch:
      consumes:
        - application/json
      operationId: PatchVariablesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
        - description: Variable update to apply
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Variable'
      produces:
        - application/json
      responses:
        '200':
          description: Variable updated
          schema:
            $ref: '#/definitions/Variable'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Update a variable
      tags:
        - Variables
    put:
      consumes:
        - application/json
      operationId: PutVariablesID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
        - description: Variable to replace
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Variable'
      produces:
        - application/json
      responses:
        '200':
          description: Variable updated
          schema:
            $ref: '#/definitions/Variable'
        default:
          description: Non 2XX error response from server.
          schema:
            $ref: '#/definitions/Error'
      summary: Replace a variable
      tags:
        - Variables
  '/variables/{variableID}/labels':
    get:
      operationId: GetVariablesIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of all labels for a variable
          schema:
            $ref: '#/definitions/LabelsResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: List all labels for a variable
      tags:
        - Variables
    post:
      consumes:
        - application/json
      operationId: PostVariablesIDLabels
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
        - description: Label to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LabelMapping'
      produces:
        - application/json
      responses:
        '201':
          description: The newly added label
          schema:
            $ref: '#/definitions/LabelResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Add a label to a variable
      tags:
        - Variables
  '/variables/{variableID}/labels/{labelID}':
    delete:
      operationId: DeleteVariablesIDLabelsID
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - description: The variable ID.
          in: path
          name: variableID
          required: true
          type: string
        - description: The label ID to delete.
          in: path
          name: labelID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Variable not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a label from a variable
      tags:
        - Variables
  /write:
    post:
      consumes:
        - text/plain
      operationId: PostWrite
      parameters:
        - description: OpenTracing span context
          in: header
          name: Zap-Trace-Span
          required: false
          type: string
          x-example:
            baggage:
              key: value
            span_id: '1'
            trace_id: '1'
        - default: identity
          description: >-
            When present, its value indicates to the database that compression
            is applied to the line-protocol body.
          enum:
            - gzip
            - identity
          in: header
          name: Content-Encoding
          type: string
        - default: text/plain; charset=utf-8
          description: >-
            Content-Type is used to indicate the format of the data sent to the
            server.
          enum:
            - text/plain
            - text/plain; charset=utf-8
            - application/vnd.influx.arrow
          in: header
          name: Content-Type
          type: string
        - description: >-
            Content-Length is an entity header is indicating the size of the
            entity-body, in bytes, sent to the database. If the length is
            greater than the database max body configuration option, a 413
            response is sent.
          in: header
          name: Content-Length
          type: integer
        - default: application/json
          description: Specifies the return content format.
          enum:
            - application/json
          in: header
          name: Accept
          type: string
        - description: >-
            Specifies the destination organization for writes. Takes either the
            ID or Name interchangeably. If both `orgID` and `org` are specified,
            `org` takes precedence.
          in: query
          name: org
          required: true
          type: string
        - description: >-
            Specifies the ID of the destination organization for writes. If both
            `orgID` and `org` are specified, `org` takes precedence.
          in: query
          name: orgID
          type: string
        - description: The destination bucket for writes.
          in: query
          name: bucket
          required: true
          type: string
        - description: The precision for the unix timestamps within the body line-protocol.
          enum:
            - ms
            - s
            - us
            - ns
          in: query
          name: precision
          type: string
        - description: Line protocol body
          in: body
          name: body
          required: true
          schema:
            format: byte
            type: string
      produces:
        - application/json
      responses:
        '204':
          description: >-
            Write data is correctly formatted and accepted for writing to the
            bucket.
        '400':
          description: >-
            Line protocol poorly formed and no points were written.  Response
            can be used to determine the first malformed line in the body
            line-protocol. All data in body was rejected and not written.
          schema:
            $ref: '#/definitions/LineProtocolError'
        '401':
          description: >-
            Token does not have sufficient permissions to write to this
            organization and bucket or the organization and bucket do not exist.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: No token was sent and they are required.
          schema:
            $ref: '#/definitions/Error'
        '413':
          description: >-
            Write has been rejected because the payload is too large. Error
            message returns max size supported. All data in body was rejected
            and not written.
          schema:
            $ref: '#/definitions/LineProtocolLengthError'
        '429':
          description: >-
            Token is temporarily over quota. The Retry-After header describes
            when to try the write again.
          headers:
            Retry-After:
              description: >-
                A non-negative decimal integer indicating the seconds to delay
                after the response is received.
              format: int32
              type: integer
        '503':
          description: >-
            Server is temporarily unavailable to accept writes.  The Retry-After
            header describes when to try the write again.
          headers:
            Retry-After:
              description: >-
                A non-negative decimal integer indicating the seconds to delay
                after the response is received.
              format: int32
              type: integer
        default:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      summary: Write time series data into InfluxDB
      tags:
        - Write
securityDefinitions:
  BasicAuth:
    type: basic
swagger: '2.0'
x-components:
  parameters:
    After:
      description: >
        The last resource ID from which to seek from (but not including). This
        is to be used instead of `offset`.
      in: query
      name: after
      required: false
      type: string
    Descending:
      default: false
      in: query
      name: descending
      required: false
      type: boolean
    Limit:
      default: 20
      in: query
      maximum: 100
      minimum: 1
      name: limit
      required: false
      type: integer
    Offset:
      in: query
      minimum: 0
      name: offset
      required: false
      type: integer
    SortBy:
      in: query
      name: sortBy
      required: false
      schema:
        type: string
    TraceSpan:
      description: OpenTracing span context
      in: header
      name: Zap-Trace-Span
      required: false
      type: string
      x-example:
        baggage:
          key: value
        span_id: '1'
        trace_id: '1'
  responses:
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
      description: Non 2XX error response from server.

