basePath: /api
definitions:
  AlertAnnotationInfo:
    additionalProperties: false
    properties:
      annotationType:
        format: int32
        type: integer
      id:
        type: string
        x-nullable: true
      text:
        type: string
        x-nullable: true
      timestamp:
        format: date-time
        type: string
      userId:
        type: string
        x-nullable: true
    type: object
  AlertAttachment:
    additionalProperties: false
    properties:
      content:
        type: string
        x-nullable: true
      contentType:
        type: string
        x-nullable: true
      encoding:
        $ref: '#/definitions/Encoding'
      id:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
    type: object
  AlertAttachmentInfo:
    additionalProperties: false
    properties:
      contentType:
        type: string
        x-nullable: true
      id:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
    type: object
  AlertAuditReportFileInfo:
    additionalProperties: false
    type: object
  AlertCounts:
    additionalProperties: false
    properties:
      acked:
        format: int64
        type: integer
      closed:
        format: int64
        type: integer
      end:
        format: date-time
        type: string
        x-nullable: true
      lastModified:
        format: date-time
        type: string
        x-nullable: true
      start:
        format: date-time
        type: string
        x-nullable: true
      unhandled:
        format: int64
        type: integer
    type: object
  AlertDeliveryStatusCodes:
    enum:
      - 0
      - 1
      - 2
      - 4
      - 6
      - 8
      - 22
      - 24
      - 26
      - 30
      - 31
    format: int32
    type: integer
  AlertDeliveryStatusInfo:
    additionalProperties: false
    properties:
      statusCode:
        $ref: '#/definitions/AlertDeliveryStatusCodes'
      users:
        items:
          $ref: '#/definitions/UserDeliveryStatusInfo'
        type: array
        x-nullable: true
    type: object
  AlertFilterActions:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  AlertFilterModes:
    enum:
      - 0
      - 1
    format: int32
    type: integer
  AlertFilterPublic:
    additionalProperties: false
    properties:
      alertIds:
        items:
          type: string
        type: array
        x-nullable: true
      alertsAfterId:
        type: string
        x-nullable: true
      categoryIds:
        items:
          type: string
        type: array
        x-nullable: true
      continuationToken:
        $ref: '#/definitions/PagedResultsPublicContinuationToken'
      maxCreationDate:
        format: date-time
        type: string
        x-nullable: true
      minCreationDate:
        format: date-time
        type: string
        x-nullable: true
      modifiedSince:
        format: date-time
        type: string
        x-nullable: true
      showPersonalHiddenCategories:
        type: boolean
      statusCodes:
        $ref: '#/definitions/AlertStatusCodes'
      teamId:
        type: string
        x-nullable: true
      textToSearch:
        type: string
        x-nullable: true
    type: object
  AlertHistoryInfoDetailed:
    additionalProperties: false
    properties:
      acknowledged:
        format: date-time
        type: string
        x-nullable: true
      acknowledgedgements:
        items:
          type: string
        type: array
        x-nullable: true
      closed:
        format: date-time
        type: string
        x-nullable: true
      closedBy:
        type: string
        x-nullable: true
      created:
        format: date-time
        type: string
      historyEntries:
        items:
          $ref: '#/definitions/AlertHistoryInfoEntry'
        type: array
        x-nullable: true
    type: object
  AlertHistoryInfoEntry:
    additionalProperties: false
    properties:
      id:
        type: string
        x-nullable: true
      timestamp:
        format: date-time
        type: string
      type:
        $ref: '#/definitions/AlertHistoryInfoUserEntryType'
      userId:
        type: string
        x-nullable: true
    type: object
  AlertHistoryInfoUserEntryType:
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
    format: int32
    type: integer
  AlertInfo:
    additionalProperties: false
    properties:
      annotations:
        items:
          $ref: '#/definitions/AlertAnnotationInfo'
        type: array
        x-nullable: true
      attachments:
        items:
          $ref: '#/definitions/AlertAttachment'
        type: array
        x-nullable: true
      category:
        type: string
        x-nullable: true
      categoryId:
        type: string
        x-nullable: true
      eventId:
        type: string
        x-nullable: true
      eventSourceId:
        type: string
        x-nullable: true
      eventSourceType:
        $ref: '#/definitions/EventSourceTypes'
      flags:
        format: int32
        type: integer
      history:
        $ref: '#/definitions/AlertHistoryInfoDetailed'
      id:
        type: string
        x-nullable: true
      lastModified:
        format: date-time
        type: string
      parameters:
        items:
          $ref: '#/definitions/EventParameterInfo'
        type: array
        x-nullable: true
      severity:
        $ref: '#/definitions/AlertSeverities'
      status:
        $ref: '#/definitions/AlertStatusCodes'
      subscriptionId:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
      text:
        type: string
        x-nullable: true
      title:
        type: string
        x-nullable: true
    type: object
  AlertNotificationInfo:
    additionalProperties: false
    properties:
      address:
        type: string
        x-nullable: true
      channelType:
        $ref: '#/definitions/AlertNotificationInfoChannelType'
      deviceName:
        type: string
        x-nullable: true
      lastUpdate:
        format: date-time
        type: string
      messageStatus:
        $ref: '#/definitions/AlertNotificationInfoMessageStatus'
      userId:
        type: string
        x-nullable: true
      userStatus:
        $ref: '#/definitions/AlertNotificationInfoUserStatus'
    type: object
  AlertNotificationInfoChannelType:
    enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
    format: int32
    type: integer
  AlertNotificationInfoMessageStatus:
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
    format: int32
    type: integer
  AlertNotificationInfoUserStatus:
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
    format: int32
    type: integer
  AlertReport:
    additionalProperties: false
    properties:
      last24Hours:
        $ref: '#/definitions/AlertCounts'
      subscriptionId:
        type: string
        x-nullable: true
      teamCurrentDuty:
        $ref: '#/definitions/AlertCounts'
      teamId:
        type: string
        x-nullable: true
      teamLastDuty:
        $ref: '#/definitions/AlertCounts'
      userId:
        type: string
        x-nullable: true
      userLastDutyChange:
        $ref: '#/definitions/AlertCounts'
    type: object
  AlertResponseModes:
    enum:
      - 2
      - 4
    format: int32
    type: integer
  AlertSettings:
    additionalProperties: false
    properties:
      filterAction:
        $ref: '#/definitions/AlertFilterActions'
      filterMode:
        $ref: '#/definitions/AlertFilterModes'
      optOutMode:
        $ref: '#/definitions/TeamCategoryOptOutModes'
      persistentNotificicationMode:
        $ref: '#/definitions/PersistentNotificationModes'
      responseMode:
        $ref: '#/definitions/AlertResponseModes'
      responseTime:
        format: int32
        type: integer
    type: object
  AlertSeverities:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  AlertStatusCodes:
    enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
    format: int32
    type: integer
  CategoryAugmentation:
    additionalProperties: false
    properties:
      enabled:
        type: boolean
      name:
        type: string
        x-nullable: true
      type:
        $ref: '#/definitions/CategoryAugmentationType'
      value:
        type: string
        x-nullable: true
    type: object
  CategoryAugmentationType:
    enum:
      - 0
      - 1
      - 2
      - 3
    format: int32
    type: integer
  CategoryInfo:
    additionalProperties: false
    properties:
      augmentations:
        items:
          $ref: '#/definitions/CategoryAugmentation'
        type: array
        x-nullable: true
      color:
        type: string
        x-nullable: true
      id:
        type: string
        x-nullable: true
      imageName:
        type: string
        x-nullable: true
      isDefault:
        readOnly: true
        type: boolean
      keywordMatching:
        $ref: '#/definitions/KeywordMatchingType'
      keywords:
        items:
          type: string
        type: array
        x-nullable: true
      lastMatch:
        format: date-time
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      options:
        $ref: '#/definitions/CategoryInfoOptions'
      order:
        format: int32
        type: integer
    type: object
  CategoryInfoOptions:
    enum:
      - 0
      - 1
      - 2
      - 4
      - 8
    format: int32
    type: integer
  CategoryMetrics:
    additionalProperties: false
    properties:
      categoryId:
        type: string
        x-nullable: true
      last24Hours:
        format: int64
        type: integer
      lastAlert:
        format: date-time
        type: string
        x-nullable: true
      subscriberCount:
        format: int32
        type: integer
    type: object
  CategorySubscriptionInfo:
    additionalProperties: false
    properties:
      status:
        $ref: '#/definitions/CategorySubscriptionStatus'
      userId:
        type: string
        x-nullable: true
    type: object
  CategorySubscriptionStatus:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  ChangeAlertStatusFilterInfo:
    additionalProperties: false
    properties:
      categoryIds:
        items:
          type: string
        type: array
        x-nullable: true
      maxDate:
        format: date-time
        type: string
        x-nullable: true
      minDate:
        format: date-time
        type: string
        x-nullable: true
      scope:
        $ref: '#/definitions/StatusChangeScope'
      teamIds:
        items:
          type: string
        type: array
        x-nullable: true
    type: object
  ChangeAlertStatusInfo:
    additionalProperties: false
    properties:
      description:
        type: string
        x-nullable: true
      userId:
        type: string
        x-nullable: true
    type: object
  ChangeAlertStatusMultipleInfo:
    additionalProperties: false
    properties:
      alertIds:
        items:
          type: string
        type: array
        x-nullable: true
      description:
        type: string
        x-nullable: true
      userId:
        type: string
        x-nullable: true
    type: object
  ChannelPriceInfo:
    additionalProperties: false
    properties:
      smsPerMessage:
        format: int32
        type: integer
      voicePerMinute:
        format: int32
        type: integer
    type: object
  ChannelTypes:
    enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
    format: int32
    type: integer
  ContactAddressInfo:
    additionalProperties: false
    properties:
      address:
        type: string
        x-nullable: true
      channel:
        $ref: '#/definitions/ChannelTypes'
      created:
        format: date-time
        type: string
      device:
        $ref: '#/definitions/Device'
      id:
        type: string
        x-nullable: true
      lastUpdated:
        format: date-time
        type: string
      options:
        format: int32
        type: integer
      userId:
        type: string
        x-nullable: true
    type: object
  DeleteRangeInfo:
    additionalProperties: false
    properties:
      from:
        format: date-time
        type: string
      to:
        format: date-time
        type: string
    type: object
  Device:
    additionalProperties: false
    properties:
      appVersion:
        type: string
        x-nullable: true
      deviceId:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      osVersion:
        type: string
        x-nullable: true
      ringtone:
        type: string
        x-nullable: true
      ringtoneDisabled:
        type: boolean
      type:
        $ref: '#/definitions/DeviceType'
    type: object
  DeviceType:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  DutyAuditReportFileInfo:
    additionalProperties: false
    type: object
  DutySummaryInfo:
    additionalProperties: false
    properties:
      dutyEnd:
        format: date-time
        type: string
        x-nullable: true
      dutyId:
        type: string
        x-nullable: true
      dutyStart:
        format: date-time
        type: string
        x-nullable: true
    type: object
  Encoding:
    enum:
      - 0
      - 1
    format: int32
    type: integer
  ErrorResponseContent:
    additionalProperties: false
    properties:
      code:
        format: int32
        type: integer
      details:
        type: string
        x-nullable: true
      errors:
        items:
          $ref: '#/definitions/ErrorResponseContentBase'
        type: array
        x-nullable: true
      message:
        type: string
        x-nullable: true
      requestId:
        type: string
        x-nullable: true
    type: object
  ErrorResponseContentBase:
    additionalProperties: false
    properties:
      details:
        type: string
        x-nullable: true
      message:
        type: string
        x-nullable: true
    type: object
  EventFilter:
    additionalProperties: false
    properties:
      continuationToken:
        $ref: '#/definitions/PagedResultsPublicContinuationToken'
      eventStatusCode:
        $ref: '#/definitions/EventStatusCodes'
      maxCreationDate:
        format: date-time
        type: string
        x-nullable: true
      minCreationDate:
        format: date-time
        type: string
        x-nullable: true
      modifiedSince:
        format: date-time
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
      textToSearch:
        type: string
        x-nullable: true
    type: object
  EventParameterInfo:
    additionalProperties: false
    properties:
      name:
        type: string
        x-nullable: true
      order:
        format: int32
        type: integer
      type:
        $ref: '#/definitions/EventParameterTypes'
      value:
        type: string
        x-nullable: true
    type: object
  EventParameterTypes:
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 100
    format: int32
    type: integer
  EventSeverities:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  EventSourceEndpointInfo:
    additionalProperties: false
    properties:
      address:
        type: string
        x-nullable: true
      groupId:
        type: string
        x-nullable: true
      lastEventRaised:
        format: date-time
        type: string
        x-nullable: true
      subscriptionId:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
      type:
        $ref: '#/definitions/EventSourceEndpointTypes'
    type: object
  EventSourceEndpointTypes:
    enum:
      - 0
      - 1
      - 2
      - 3
    format: int32
    type: integer
  EventSourceTypes:
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
    format: int32
    type: integer
  EventStatusCodes:
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 1000
    format: int32
    type: integer
  InventoryScriptInfo:
    additionalProperties: false
    properties:
      config:
        x-nullable: true
      data:
        $ref: '#/definitions/ScriptDescriptionData'
      eventPattern:
        x-nullable: true
      scriptId:
        type: string
        x-nullable: true
      scriptLocalizationDetails:
        items:
          $ref: '#/definitions/ScriptLocalizationDetail'
        type: array
        x-nullable: true
      scriptName:
        type: string
        x-nullable: true
      visibility:
        type: string
        x-nullable: true
    type: object
  InvitedUserInfo:
    additionalProperties: false
    properties:
      id:
        type: string
        x-nullable: true
      isInvite:
        type: boolean
      mail:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      roleId:
        type: string
        x-nullable: true
    type: object
  KeywordMatchingType:
    enum:
      - 0
      - 1
    format: int32
    type: integer
  OverviewAlert:
    additionalProperties: false
    properties:
      alertDeliveryStatus:
        $ref: '#/definitions/AlertDeliveryStatusInfo'
      annotations:
        items:
          $ref: '#/definitions/AlertAnnotationInfo'
        type: array
        x-nullable: true
      categoryId:
        type: string
        x-nullable: true
      eventId:
        type: string
        x-nullable: true
      flags:
        format: int32
        type: integer
      historyDetailed:
        $ref: '#/definitions/AlertHistoryInfoDetailed'
      id:
        type: string
        x-nullable: true
      lastModified:
        format: date-time
        type: string
      requiredAcknowledgements:
        format: int32
        type: integer
      status:
        $ref: '#/definitions/AlertStatusCodes'
      subscriptionId:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
      text:
        type: string
        x-nullable: true
      title:
        type: string
        x-nullable: true
    type: object
  OverviewAlertPagedResultsPublic:
    additionalProperties: false
    properties:
      continuationToken:
        $ref: '#/definitions/PagedResultsPublicContinuationToken'
      hasMore:
        readOnly: true
        type: boolean
      results:
        items:
          $ref: '#/definitions/OverviewAlert'
        type: array
        x-nullable: true
    type: object
  OverviewEvent:
    additionalProperties: false
    properties:
      acknowledgedAlerts:
        items:
          type: string
        type: array
        x-nullable: true
      alertId:
        type: string
        x-nullable: true
      categoryId:
        type: string
        x-nullable: true
      closedAlerts:
        items:
          type: string
        type: array
        x-nullable: true
      creationTime:
        format: date-time
        type: string
      eventSourceType:
        $ref: '#/definitions/EventSourceTypes'
      eventStatus:
        $ref: '#/definitions/EventStatusCodes'
      id:
        type: string
        x-nullable: true
      lastModified:
        format: date-time
        type: string
      severity:
        $ref: '#/definitions/EventSeverities'
      teamId:
        type: string
        x-nullable: true
      text:
        type: string
        x-nullable: true
      title:
        type: string
        x-nullable: true
    type: object
  OverviewEventPagedResultsPublic:
    additionalProperties: false
    properties:
      continuationToken:
        $ref: '#/definitions/PagedResultsPublicContinuationToken'
      hasMore:
        readOnly: true
        type: boolean
      results:
        items:
          $ref: '#/definitions/OverviewEvent'
        type: array
        x-nullable: true
    type: object
  PagedResultsPublicContinuationToken:
    additionalProperties: false
    properties:
      nextPartitionKey:
        type: string
        x-nullable: true
      nextRowKey:
        type: string
        x-nullable: true
      nextTableName:
        type: string
        x-nullable: true
    type: object
  PersistentNotificationModes:
    enum:
      - 0
      - 1
    format: int32
    type: integer
  PrepaidBalanceInfo:
    additionalProperties: false
    properties:
      balance:
        format: int32
        type: integer
      latestTopUp:
        format: date-time
        type: string
        x-nullable: true
      pendingTransaction:
        type: boolean
    type: object
  PrepaidSettingsInfo:
    additionalProperties: false
    properties:
      topUpAmount:
        format: int32
        type: integer
      topUpEnabled:
        type: boolean
      topUpLimit:
        format: int32
        type: integer
    type: object
  PrepaidTransactionInfo:
    additionalProperties: false
    properties:
      autoTopUpId:
        type: string
        x-nullable: true
      created:
        format: date-time
        type: string
      createdBy:
        type: string
        x-nullable: true
      credits:
        format: int32
        type: integer
      currency:
        type: string
        x-nullable: true
      modified:
        format: date-time
        type: string
      packageCode:
        type: string
        x-nullable: true
      status:
        type: string
        x-nullable: true
      statusCode:
        format: int32
        type: integer
      subscriptionId:
        type: string
        x-nullable: true
      transactionId:
        type: string
        x-nullable: true
    type: object
  RaiseAlertInfo:
    additionalProperties: false
    properties:
      attachments:
        items:
          $ref: '#/definitions/AlertAttachment'
        type: array
        x-nullable: true
      category:
        type: string
        x-nullable: true
      externalId:
        type: string
        x-nullable: true
      flags:
        format: int32
        type: integer
      parameters:
        items:
          $ref: '#/definitions/EventParameterInfo'
        type: array
        x-nullable: true
      severity:
        $ref: '#/definitions/AlertSeverities'
      text:
        type: string
        x-nullable: true
      title:
        type: string
        x-nullable: true
    type: object
  ScheduleInfo:
    additionalProperties: false
    properties:
      end:
        format: date-time
        type: string
      id:
        type: string
        x-nullable: true
      options:
        format: int32
        type: integer
      start:
        format: date-time
        type: string
      userId:
        type: string
        x-nullable: true
    type: object
  ScriptDescriptionData:
    additionalProperties: false
    properties:
      description:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      scriptType:
        type: string
        x-nullable: true
      shortDescription:
        type: string
        x-nullable: true
    type: object
  ScriptInstanceCustomUserData:
    additionalProperties: false
    properties:
      customScriptDescription:
        type: string
        x-nullable: true
      customScriptName:
        type: string
        x-nullable: true
      instanceId:
        type: string
        x-nullable: true
      scriptId:
        type: string
        x-nullable: true
    type: object
  ScriptInstanceDetails:
    additionalProperties: false
    properties:
      config:
        x-nullable: true
      customScriptDescription:
        type: string
        x-nullable: true
      customScriptName:
        type: string
        x-nullable: true
      enabled:
        type: boolean
      eventPattern:
        x-nullable: true
      instanceId:
        type: string
        x-nullable: true
      lastModified:
        format: date-time
        type: string
        x-nullable: true
      runtimeInformation:
        $ref: '#/definitions/ScriptInstanceInfoRuntimeInformationModel'
      scriptId:
        type: string
        x-nullable: true
      scriptName:
        type: string
        x-nullable: true
      subscriptionId:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
    type: object
  ScriptInstanceInfoRuntimeInformationModel:
    additionalProperties: false
    properties:
      status:
        $ref: '#/definitions/ScriptInstanceInfoRuntimeStatus'
      statusMessage:
        type: string
        x-nullable: true
    type: object
  ScriptInstanceInfoRuntimeStatus:
    enum:
      - 0
      - 1
      - 2
      - 3
      - -1
    format: int32
    type: integer
  ScriptLocalizationDetail:
    additionalProperties: false
    properties:
      configMetadata:
        x-nullable: true
      data:
        $ref: '#/definitions/ScriptDescriptionData'
      language:
        type: string
        x-nullable: true
    type: object
  StatusChangeScope:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  StringItemsWrapper:
    additionalProperties: false
    properties:
      items:
        items:
          type: string
        type: array
        x-nullable: true
    type: object
  SubscriptionFeature:
    additionalProperties: false
    properties:
      name:
        type: string
        x-nullable: true
      type:
        format: int32
        type: integer
      value:
        type: string
        x-nullable: true
    type: object
  SubscriptionInfo:
    additionalProperties: false
    properties:
      branchId:
        type: string
        x-nullable: true
      country:
        type: string
        x-nullable: true
      currency:
        type: string
        x-nullable: true
      externalAccountId:
        type: string
        x-nullable: true
      id:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      nextBilling:
        format: date-time
        type: string
        x-nullable: true
      ownerId:
        type: string
        x-nullable: true
      planCode:
        type: string
        x-nullable: true
      planState:
        format: int32
        type: integer
      referralEnabled:
        type: boolean
      status:
        format: int32
        type: integer
    type: object
  SubscriptionProfile:
    additionalProperties: false
    properties:
      name:
        type: string
        x-nullable: true
    type: object
  TeamCategoryOptOutModes:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  TeamDutySummaryInfo:
    additionalProperties: false
    properties:
      dutyAssistEnabled:
        type: boolean
      dutySummaries:
        items:
          $ref: '#/definitions/DutySummaryInfo'
        type: array
        x-nullable: true
    type: object
  TeamInfo:
    additionalProperties: false
    properties:
      id:
        type: string
        x-nullable: true
      memberIds:
        items:
          type: string
        type: array
        x-nullable: true
      name:
        type: string
        x-nullable: true
      subscriptionId:
        type: string
        x-nullable: true
      timezone:
        type: string
        x-nullable: true
    type: object
  TeamProfile:
    additionalProperties: false
    properties:
      name:
        type: string
        x-nullable: true
    type: object
  TeamSetupProgress:
    additionalProperties: false
    properties:
      completedSteps:
        items:
          type: string
        type: array
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
      timestamp:
        format: date-time
        type: string
    type: object
  UpdatePasswordInfo:
    additionalProperties: false
    properties:
      currentPassword:
        type: string
        x-nullable: true
      newPassword:
        type: string
        x-nullable: true
    type: object
  UserDeliveryStatusInfo:
    additionalProperties: false
    properties:
      statusCode:
        $ref: '#/definitions/UserDeliveryStatusInfoCodes'
      userId:
        type: string
        x-nullable: true
    type: object
  UserDeliveryStatusInfoCodes:
    enum:
      - 0
      - 1
      - 2
      - 4
      - 6
      - 8
      - 24
      - 26
      - 30
      - 31
      - 32
    format: int32
    type: integer
  UserDutyInfo:
    additionalProperties: false
    properties:
      lastStatusChange:
        format: date-time
        type: string
        x-nullable: true
      onDuty:
        type: boolean
      onManagerDuty:
        type: boolean
      overdue:
        type: boolean
    type: object
  UserImage:
    additionalProperties: false
    properties:
      content:
        format: byte
        type: string
        x-nullable: true
      contentDisposition:
        type: string
        x-nullable: true
      contentEncoding:
        type: string
        x-nullable: true
      contentType:
        type: string
        x-nullable: true
      lastModified:
        format: date-time
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
    type: object
  UserInfo:
    additionalProperties: false
    properties:
      colorIndex:
        format: int32
        type: integer
      contactAddresses:
        items:
          $ref: '#/definitions/ContactAddressInfo'
        type: array
        x-nullable: true
      dutyInfo:
        $ref: '#/definitions/UserDutyInfo'
      id:
        type: string
        x-nullable: true
      isDeactivated:
        type: boolean
      isInvite:
        type: boolean
      mail:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      roleId:
        type: string
        x-nullable: true
      subscriptionId:
        type: string
        x-nullable: true
      timeZone:
        type: string
        x-nullable: true
      userImageLastModified:
        format: date-time
        type: string
        x-nullable: true
    type: object
  UserInvitationInfo:
    additionalProperties: false
    properties:
      inviterId:
        type: string
        x-nullable: true
      userMail:
        type: string
        x-nullable: true
    type: object
  UserInvitationResult:
    additionalProperties: false
    properties:
      errorCode:
        format: int32
        type: integer
        x-nullable: true
      errorMessage:
        type: string
        x-nullable: true
      invitedUser:
        $ref: '#/definitions/InvitedUserInfo'
      success:
        type: boolean
    type: object
  UserInvite:
    additionalProperties: false
    properties:
      email:
        type: string
        x-nullable: true
      roleId:
        type: string
        x-nullable: true
    type: object
  UserLicenseInfo:
    additionalProperties: false
    properties:
      currentUsers:
        format: int32
        type: integer
      isFree:
        type: boolean
      isTrial:
        type: boolean
      licensedUsers:
        format: int32
        type: integer
      planCode:
        type: string
        x-nullable: true
    type: object
  UserMembership:
    additionalProperties: false
    properties:
      isValid:
        readOnly: true
        type: boolean
      roleId:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
    type: object
  UserProfile:
    additionalProperties: false
    properties:
      name:
        type: string
        x-nullable: true
    type: object
  UserSetupProgress:
    additionalProperties: false
    properties:
      completedSteps:
        items:
          type: string
        type: array
        x-nullable: true
      timestamp:
        format: date-time
        type: string
      userId:
        type: string
        x-nullable: true
    type: object
  UsersInvitation:
    additionalProperties: false
    properties:
      inviterId:
        type: string
        x-nullable: true
      invites:
        items:
          $ref: '#/definitions/UserInvite'
        type: array
        x-nullable: true
    type: object
  WebhookBaseInfo:
    additionalProperties: false
    properties:
      externalAddress:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
    type: object
  WebhookInfo:
    additionalProperties: false
    properties:
      enabled:
        type: boolean
      externalAddress:
        type: string
        x-nullable: true
      id:
        type: string
        x-nullable: true
      name:
        type: string
        x-nullable: true
      subscriptionId:
        type: string
        x-nullable: true
      teamId:
        type: string
        x-nullable: true
    type: object
host: connect.signl4.com
info:
  contact:
    url: 'https://www.signl4.com/feedback-we-love-hear-from-you/'
    x-twitter: signl4me
  description: >-
    <p>Use our API for systems integration or to build your own use cases.
    Sample scenarios include but are not limited to:</p><ul><li>2-way
    integration: Triggering of Signls and updates in the third party systems
    when alert state changes occur</li><li>Retrieving alarms for logging
    purposes</li><li>Calendar integrations: Creation and management of on-call
    duties</li><li>Punch users in and out based on external
    calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires
    an API key, which you can generate in the SIGNL4 portal under
    'Developers'.<br>This key must then be specified in a special header in
    every HTTP request.<br>This header is called <b
    style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a
    rel='noopener noreferrer' target='_blank'
    href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright
    © Derdack GmbH<br></p>
  license:
    name: Derdack GmbH
    url: 'https://www.signl4.com'
  title: SIGNL4 API
  version: v1
  x-apisguru-categories:
    - messaging
  x-origin:
    - format: openapi
      url: 'https://connect.signl4.com/api/docs/v1/swagger.json'
      version: '3.0'
  x-providerName: signl4.com
paths:
  /alerts:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        Triggers a new alert for your team. All team members on duty will
        receive alert notifications.
      parameters:
        - description: Alert to raise.
          in: body
          name: body
          schema:
            $ref: '#/definitions/RaiseAlertInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AlertInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Trigger Alert
      tags:
        - Alerts
  /alerts/acknowledgeAll:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        This method confirms all unhandled alerts your team currently has by a
        specific user.
      parameters:
        - description: User ID of the user to be used to acknowledge the alarms.
          in: query
          name: userId
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusFilterInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
      summary: Confirms all visible alerts
      tags:
        - Alerts
  /alerts/acknowledgeMultiple:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: This method confirms all alerts provided.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusMultipleInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Acknowlegde multiple alerts
      tags:
        - Alerts
  /alerts/closeAll:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: This method closes all acknowledged alerts your team currently has.
      parameters:
        - description: User ID of the user to be used to close the alarms.
          in: query
          name: userId
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusFilterInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Close all acknowledged alerts.
      tags:
        - Alerts
  /alerts/closeMultiple:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: This method closes all alerts provided.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusMultipleInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Close multiple alerts
      tags:
        - Alerts
  /alerts/paged:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\n                Number of alerts could be less if filtered but at least 1."
          format: int32
          in: query
          name: maxResults
          type: integer
        - description: User ID of the user you want to get alerts for.
          in: query
          name: userId
          type: string
        - description: The filter defines which alerts are supposed to be retrieved.
          in: body
          name: body
          schema:
            $ref: '#/definitions/AlertFilterPublic'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: >-
            Returns a paged result with found alerts and continuation token if
            more alerts are in the database.
          schema:
            $ref: '#/definitions/OverviewAlertPagedResultsPublic'
        '204':
          description: There were no alerts found for the specified filter.
        '400':
          description: Required parameters could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets alerts paged
      tags:
        - Alerts
  /alerts/report:
    get:
      description: "Returns information about the occurred alert volume in different time periods as well as information about the\r\nresponse behaviour (amount of confirmed and unhandled alerts) of your team members."
      parameters:
        - description: User ID of the user for whom you want a report.
          in: query
          name: userId
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertReport'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get Alert Report
      tags:
        - Alerts
  /alerts/undoAcknowledgeMultiple:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        This method tries to undo the acknowledgement of multiple alerts via a
        queue. The operation is handled in the background.
      parameters:
        - description: Configure which user should be undone for which alerts.
          in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusMultipleInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Queue undo of multiple acknowledgments.
      tags:
        - Alerts
  /alerts/undoCloseMultiple:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        This method tries to undo multiple alert closes. The operation is
        handled in the background.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusMultipleInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Withdraw closure of multiple alerts
      tags:
        - Alerts
  '/alerts/{alertId}':
    get:
      description: Gets an alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get Alert
      tags:
        - Alerts
  '/alerts/{alertId}/acknowledge':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Id to acknowledge an alert.
          in: path
          name: alertId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: No alert with id was found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '409':
          description: >-
            Alert can't be acknowledged because it is against the defined alert
            lifecycle.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Acknowledge an alert
      tags:
        - Alerts
  '/alerts/{alertId}/annotate':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: Annotates an alert by given Annotation Info.
      parameters:
        - description: Id of the alert to annotate.
          in: path
          name: alertId
          required: true
          type: string
        - description: Annotation Information.
          in: body
          name: body
          schema:
            $ref: '#/definitions/AlertAnnotationInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertAnnotationInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Annotate Alert
      tags:
        - Alerts
  '/alerts/{alertId}/annotations':
    get:
      description: Get annotations of an alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/AlertAnnotationInfo'
            type: array
        '204':
          description: No annotations were found for the alert.
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get annotations of an alert
      tags:
        - Alerts
  '/alerts/{alertId}/attachments':
    get:
      description: Get attachments of an alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/AlertAttachmentInfo'
            type: array
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get attachments of an alert
      tags:
        - Alerts
  '/alerts/{alertId}/attachments/{attachmentId}':
    get:
      parameters:
        - description: Id of the alert that contains the wanted attachment.
          in: path
          name: alertId
          required: true
          type: string
        - description: 'Id of the attachment, that you want to retrieve.'
          in: path
          name: attachmentId
          required: true
          type: string
        - description: >-
            Optional parameter defining the wanted width of the picture that is
            retrieved.
          format: int32
          in: query
          name: width
          type: integer
        - description: >-
            Optional parameter defining the wanted height of the picture that is
            retrieved.
          format: int32
          in: query
          name: height
          type: integer
        - default: true
          description: "Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to\r\ntrue."
          in: query
          name: scale
          type: boolean
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the attachment image with additional meta information.
          schema:
            format: binary
            type: string
        '204':
          description: The image of the attachment was not uploaded yet.
        '400':
          description: A passed parameter was either empty or invalid.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Authorization failed.
        '404':
          description: The attachment image was not found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets a specified attachment of a specified alert.
      tags:
        - Alerts
  '/alerts/{alertId}/close':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Id to acknowledge an alert.
          in: path
          name: alertId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: No alert with id was found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '409':
          description: >-
            Alert can't be closed because it is against the defined alert
            lifecycle.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Close an alert
      tags:
        - Alerts
  '/alerts/{alertId}/notifications':
    get:
      description: Get notifications of all users by alert id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/AlertNotificationInfo'
            type: array
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get alert notifications
      tags:
        - Alerts
  '/alerts/{alertId}/overview':
    get:
      description: Get overview alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns alert with all information attached.
          schema:
            $ref: '#/definitions/OverviewAlert'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get an overview alert.
      tags:
        - Alerts
  '/alerts/{alertId}/undoAcknowledge':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: This method tries to undo an alert acknowledgement.
      parameters:
        - in: path
          name: alertId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns updated alert.
          schema:
            $ref: '#/definitions/OverviewAlert'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: User is not allowed to undo the acknowledgement.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Undo the acknowledgement of an alert.
      tags:
        - Alerts
  '/alerts/{alertId}/undoClose':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: This method tries to undo an alert close.
      parameters:
        - in: path
          name: alertId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ChangeAlertStatusInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/OverviewAlert'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: User is not allowed to undo the close.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Undo the closure of an alert.
      tags:
        - Alerts
  /categories/images:
    get:
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the alert categories.
          schema:
            items:
              type: string
            type: array
        '204':
          description: Request was canceled.
        '403':
          description: If you have no permission to access the resource.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: No categories were found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: "Gets the names of all alert category images.\r\nYou can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg"
      tags:
        - Categories
  '/categories/{teamId}':
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7"
      parameters:
        - description: ID of the team the categories belong to
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the category infos
          schema:
            items:
              $ref: '#/definitions/CategoryInfo'
            type: array
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get all categories
      tags:
        - Categories
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7\r\n    {\r\n        \"name\": \"Water\",\r\n        \"imageName\": \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"Any\",\r\n        \"keywords\": [\r\n            {\r\n                \"value\": \"H2O\"\r\n            },\r\n            {\r\n                \"value\": \"Water\"\r\n            }\r\n        ]\r\n    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: Category to be created
          in: body
          name: body
          schema:
            $ref: '#/definitions/CategoryInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '201':
          description: Returns the newly created category
          schema:
            $ref: '#/definitions/CategoryInfo'
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Create a new category
      tags:
        - Categories
  '/categories/{teamId}/metrics':
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics"
      parameters:
        - description: ID of the team the categories belongs to
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns a list of category metrics
          schema:
            items:
              $ref: '#/definitions/CategoryMetrics'
            type: array
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get metrics for all categories
      tags:
        - Categories
  '/categories/{teamId}/{categoryId}':
    delete:
      description: "Sample Request:\r\n            \r\n    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: ID of the category to delete
          in: path
          name: categoryId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: If the delete operation was successful
        '204':
          description: Success
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Delete an existing category
      tags:
        - Categories
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: ID of the category to get
          in: path
          name: categoryId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the category details
          schema:
            $ref: '#/definitions/CategoryInfo'
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get a specific category
      tags:
        - Categories
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: "Sample Request:\r\n            \r\n    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e\r\n    {\r\n        \"name\": \"Water-Updated\",\r\n        \"imageName\": \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"All\",\r\n        \"keywords\": [\r\n            {\r\n                \"value\": \"H2O\"\r\n            },\r\n            {\r\n                \"value\": \"Water\"\r\n            },\r\n            {\r\n                \"value\": \"Wet\"\r\n            }\r\n        ]\r\n    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - in: path
          name: categoryId
          required: true
          type: string
        - description: Category to be updated
          in: body
          name: body
          schema:
            $ref: '#/definitions/CategoryInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the updated category
          schema:
            $ref: '#/definitions/CategoryInfo'
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Update an existing category
      tags:
        - Categories
  '/categories/{teamId}/{categoryId}/metrics':
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: ID of the category to get
          in: path
          name: categoryId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the category metrics
          schema:
            $ref: '#/definitions/CategoryMetrics'
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get metrics for a specific category
      tags:
        - Categories
  '/categories/{teamId}/{categoryId}/subscriptions':
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\n    {\r\n    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: Category to get subscriptions for
          in: path
          name: categoryId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the category subscriptions
          schema:
            items:
              $ref: '#/definitions/CategorySubscriptionInfo'
            type: array
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get category subscriptions
      tags:
        - Categories
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\n    {\r\n    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: Category to be updated
          in: path
          name: categoryId
          required: true
          type: string
        - in: body
          name: body
          schema:
            items:
              $ref: '#/definitions/CategorySubscriptionInfo'
            type: array
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns the updated category subscriptions
          schema:
            items:
              $ref: '#/definitions/CategorySubscriptionInfo'
            type: array
        '400':
          description: If the input is not valid
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: If you have no permission to access this resource
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: If the resource was not found
        '500':
          description: If any server side errors occur
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Set category subscriptions
      tags:
        - Categories
  /events/paged:
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        Get overview event paged. If there are more results, you also get a
        continuation token which you can add to the event filter.
      parameters:
        - description: "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\n                 Number of alerts could be less if filtered but at least 1."
          format: int32
          in: query
          name: maxResults
          type: integer
        - description: The filter defines which alerts are supposed to be retrieved.
          in: body
          name: body
          schema:
            $ref: '#/definitions/EventFilter'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: >-
            Returns paged result with found events and continuation token, if
            database holds more events.
          schema:
            $ref: '#/definitions/OverviewEventPagedResultsPublic'
        '204':
          description: No event could be found (with passed filter)
        '400':
          description: Required parameters could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get overview event paged.
      tags:
        - Events
  '/events/{eventId}/overview':
    get:
      description: Get overview event by id.
      parameters:
        - description: Id of event to get.
          in: path
          name: eventId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Returns overview event with specific id.
          schema:
            $ref: '#/definitions/OverviewEvent'
        '400':
          description: Required parameters could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Event with specified id could not be found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get overview event
      tags:
        - Events
  '/events/{eventId}/parameters':
    get:
      description: Get parameters of an event by id.
      parameters:
        - description: Event Id of the requested Alert.
          in: path
          name: eventId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/EventParameterInfo'
            type: array
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get event parameters
      tags:
        - Events
  /prepaid/balance:
    get:
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PrepaidBalanceInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get your subscription's current prepaid balance.
      tags:
        - Prepaid
  /prepaid/settings:
    get:
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PrepaidSettingsInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get your subscription's current prepaid settings.
      tags:
        - Prepaid
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Settings object containing the new values.
          in: body
          name: body
          schema:
            $ref: '#/definitions/PrepaidSettingsInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PrepaidSettingsInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Update your subscription's current prepaid settings.
      tags:
        - Prepaid
  /prepaid/transactions:
    get:
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/PrepaidTransactionInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get your subscription's prepaid transactions.
      tags:
        - Prepaid
  /scripts/instances:
    get:
      description: Returns all script instances in the subscription.
      parameters:
        - in: query
          name: teamId
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/ScriptInstanceDetails'
            type: array
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns all script instances of the SIGNL4 team
      tags:
        - Scripts
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        Creates a new script instance of the script specified in the request
        body.
      parameters:
        - description: Script instance to be created.
          in: body
          name: body
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Existing script instance was updated as specified in body.
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '201':
          description: New script instance was updated as specified in body.
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: An internal error has occurred during instance creation.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Creates a new script instance in the in the SIGNL4 team.
      tags:
        - Scripts
  '/scripts/instances/{instanceId}':
    delete:
      description: Gets the script instance specified by the passed instance id.
      parameters:
        - description: Instance Id of script instance to be returned.
          in: path
          name: instanceId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database or in memory.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Deletes a script instance.
      tags:
        - Scripts
    get:
      description: Gets the script instance specified by the passed instance id.
      parameters:
        - description: Instance Id of script instance to be returned.
          in: path
          name: instanceId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database or in memory.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: >-
        Returns all information about a given script instance which includes its
        runtime status.
      tags:
        - Scripts
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: Updates the specified script instance.
      parameters:
        - description: InstanceId of the script to be updated.
          in: path
          name: instanceId
          required: true
          type: string
        - description: Script instance to be updated.
          in: body
          name: body
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: An internal error has occurred during instance creation.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: >-
        Updates a given script instance, typically used for updating the
        configuration of a script.
      tags:
        - Scripts
  '/scripts/instances/{instanceId}/data':
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: Updates the specified script instance.
      parameters:
        - description: InstanceId of the script to be updated.
          in: path
          name: instanceId
          required: true
          type: string
        - description: Script instance to be updated.
          in: body
          name: body
          schema:
            $ref: '#/definitions/ScriptInstanceCustomUserData'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: An internal error has occurred during instance creation.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: >-
        Updates custom data of a given script instance which includes its
        display name.
      tags:
        - Scripts
  '/scripts/instances/{instanceId}/disable':
    post:
      parameters:
        - description: Id of the instance to be disabled.
          in: path
          name: instanceId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Disables a given script instance.
      tags:
        - Scripts
  '/scripts/instances/{instanceId}/enable':
    post:
      parameters:
        - description: Id of the instance to be enabled.
          in: path
          name: instanceId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Enables a script instance.
      tags:
        - Scripts
  /scripts/inventory:
    get:
      description: >-
        Returns all available inventory scripts which can be added to a SIGNL4
        subscription.
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/InventoryScriptInfo'
            type: array
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: An internal error orccurred while loading all inventory scripts.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: >-
        Returns all available inventory scripts which can be added to a SIGNL4
        subscription.
      tags:
        - Scripts
  /scripts/inventory/parsed:
    get:
      parameters:
        - description: ''
          in: query
          name: language
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/InventoryScriptInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns all inventory scripts.
      tags:
        - Scripts
  '/scripts/inventory/parsed/{scriptId}':
    get:
      description: Gets the script specified by the passed script id.
      parameters:
        - description: The Id of the script to be returned.
          in: path
          name: scriptId
          required: true
          type: string
        - in: query
          name: language
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScriptInstanceDetails'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database or in memory.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns an inventory script by its id.
      tags:
        - Scripts
  /subscriptions:
    get:
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/SubscriptionInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get infos of all available/managed subscriptions.
      tags:
        - Subscriptions
  '/subscriptions/{subscriptionId}':
    get:
      parameters:
        - description: Id of the subscription that's to be retrieved.
          in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SubscriptionInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get infos of a specific subscription.
      tags:
        - Subscriptions
  '/subscriptions/{subscriptionId}/channelPrices':
    get:
      parameters:
        - description: Id of the subscription that needs to be retrieved.
          in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ChannelPriceInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns the subscription's channel price information.
      tags:
        - Subscriptions
  '/subscriptions/{subscriptionId}/features':
    get:
      parameters:
        - description: Id of the subscription from which the features need to be retrieved.
          in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/SubscriptionFeature'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns the features of a specified subscription.
      tags:
        - Subscriptions
  '/subscriptions/{subscriptionId}/prepaidBalance':
    get:
      parameters:
        - in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PrepaidBalanceInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get a subscription's current prepaid balance.
      tags:
        - Prepaid
  '/subscriptions/{subscriptionId}/prepaidSettings':
    get:
      parameters:
        - in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PrepaidSettingsInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get a subscription's current prepaid settings.
      tags:
        - Prepaid
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: ID of the subscription
          in: path
          name: subscriptionId
          required: true
          type: string
        - description: Settings object containing the new values.
          in: body
          name: body
          schema:
            $ref: '#/definitions/PrepaidSettingsInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PrepaidSettingsInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Update a subscription's current prepaid settings.
      tags:
        - Prepaid
  '/subscriptions/{subscriptionId}/prepaidTransactions':
    get:
      parameters:
        - description: ID of the subscription to get transactions for
          in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/PrepaidTransactionInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get a subscription's prepaid transactions.
      tags:
        - Prepaid
  '/subscriptions/{subscriptionId}/profile':
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: ID of the subscription to be updated
          in: path
          name: subscriptionId
          required: true
          type: string
        - description: Profile data to update subscription with
          in: body
          name: body
          schema:
            $ref: '#/definitions/SubscriptionProfile'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SubscriptionInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Updates a subscriptions profile.
      tags:
        - Subscriptions
  '/subscriptions/{subscriptionId}/teams':
    get:
      parameters:
        - in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/TeamInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get infos for all teams of the subscription.
      tags:
        - Teams
  '/subscriptions/{subscriptionId}/userLicenses':
    get:
      parameters:
        - description: ID of the subscription
          in: path
          name: subscriptionId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserLicenseInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets a subscription's user licenses.
      tags:
        - Subscriptions
  /teams:
    get:
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/TeamInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get infos of all teams.
      tags:
        - Teams
  '/teams/{teamId}':
    get:
      parameters:
        - description: ID of the team that should be retrieved.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TeamInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets infos of a specific team.
      tags:
        - Teams
  '/teams/{teamId}/alertReports':
    get:
      parameters:
        - description: ID of team you want to download reports from.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/AlertAuditReportFileInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get information about downloadable alert reports
      tags:
        - Teams
  '/teams/{teamId}/alertReports/{fileName}':
    get:
      parameters:
        - description: ID of team you want to get the duty report file infos for.
          in: path
          name: teamId
          required: true
          type: string
        - description: File name of file you want to download.
          in: path
          name: fileName
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            format: binary
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns Alert Report
      tags:
        - Teams
  '/teams/{teamId}/alertSettings':
    get:
      parameters:
        - description: ID of the team the settings should be retrieved for.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertSettings'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets alert settings of a specific team.
      tags:
        - Teams
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: ID of the team the settings should be set for.
          in: path
          name: teamId
          required: true
          type: string
        - description: Alert settings to be set
          in: body
          name: body
          schema:
            $ref: '#/definitions/AlertSettings'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AlertSettings'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Sets alert settings of a specific team.
      tags:
        - Teams
  '/teams/{teamId}/dutyReports':
    get:
      parameters:
        - description: ID of team you want to get the duty report file infos for.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/DutyAuditReportFileInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get Information about downloadable reports
      tags:
        - Duties
  '/teams/{teamId}/dutyReports/{fileName}':
    get:
      parameters:
        - description: ID of team you want to download the duty report for.
          in: path
          name: teamId
          required: true
          type: string
        - description: Filename of the csv to download.
          in: path
          name: fileName
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            format: binary
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Download duty report with a specific fileName
      tags:
        - Duties
  '/teams/{teamId}/dutysummary':
    get:
      parameters:
        - description: ID of the team the duty belongs to.
          in: path
          name: teamId
          required: true
          type: string
        - in: query
          name: lastTwoDuties
          type: boolean
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TeamDutySummaryInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get duty assistant info for a team
      tags:
        - Duties
  '/teams/{teamId}/eventSources':
    get:
      parameters:
        - description: ID of the team the sources should be retrieved for.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/EventSourceEndpointInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets event sources of a specific team.
      tags:
        - Teams
  '/teams/{teamId}/memberships':
    get:
      parameters:
        - description: Team ID of team you want to request.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: User invitations are returned.
          schema:
            items:
              $ref: '#/definitions/InvitedUserInfo'
            type: array
        '204':
          description: Request was canceled.
        '400':
          description: >-
            Required parameters or authentifaction info could not be found in
            the request/claims.
        '403':
          description: You're not allowed to request the access all required entities.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get all invites of a team.
      tags:
        - TeamsMemberships
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Id of team the user should be invited to.
          in: path
          name: teamId
          required: true
          type: string
        - description: Information about user to invite and inviter id.
          in: body
          name: body
          schema:
            $ref: '#/definitions/UsersInvitation'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: User invitation results are returned.
          schema:
            items:
              $ref: '#/definitions/UserInvitationResult'
            type: array
        '204':
          description: Request was canceled.
        '400':
          description: >-
            Required parameters or authentifaction info could not be found in
            the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: You're not allowed to request the access all required entities.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Invite users to a team
      tags:
        - TeamsMemberships
  '/teams/{teamId}/memberships/resendInviteMail':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Team ID of team with invited user.
          in: path
          name: teamId
          required: true
          type: string
        - description: Information which user should be invited again.
          in: body
          name: body
          schema:
            $ref: '#/definitions/UserInvitationInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            type: string
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Sends invite email again if an invite exists
      tags:
        - TeamsMemberships
  '/teams/{teamId}/memberships/{userId}':
    delete:
      parameters:
        - description: ID of the team the user should be deleted from
          in: path
          name: teamId
          required: true
          type: string
        - description: ID of the user that should be deleted
          in: path
          name: userId
          required: true
          type: string
        - description: User ID of user which will remove the other user.
          in: query
          name: requesterUserId
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success message
          schema:
            type: string
        '204':
          description: Request was canceled.
        '400':
          description: >-
            Required parameters or authentifaction info could not be found in
            the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: You're not allowed to request the access all required entities.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: >-
        Removes a user or invitation from a team, and may delete the user if he
        is not in any team.
      tags:
        - TeamsMemberships
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: "Updates the user's team membership. You can move the user to another team within the subscription\r\nand/or change the user's role."
      parameters:
        - description: Team the user you want to update belongs to at the moment.
          in: path
          name: teamId
          required: true
          type: string
        - description: User ID of user you want to update.
          in: path
          name: userId
          required: true
          type: string
        - description: >-
            User ID of user which you want to change role with. This must be
            provided when using an api key. This user must have role
            administrator (for setting administrator role) or team administrator
            (for setting  rights.
          in: query
          name: requesterUserId
          type: string
        - description: Information about role id and target team id.
          in: body
          name: body
          schema:
            $ref: '#/definitions/UserMembership'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: User was successfully updated.
          schema:
            $ref: '#/definitions/UserInfo'
        '204':
          description: Request was canceled.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '400':
          description: >-
            Required parameters or authentifaction info could not be found in
            the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: You're not allowed to request the access all required entities.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Update user's team membership.
      tags:
        - TeamsMemberships
  '/teams/{teamId}/profile':
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Team ID of team which should be updated.
          in: path
          name: teamId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/TeamProfile'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TeamInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Updates team profile of a team
      tags:
        - Teams
  '/teams/{teamId}/schedules':
    get:
      parameters:
        - description: Id of the team the schedules user belongs to
          in: path
          name: teamId
          required: true
          type: string
        - in: query
          name: UserId
          type: string
        - format: date-time
          in: query
          name: MinDate
          type: string
        - format: int32
          in: query
          name: Limit
          type: integer
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/ScheduleInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns information about all duties that belong to the team.
      tags:
        - Duties
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Id of the team the duty is to be assigned to.
          in: path
          name: teamId
          required: true
          type: string
        - description: information about the duty schedule to be created
          in: body
          name: body
          schema:
            $ref: '#/definitions/ScheduleInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScheduleInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Create/Update given duty schedule.
      tags:
        - Duties
  '/teams/{teamId}/schedules/deleteRange':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Team ID you want to delete
          in: path
          name: teamId
          required: true
          type: string
        - description: Information with date range to delete from to
          in: body
          name: body
          schema:
            $ref: '#/definitions/DeleteRangeInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/ScheduleInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Delete duty schedules in range
      tags:
        - Duties
  '/teams/{teamId}/schedules/multiple':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: Team ID to set
          in: path
          name: teamId
          required: true
          type: string
        - description: Override or cut existing schedules if set to true.
          in: query
          name: overrideExisting
          type: boolean
        - description: List of schedules to save
          in: body
          name: body
          schema:
            items:
              $ref: '#/definitions/ScheduleInfo'
            type: array
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/ScheduleInfo'
            type: array
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: >-
        Save multiple schedules. It is possible to override existing schedules
        if you wish
      tags:
        - Duties
  '/teams/{teamId}/schedules/{dutyId}':
    delete:
      parameters:
        - description: ID of the team the duty belongs to.
          in: path
          name: teamId
          required: true
          type: string
        - description: ID of the duty to be deleted.
          in: path
          name: dutyId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Delete a specific duty.
      tags:
        - Duties
  '/teams/{teamId}/schedules/{scheduleId}':
    get:
      parameters:
        - description: Id of the team the duty belongs to
          in: path
          name: teamId
          required: true
          type: string
        - description: Id of the requested duty schedule.
          in: path
          name: scheduleId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScheduleInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Returns information of the duty schedule with the specified Id.
      tags:
        - Duties
  '/teams/{teamId}/setupProgress':
    get:
      parameters:
        - description: ID of the team the progress should be retrieved for.
          in: path
          name: teamId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TeamSetupProgress'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets setup progress of a specific team.
      tags:
        - Teams
  /users:
    get:
      description: "Returns a list of user objects with details such as their email address and duty information. Only users who\r\nare part of your team will be returned."
      parameters: []
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: User could be successfully identified.
          schema:
            items:
              $ref: '#/definitions/UserInfo'
            type: array
        '400':
          description: >-
            Required authentifaction info could not be found in the
            request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: You're not allowed to request the users with their information.
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get all Users
      tags:
        - Users
  '/users/{userId}':
    get:
      description: >-
        Returns a user object with details such as his email address and duty
        information.
      parameters:
        - description: "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.\r\nCan also be an email address of a user in the team or the unique id of an according user object.”"
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: User could be successfully identified.
          schema:
            $ref: '#/definitions/UserInfo'
        '400':
          description: >-
            Required authentifaction info could not be found in the
            request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: You're not allowed to request that user's information.
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get User by Id
      tags:
        - Users
  '/users/{userId}/changePassword':
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: User ID of user whose password should be changed.
          in: path
          name: userId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UpdatePasswordInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Updates the password of a user
      tags:
        - Users
  '/users/{userId}/checkPermissions':
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: ID of the user to check permissions for.
          in: path
          name: userId
          required: true
          type: string
        - in: query
          name: teamId
          type: string
        - description: List of permissions to check
          in: body
          name: body
          schema:
            $ref: '#/definitions/StringItemsWrapper'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserImage'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Checks if a user has the provided permission.
      tags:
        - Users
  '/users/{userId}/dutyStatus':
    get:
      description: Returns a object with duty information.
      parameters:
        - description: "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.\r\nCan also be an email address of a user in the team or the unique id of an according user object.”"
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Duty successfully loaded.
          schema:
            $ref: '#/definitions/UserDutyInfo'
        '400':
          description: >-
            Required authentifaction info could not be found in the
            request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: You're not allowed to request that duty information.
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get duty status by user Id
      tags:
        - Users
  '/users/{userId}/image':
    get:
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - format: int32
          in: query
          name: height
          type: integer
        - format: int32
          in: query
          name: width
          type: integer
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserImage'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      tags:
        - Users
    post:
      parameters:
        - description: Id of the user.
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
        '204':
          description: The image was successfully uploaded.
        '400':
          description: "Either a passed parameter was either empty/null or the request's multipart does not contain a\r\nfile."
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: User is not allowed to upoload an image for the specified user.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Either the user was not found or they aren't activated yet.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Internal general error occured.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Uploaded a profile image for a specified user.
      tags:
        - Users
  '/users/{userId}/profile':
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      parameters:
        - description: ID of user to update.
          in: path
          name: userId
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Updates user profile of an user
      tags:
        - Users
  '/users/{userId}/punchIn':
    post:
      description: The specified user will be punched in to duty.
      parameters:
        - description: "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”"
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDutyInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: The user tried to change the punch in a different user.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Punch User in
      tags:
        - Users
  '/users/{userId}/punchInAsManager':
    post:
      description: The specified user will be punched in to duty as a manager.
      parameters:
        - description: "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”"
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDutyInfo'
        '400':
          description: Required information could not be found in the request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: The user tried to change the punch in a different user.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Required entities could not be found in the database.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Punch User in as Manager
      tags:
        - Users
  '/users/{userId}/punchOut':
    post:
      description: The specified user will be punched out from duty.
      parameters:
        - description: "Identifier of the user to punch out. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”"
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: The user was punched out successfully.
          schema:
            $ref: '#/definitions/UserDutyInfo'
        '400':
          description: >-
            Required authentifaction information could not be found in the
            request/claims.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: >-
            The requesting user tried to punch out someone else, which is not
            allowed.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: The desired user was not found by passed id.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '409':
          description: "The desired user was not punched out because it would violate  the minumum on-duty members setting\r\nfrom the team."
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Punch User out
      tags:
        - Users
  '/users/{userId}/setupProgress':
    get:
      parameters:
        - description: ID of the user the progress should be retrieved for.
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserSetupProgress'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Gets setup progress of a specific user.
      tags:
        - Users
  /webhooks:
    get:
      description: Returns a collection of defined outbound webhooks in the system.
      parameters:
        - in: query
          name: teamId
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: >-
            Request was successful and response body contains information about
            all outbound webhooks in the subscription.
          schema:
            items:
              $ref: '#/definitions/WebhookInfo'
            type: array
        '404':
          description: The subscription does not have any outbound webhooks.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: >-
            Internal has occured. The response body may contain more
            information.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get Webhooks
      tags:
        - Webhooks
    post:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: >-
        Creates a new outbound webhook that will be notified when certain events
        occur.
      parameters:
        - description: Json object that contains the external URL of the webhook.
          in: body
          name: body
          schema:
            $ref: '#/definitions/WebhookBaseInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '201':
          description: >-
            Action was successful and response contains the id of the newly
            created webhook.
          schema:
            type: string
        '400':
          description: >-
            Either the webhook object or a necessary property was invalid or
            empty.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: >-
            Internal has occured. The response body may contain more
            information.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Create Webhook
      tags:
        - Webhooks
  '/webhooks/{webhookId}':
    delete:
      description: Deletes the specified webhook so that it will no longer be notified.
      parameters:
        - description: Id of the outbound webhook that will be deleted.
          in: path
          name: webhookId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Webhook was successfully deleted.
        '400':
          description: The passed webhook id was invalid or empty.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Webhook with specified id was not found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: >-
            Internal has occured. The response body may contain more
            information.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Delete Webhook by Id
      tags:
        - Webhooks
    get:
      description: Returns information of the webhook specified by the passed id.
      operationId: GetWebhookById
      parameters:
        - description: Id of the outbound webhook to be retrieved.
          in: path
          name: webhookId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: >-
            Request was successful and response body contains information about
            the requested webhook.
          schema:
            type: string
        '400':
          description: The passed webhook id was either empty or null.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: The webhook was not found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: >-
            Internal has occured. The response body may contain more
            information.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Get Webhook by Id
      tags:
        - Webhooks
    put:
      consumes:
        - application/json
        - application/json-patch+json
        - text/json
      description: Updates the specified webhook.
      parameters:
        - description: Id of the outbound webhook to be updated.
          in: path
          name: webhookId
          required: true
          type: string
        - description: Json object containing the updated URL of the webhook.
          in: body
          name: body
          schema:
            $ref: '#/definitions/WebhookBaseInfo'
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: >-
            Update was successful and response body contains the updated webhook
            details.
          schema:
            $ref: '#/definitions/WebhookInfo'
        '400':
          description: A passed parameter was either empty or null.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Webhook with specified id was not found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: >-
            Internal has occured. The response body may contain more
            information.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Update Webhook by Id
      tags:
        - Webhooks
  '/webhooks/{webhookId}/disable':
    post:
      parameters:
        - description: Webhook ID for webhook which should be disabled.
          in: path
          name: webhookId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: >-
            Disable was successful and response body contains the webhook
            details.
          schema:
            $ref: '#/definitions/WebhookInfo'
        '400':
          description: A passed parameter was either empty or null.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Webhook with specified id was not found.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: >-
            Internal has occured. The response body may contain more
            information.
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Ability to enable a webHook.
      tags:
        - Webhooks
  '/webhooks/{webhookId}/enable':
    post:
      parameters:
        - description: Webhook ID for webhook which should be enabled.
          in: path
          name: webhookId
          required: true
          type: string
      produces:
        - application/json
        - text/json
        - text/plain
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/WebhookInfo'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponseContent'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorResponseContent'
      summary: Ability to disable a webHook.
      tags:
        - Webhooks
schemes:
  - https
security:
  - oauth2:
      - public_api_write
      - public_api_read
      - offline_access
securityDefinitions:
  oauth2:
    authorizationUrl: 'https://connect.signl4.com/identity/connect/authorize'
    flow: accessCode
    scopes:
      offline_access: Access write operations
      public_api_read: Access write operations
      public_api_write: Access read operations
    tokenUrl: 'https://connect.signl4.com/identity/connect/token'
    type: oauth2
swagger: '2.0'
tags:
  - description: >-
      Provide access to all informations about signls and the ability to
      interact with them.
    name: Alerts
  - description: Provides access to services and system categories in a SIGNL4 team.
    name: Categories
  - description: >-
      Provide access to duty information and the ability to create, delete and
      update them.
    name: Duties
  - description: Provide access to all informations about events and their parameters.
    name: Events
  - description: Provides access to the prepaid balance and transactions
    name: Prepaid
  - description: >-
      Provides access to apps that are available in SIGNL4 and e.g. allows
      adding an app to a SIGNL4 team.
    name: Scripts
  - description: Provides management capabilities for a SIGNL4 subscription.
    name: Subscriptions
  - description: >-
      Provides misc. operations, e.g. for managing settings or preferences, of a
      team in a SIGNL4 subscription.
    name: Teams
  - description: Provides management for team members in a SIGNL4 team.
    name: Users
  - description: >-
      Provides management for outbound notifications (e.g. a Signl was
      confirmed) via webhooks.
    name: Webhooks
x-components: {}
x-hasEquivalentPaths: true

