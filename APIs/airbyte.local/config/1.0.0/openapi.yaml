basePath: /
definitions:
  AirbyteArchive:
    description: Tarball Archive (.tar.gz) of Airbyte Configuration and Database
    format: binary
    type: string
  AirbyteCatalog:
    description: describes the available schema (catalog).
    properties:
      streams:
        items:
          $ref: '#/definitions/AirbyteStreamAndConfiguration'
        type: array
    required:
      - streams
    type: object
  AirbyteStream:
    additionalProperties: false
    description: the immutable schema defined by the source
    properties:
      defaultCursorField:
        description: >-
          Path to the field that will be used to determine if a record is new or
          modified since the last sync. If not provided by the source, the end
          user will have to specify the comparable themselves.
        items:
          type: string
        type: array
      jsonSchema:
        $ref: '#/definitions/StreamJsonSchema'
        description: Stream schema using Json Schema specs.
      name:
        description: Stream's name.
        type: string
      namespace:
        description: >-
          Optional Source-defined namespace. Airbyte streams from the same
          sources should have the same namespace. Currently only used by JDBC
          destinations to determine what schema to write to.
        type: string
      sourceDefinedCursor:
        description: >-
          If the source defines the cursor field, then any other cursor field
          inputs will be ignored. If it does not, either the user_provided one
          is used, or the default one is used as a backup.
        type: boolean
      sourceDefinedPrimaryKey:
        description: >-
          If the source defines the primary key, paths to the fields that will
          be used as a primary key. If not provided by the source, the end user
          will have to specify the primary key themselves.
        items:
          items:
            type: string
          type: array
        type: array
      supportedSyncModes:
        items:
          $ref: '#/definitions/SyncMode'
        type: array
    required:
      - name
      - json_schema
    type: object
  AirbyteStreamAndConfiguration:
    additionalProperties: false
    description: >-
      each stream is split in two parts; the immutable schema from source and
      mutable configuration for destination
    properties:
      config:
        $ref: '#/definitions/AirbyteStreamConfiguration'
      stream:
        $ref: '#/definitions/AirbyteStream'
    type: object
  AirbyteStreamConfiguration:
    additionalProperties: false
    description: the mutable part of the stream to configure the destination
    properties:
      aliasName:
        description: Alias name to the stream to be used in the destination
        type: string
      cursorField:
        description: >-
          Path to the field that will be used to determine if a record is new or
          modified since the last sync. This field is REQUIRED if `sync_mode` is
          `incremental`. Otherwise it is ignored.
        items:
          type: string
        type: array
      destinationSyncMode:
        $ref: '#/definitions/DestinationSyncMode'
      primaryKey:
        description: >-
          Paths to the fields that will be used as primary key. This field is
          REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is
          ignored.
        items:
          items:
            type: string
          type: array
        type: array
      selected:
        type: boolean
      syncMode:
        $ref: '#/definitions/SyncMode'
    required:
      - syncMode
      - destinationSyncMode
    type: object
  AttemptInfoRead:
    properties:
      attempt:
        $ref: '#/definitions/AttemptRead'
      logs:
        $ref: '#/definitions/LogRead'
    required:
      - attempt
      - logs
    type: object
  AttemptRead:
    properties:
      bytesSynced:
        format: int64
        type: integer
      createdAt:
        format: int64
        type: integer
      endedAt:
        format: int64
        type: integer
      id:
        format: int64
        type: integer
      recordsSynced:
        format: int64
        type: integer
      status:
        $ref: '#/definitions/AttemptStatus'
      updatedAt:
        format: int64
        type: integer
    required:
      - id
      - status
      - createdAt
      - updatedAt
    type: object
  AttemptStatus:
    enum:
      - running
      - failed
      - succeeded
    type: string
  CheckConnectionRead:
    properties:
      jobInfo:
        $ref: '#/definitions/SynchronousJobRead'
      message:
        type: string
      status:
        enum:
          - succeeded
          - failed
        type: string
    required:
      - status
      - jobInfo
    type: object
  CheckOperationRead:
    properties:
      message:
        type: string
      status:
        enum:
          - succeeded
          - failed
        type: string
    required:
      - status
    type: object
  ConnectionCreate:
    properties:
      destinationId:
        $ref: '#/definitions/DestinationId'
      name:
        description: Optional name of the connection
        type: string
      namespaceDefinition:
        $ref: '#/definitions/NamespaceDefinitionType'
      namespaceFormat:
        default: null
        description: >-
          Used when namespaceDefinition is 'customformat'. If blank then behaves
          like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}"
          then behaves like namespaceDefinition = 'source'.
        example: '${SOURCE_NAMESPACE}'
        type: string
      operationIds:
        items:
          $ref: '#/definitions/OperationId'
        type: array
      prefix:
        description: >-
          Prefix that will be prepended to the name of each stream when it is
          written to the destination.
        type: string
      resourceRequirements:
        $ref: '#/definitions/ResourceRequirements'
      schedule:
        $ref: '#/definitions/ConnectionSchedule'
      sourceId:
        $ref: '#/definitions/SourceId'
      status:
        $ref: '#/definitions/ConnectionStatus'
      syncCatalog:
        $ref: '#/definitions/AirbyteCatalog'
    required:
      - sourceId
      - destinationId
      - status
    type: object
  ConnectionId:
    format: uuid
    type: string
  ConnectionIdRequestBody:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
    required:
      - connectionId
    type: object
  ConnectionRead:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
      destinationId:
        $ref: '#/definitions/DestinationId'
      name:
        type: string
      namespaceDefinition:
        $ref: '#/definitions/NamespaceDefinitionType'
      namespaceFormat:
        default: null
        description: >-
          Used when namespaceDefinition is 'customformat'. If blank then behaves
          like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}"
          then behaves like namespaceDefinition = 'source'.
        example: '${SOURCE_NAMESPACE}'
        type: string
      operationIds:
        items:
          $ref: '#/definitions/OperationId'
        type: array
      prefix:
        description: >-
          Prefix that will be prepended to the name of each stream when it is
          written to the destination.
        type: string
      resourceRequirements:
        $ref: '#/definitions/ResourceRequirements'
      schedule:
        $ref: '#/definitions/ConnectionSchedule'
      sourceId:
        $ref: '#/definitions/SourceId'
      status:
        $ref: '#/definitions/ConnectionStatus'
      syncCatalog:
        $ref: '#/definitions/AirbyteCatalog'
    required:
      - connectionId
      - name
      - sourceId
      - destinationId
      - syncCatalog
      - status
    type: object
  ConnectionReadList:
    properties:
      connections:
        items:
          $ref: '#/definitions/ConnectionRead'
        type: array
    required:
      - connections
    type: object
  ConnectionSchedule:
    description: 'if null, then no schedule is set.'
    properties:
      timeUnit:
        enum:
          - minutes
          - hours
          - days
          - weeks
          - months
        type: string
      units:
        format: int64
        type: integer
    required:
      - units
      - timeUnit
    type: object
  ConnectionState:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
      state:
        $ref: '#/definitions/ConnectionStateObject'
    required:
      - connectionId
    type: object
  ConnectionStateObject:
    type: object
  ConnectionStatus:
    description: >-
      Active means that data is flowing through the connection. Inactive means
      it is not. Deprecated means the connection is off and cannot be
      re-activated. the schema field describes the elements of the schema that
      will be synced.
    enum:
      - active
      - inactive
      - deprecated
    type: string
  ConnectionUpdate:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
      namespaceDefinition:
        $ref: '#/definitions/NamespaceDefinitionType'
      namespaceFormat:
        default: null
        description: >-
          Used when namespaceDefinition is 'customformat'. If blank then behaves
          like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}"
          then behaves like namespaceDefinition = 'source'.
        example: '${SOURCE_NAMESPACE}'
        type: string
      operationIds:
        items:
          $ref: '#/definitions/OperationId'
        type: array
      prefix:
        description: >-
          Prefix that will be prepended to the name of each stream when it is
          written to the destination.
        type: string
      resourceRequirements:
        $ref: '#/definitions/ResourceRequirements'
      schedule:
        $ref: '#/definitions/ConnectionSchedule'
      status:
        $ref: '#/definitions/ConnectionStatus'
      syncCatalog:
        $ref: '#/definitions/AirbyteCatalog'
    required:
      - connectionId
      - syncCatalog
      - status
    type: object
  CustomerId:
    format: uuid
    type: string
  DataType:
    enum:
      - string
      - number
      - boolean
      - object
      - array
    type: string
  DestinationConfiguration:
    description: >-
      The values required to configure the destination. The schema for this must
      match the schema return by destination_definition_specifications/get for
      the destinationDefinition.
    example:
      user: charles
  DestinationCoreConfig:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/DestinationConfiguration'
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
    required:
      - workspaceId
      - destinationDefinitionId
      - connectionConfiguration
    type: object
  DestinationCreate:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/DestinationConfiguration'
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
      name:
        type: string
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
      - name
      - destinationDefinitionId
      - connectionConfiguration
    type: object
  DestinationDefinitionCreate:
    properties:
      dockerImageTag:
        type: string
      dockerRepository:
        type: string
      documentationUrl:
        format: uri
        type: string
      icon:
        type: string
      name:
        type: string
    required:
      - name
      - dockerRepository
      - dockerImageTag
      - documentationUrl
    type: object
  DestinationDefinitionId:
    format: uuid
    type: string
  DestinationDefinitionIdRequestBody:
    properties:
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
    required:
      - destinationDefinitionId
    type: object
  DestinationDefinitionRead:
    properties:
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
      dockerImageTag:
        type: string
      dockerRepository:
        type: string
      documentationUrl:
        format: uri
        type: string
      icon:
        type: string
      name:
        type: string
    required:
      - destinationDefinitionId
      - name
      - dockerRepository
      - dockerImageTag
      - documentationUrl
    type: object
  DestinationDefinitionReadList:
    properties:
      destinationDefinitions:
        items:
          $ref: '#/definitions/DestinationDefinitionRead'
        type: array
    required:
      - destinationDefinitions
    type: object
  DestinationDefinitionSpecification:
    description: >-
      The specification for what values are required to configure the
      destinationDefinition.
    example:
      user:
        type: string
  DestinationDefinitionSpecificationRead:
    properties:
      connectionSpecification:
        $ref: '#/definitions/DestinationDefinitionSpecification'
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
      documentationUrl:
        type: string
      jobInfo:
        $ref: '#/definitions/SynchronousJobRead'
      supportedDestinationSyncModes:
        items:
          $ref: '#/definitions/DestinationSyncMode'
        type: array
      supportsDbt:
        type: boolean
      supportsNormalization:
        type: boolean
    required:
      - destinationDefinitionId
      - jobInfo
    type: object
  DestinationDefinitionUpdate:
    properties:
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
      dockerImageTag:
        type: string
    required:
      - destinationDefinitionId
      - dockerImageag
    type: object
  DestinationId:
    format: uuid
    type: string
  DestinationIdRequestBody:
    properties:
      destinationId:
        $ref: '#/definitions/DestinationId'
    required:
      - destinationId
    type: object
  DestinationRead:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/DestinationConfiguration'
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
      destinationId:
        $ref: '#/definitions/DestinationId'
      destinationName:
        type: string
      name:
        type: string
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - destinationDefinitionId
      - destinationId
      - workspaceId
      - connectionConfiguration
      - name
      - destinationName
    type: object
  DestinationReadList:
    properties:
      destinations:
        items:
          $ref: '#/definitions/DestinationRead'
        type: array
    required:
      - destinations
    type: object
  DestinationRecreate:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/DestinationConfiguration'
      destinationDefinitionId:
        $ref: '#/definitions/DestinationDefinitionId'
      destinationId:
        $ref: '#/definitions/DestinationId'
      name:
        type: string
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
      - destinationId
      - destinationDefinitionId
      - connectionConfiguration
      - name
    type: object
  DestinationSyncMode:
    enum:
      - append
      - overwrite
      - append_dedup
    type: string
  DestinationUpdate:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/DestinationConfiguration'
      destinationId:
        $ref: '#/definitions/DestinationId'
      name:
        type: string
    required:
      - destinationId
      - connectionConfiguration
      - name
    type: object
  HealthCheckRead:
    properties:
      db:
        type: boolean
    required:
      - db
    type: object
  ImportRead:
    properties:
      reason:
        type: string
      status:
        enum:
          - succeeded
          - failed
        type: string
    required:
      - status
    type: object
  InvalidInputExceptionInfo:
    properties:
      exceptionClassName:
        type: string
      exceptionStack:
        items:
          type: string
        type: array
      message:
        type: string
      validationErrors:
        items:
          $ref: '#/definitions/InvalidInputProperty'
        type: array
    required:
      - message
      - validationErrors
    type: object
  InvalidInputProperty:
    properties:
      invalidValue:
        type: string
      message:
        type: string
      propertyPath:
        type: string
    required:
      - propertyPath
    type: object
  JobConfigType:
    enum:
      - check_connection_source
      - check_connection_destination
      - discover_schema
      - get_spec
      - sync
      - reset_connection
    type: string
  JobId:
    format: int64
    type: integer
  JobIdRequestBody:
    properties:
      id:
        $ref: '#/definitions/JobId'
    required:
      - id
    type: object
  JobInfoRead:
    properties:
      attempts:
        items:
          $ref: '#/definitions/AttemptInfoRead'
        type: array
      job:
        $ref: '#/definitions/JobRead'
    required:
      - job
      - attempts
    type: object
  JobListRequestBody:
    properties:
      configId:
        type: string
      configTypes:
        items:
          $ref: '#/definitions/JobConfigType'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
        type: object
    required:
      - configTypes
      - configId
    type: object
  JobRead:
    properties:
      configId:
        type: string
      configType:
        $ref: '#/definitions/JobConfigType'
      createdAt:
        format: int64
        type: integer
      id:
        $ref: '#/definitions/JobId'
      status:
        $ref: '#/definitions/JobStatus'
      updatedAt:
        format: int64
        type: integer
    required:
      - id
      - configType
      - configId
      - createdAt
      - updatedAt
      - status
    type: object
  JobReadList:
    properties:
      jobs:
        items:
          $ref: '#/definitions/JobWithAttemptsRead'
        type: array
    required:
      - jobs
    type: object
  JobStatus:
    enum:
      - pending
      - running
      - incomplete
      - failed
      - succeeded
      - cancelled
    type: string
  JobWithAttemptsRead:
    properties:
      attempts:
        items:
          $ref: '#/definitions/AttemptRead'
        type: array
      job:
        $ref: '#/definitions/JobRead'
    type: object
  KnownExceptionInfo:
    properties:
      exceptionClassName:
        type: string
      exceptionStack:
        items:
          type: string
        type: array
      message:
        type: string
      rootCauseExceptionClassName:
        type: string
      rootCauseExceptionStack:
        items:
          type: string
        type: array
    required:
      - message
    type: object
  LogRead:
    properties:
      logLines:
        items:
          type: string
        type: array
    required:
      - logLines
    type: object
  LogType:
    description: type/source of logs produced
    enum:
      - server
      - scheduler
    type: string
  LogsRequestBody:
    properties:
      logType:
        $ref: '#/definitions/LogType'
    required:
      - logType
    type: object
  NamespaceDefinitionType:
    default: source
    description: Method used for computing final namespace in destination
    enum:
      - source
      - destination
      - customformat
    type: string
  NotFoundKnownExceptionInfo:
    properties:
      exceptionClassName:
        type: string
      exceptionStack:
        items:
          type: string
        type: array
      id:
        type: string
      message:
        type: string
      rootCauseExceptionClassName:
        type: string
      rootCauseExceptionStack:
        items:
          type: string
        type: array
    required:
      - message
    type: object
  Notification:
    properties:
      notificationType:
        $ref: '#/definitions/NotificationType'
      slackConfiguration:
        $ref: '#/definitions/SlackNotificationConfiguration'
    required:
      - notificationType
    type: object
  NotificationRead:
    properties:
      message:
        type: string
      status:
        enum:
          - succeeded
          - failed
        type: string
    required:
      - status
    type: object
  NotificationType:
    enum:
      - slack
    type: string
  OperationCreate:
    properties:
      name:
        type: string
      operatorConfiguration:
        $ref: '#/definitions/OperatorConfiguration'
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - name
      - operatorConfiguration
      - workspaceId
    type: object
  OperationId:
    format: uuid
    type: string
  OperationIdRequestBody:
    properties:
      OperationId:
        $ref: '#/definitions/OperationId'
    required:
      - OperationId
    type: object
  OperationRead:
    properties:
      name:
        type: string
      operationId:
        $ref: '#/definitions/OperationId'
      operatorConfiguration:
        $ref: '#/definitions/OperatorConfiguration'
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - operationId
      - name
      - operatorConfiguration
      - workspaceId
    type: object
  OperationReadList:
    properties:
      operations:
        items:
          $ref: '#/definitions/OperationRead'
        type: array
    required:
      - operations
    type: object
  OperationUpdate:
    properties:
      name:
        type: string
      operationId:
        $ref: '#/definitions/OperationId'
      operatorConfiguration:
        $ref: '#/definitions/OperatorConfiguration'
    required:
      - operationId
      - name
      - operatorConfiguration
    type: object
  OperatorConfiguration:
    properties:
      dbt:
        $ref: '#/definitions/OperatorDbt'
      normalization:
        $ref: '#/definitions/OperatorNormalization'
      operatorType:
        $ref: '#/definitions/OperatorType'
    required:
      - operatorType
    type: object
  OperatorDbt:
    properties:
      dbtArguments:
        type: string
      dockerImage:
        type: string
      gitRepoBranch:
        type: string
      gitRepoUrl:
        type: string
    required:
      - gitRepoUrl
    type: object
  OperatorNormalization:
    properties:
      option:
        enum:
          - basic
        type: string
    type: object
  OperatorType:
    enum:
      - normalization
      - dbt
    type: string
  Pagination:
    properties:
      pageSize:
        type: integer
      rowOffset:
        type: integer
    type: object
  ResourceRequirements:
    description: >-
      optional resource requirements to run workers (blank for unbounded
      allocations)
    properties:
      cpu_limit:
        type: string
      cpu_request:
        type: string
      memory_limit:
        type: string
      memory_request:
        type: string
    type: object
  SlackNotificationConfiguration:
    properties:
      webhook:
        type: string
    required:
      - webhook
    type: object
  SlugRequestBody:
    properties:
      slug:
        type: string
    required:
      - slug
    type: object
  SourceConfiguration:
    description: >-
      The values required to configure the source. The schema for this must
      match the schema return by source_definition_specifications/get for the
      source.
    example:
      user: charles
  SourceCoreConfig:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/SourceConfiguration'
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
    required:
      - sourceDefinitionId
      - connectionConfiguration
    type: object
  SourceCreate:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/SourceConfiguration'
      name:
        type: string
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
      - name
      - sourceDefinitionId
      - connectionConfiguration
    type: object
  SourceDefinitionCreate:
    properties:
      dockerImageTag:
        type: string
      dockerRepository:
        type: string
      documentationUrl:
        format: uri
        type: string
      icon:
        type: string
      name:
        type: string
    required:
      - name
      - dockerRepository
      - dockerImageTag
      - documentationUrl
    type: object
  SourceDefinitionId:
    format: uuid
    type: string
  SourceDefinitionIdRequestBody:
    properties:
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
    required:
      - sourceDefinitionId
    type: object
  SourceDefinitionRead:
    properties:
      dockerImageTag:
        type: string
      dockerRepository:
        type: string
      documentationUrl:
        format: uri
        type: string
      icon:
        type: string
      name:
        type: string
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
    required:
      - sourceDefinitionId
      - name
      - dockerRepository
      - dockerImageTag
    type: object
  SourceDefinitionReadList:
    properties:
      sourceDefinitions:
        items:
          $ref: '#/definitions/SourceDefinitionRead'
        type: array
    required:
      - sourceDefinitions
    type: object
  SourceDefinitionSpecification:
    description: >-
      The specification for what values are required to configure the
      sourceDefinition.
    example:
      user:
        type: string
    type: object
  SourceDefinitionSpecificationRead:
    properties:
      connectionSpecification:
        $ref: '#/definitions/SourceDefinitionSpecification'
      documentationUrl:
        type: string
      jobInfo:
        $ref: '#/definitions/SynchronousJobRead'
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
    required:
      - sourceDefinitionId
      - jobInfo
    type: object
  SourceDefinitionUpdate:
    description: >-
      Update the SourceDefinition. Currently, the only allowed attribute to
      update is the default docker image version.
    properties:
      dockerImageTag:
        type: string
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
    required:
      - sourceDefinitionId
      - dockerImageTag
    type: object
  SourceDiscoverSchemaRead:
    description: >-
      Returns the results of a discover catalog job. If the job was not
      successful, the catalog field will not be present. jobInfo will aways be
      present and its status be used to determine if the job was successful or
      not.
    properties:
      catalog:
        $ref: '#/definitions/AirbyteCatalog'
      jobInfo:
        $ref: '#/definitions/SynchronousJobRead'
    required:
      - jobInfo
    type: object
  SourceId:
    format: uuid
    type: string
  SourceIdRequestBody:
    properties:
      sourceId:
        $ref: '#/definitions/SourceId'
    required:
      - sourceId
    type: object
  SourceRead:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/SourceConfiguration'
      name:
        type: string
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
      sourceId:
        $ref: '#/definitions/SourceId'
      sourceName:
        type: string
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - sourceDefinitionId
      - sourceId
      - workspaceId
      - connectionConfiguration
      - name
      - sourceName
    type: object
  SourceReadList:
    properties:
      sources:
        items:
          $ref: '#/definitions/SourceRead'
        type: array
    required:
      - sources
    type: object
  SourceRecreate:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/SourceConfiguration'
      name:
        type: string
      sourceDefinitionId:
        $ref: '#/definitions/SourceDefinitionId'
      sourceId:
        $ref: '#/definitions/SourceId'
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
      - sourceDefinitionId
      - sourceId
      - connectionConfiguration
      - name
    type: object
  SourceUpdate:
    properties:
      connectionConfiguration:
        $ref: '#/definitions/SourceConfiguration'
      name:
        type: string
      sourceId:
        $ref: '#/definitions/SourceId'
    required:
      - sourceId
      - connectionConfiguration
      - name
    type: object
  StreamJsonSchema:
    type: object
  SyncMode:
    enum:
      - full_refresh
      - incremental
    type: string
  SynchronousJobRead:
    properties:
      configId:
        description: only present if a config id was provided.
        type: string
      configType:
        $ref: '#/definitions/JobConfigType'
      createdAt:
        format: int64
        type: integer
      endedAt:
        format: int64
        type: integer
      id:
        format: uuid
        type: string
      logs:
        $ref: '#/definitions/LogRead'
      succeeded:
        type: boolean
    required:
      - id
      - configType
      - createdAt
      - endedAt
      - succeeded
    type: object
  WebBackendConnectionCreate:
    properties:
      destinationId:
        $ref: '#/definitions/DestinationId'
      name:
        description: Optional name of the connection
        type: string
      namespaceDefinition:
        $ref: '#/definitions/NamespaceDefinitionType'
      namespaceFormat:
        default: null
        description: >-
          Used when namespaceDefinition is 'customformat'. If blank then behaves
          like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}"
          then behaves like namespaceDefinition = 'source'.
        example: '${SOURCE_NAMESPACE}'
        type: string
      operationIds:
        items:
          $ref: '#/definitions/OperationId'
        type: array
      operations:
        items:
          $ref: '#/definitions/OperationCreate'
        type: array
      prefix:
        description: >-
          Prefix that will be prepended to the name of each stream when it is
          written to the destination.
        type: string
      resourceRequirements:
        $ref: '#/definitions/ResourceRequirements'
      schedule:
        $ref: '#/definitions/ConnectionSchedule'
      sourceId:
        $ref: '#/definitions/SourceId'
      status:
        $ref: '#/definitions/ConnectionStatus'
      syncCatalog:
        $ref: '#/definitions/AirbyteCatalog'
    required:
      - connection
      - sourceId
      - destinationId
      - status
    type: object
  WebBackendConnectionRead:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
      destination:
        $ref: '#/definitions/DestinationRead'
      destinationId:
        $ref: '#/definitions/DestinationId'
      isSyncing:
        type: boolean
      latestSyncJobCreatedAt:
        description: >-
          epoch time of the latest sync job. null if no sync job has taken
          place.
        format: int64
        type: integer
      latestSyncJobStatus:
        $ref: '#/definitions/JobStatus'
      name:
        type: string
      namespaceDefinition:
        $ref: '#/definitions/NamespaceDefinitionType'
      namespaceFormat:
        default: null
        description: >-
          Used when namespaceDefinition is 'customformat'. If blank then behaves
          like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}"
          then behaves like namespaceDefinition = 'source'.
        example: '${SOURCE_NAMESPACE}'
        type: string
      operationIds:
        items:
          $ref: '#/definitions/OperationId'
        type: array
      operations:
        items:
          $ref: '#/definitions/OperationRead'
        type: array
      prefix:
        description: >-
          Prefix that will be prepended to the name of each stream when it is
          written to the destination.
        type: string
      resourceRequirements:
        $ref: '#/definitions/ResourceRequirements'
      schedule:
        $ref: '#/definitions/ConnectionSchedule'
      source:
        $ref: '#/definitions/SourceRead'
      sourceId:
        $ref: '#/definitions/SourceId'
      status:
        $ref: '#/definitions/ConnectionStatus'
      syncCatalog:
        $ref: '#/definitions/AirbyteCatalog'
    required:
      - connectionId
      - name
      - sourceId
      - destinationId
      - syncCatalog
      - status
      - source
      - destination
      - isSyncing
    type: object
  WebBackendConnectionReadList:
    properties:
      connections:
        items:
          $ref: '#/definitions/WebBackendConnectionRead'
        type: array
    required:
      - connections
    type: object
  WebBackendConnectionRequestBody:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
      withRefreshedCatalog:
        type: boolean
    required:
      - connectionId
    type: object
  WebBackendConnectionUpdate:
    properties:
      connectionId:
        $ref: '#/definitions/ConnectionId'
      namespaceDefinition:
        $ref: '#/definitions/NamespaceDefinitionType'
      namespaceFormat:
        default: null
        description: >-
          Used when namespaceDefinition is 'customformat'. If blank then behaves
          like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}"
          then behaves like namespaceDefinition = 'source'.
        example: '${SOURCE_NAMESPACE}'
        type: string
      operationIds:
        items:
          $ref: '#/definitions/OperationId'
        type: array
      operations:
        items:
          $ref: '#/definitions/WebBackendOperationCreateOrUpdate'
        type: array
      prefix:
        description: >-
          Prefix that will be prepended to the name of each stream when it is
          written to the destination.
        type: string
      resourceRequirements:
        $ref: '#/definitions/ResourceRequirements'
      schedule:
        $ref: '#/definitions/ConnectionSchedule'
      status:
        $ref: '#/definitions/ConnectionStatus'
      syncCatalog:
        $ref: '#/definitions/AirbyteCatalog'
      withRefreshedCatalog:
        type: boolean
    required:
      - connectionId
      - syncCatalog
      - status
    type: object
  WebBackendOperationCreateOrUpdate:
    properties:
      name:
        type: string
      operationId:
        $ref: '#/definitions/OperationId'
      operatorConfiguration:
        $ref: '#/definitions/OperatorConfiguration'
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - name
      - operatorConfiguration
      - workspaceId
    type: object
  WorkspaceCreate:
    properties:
      anonymousDataCollection:
        type: boolean
      email:
        format: email
        type: string
      name:
        type: string
      news:
        type: boolean
      notifications:
        items:
          $ref: '#/definitions/Notification'
        type: array
      securityUpdates:
        type: boolean
    required:
      - name
    type: object
  WorkspaceId:
    format: uuid
    type: string
  WorkspaceIdRequestBody:
    properties:
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
    type: object
  WorkspaceRead:
    properties:
      anonymousDataCollection:
        type: boolean
      customerId:
        $ref: '#/definitions/CustomerId'
      displaySetupWizard:
        type: boolean
      email:
        format: email
        type: string
      initialSetupComplete:
        type: boolean
      name:
        type: string
      news:
        type: boolean
      notifications:
        items:
          $ref: '#/definitions/Notification'
        type: array
      securityUpdates:
        type: boolean
      slug:
        type: string
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
      - customerId
      - name
      - slug
      - initialSetupComplete
    type: object
  WorkspaceReadList:
    properties:
      workspaces:
        items:
          $ref: '#/definitions/WorkspaceRead'
        type: array
    required:
      - workspaces
    type: object
  WorkspaceUpdate:
    properties:
      anonymousDataCollection:
        type: boolean
      displaySetupWizard:
        type: boolean
      email:
        format: email
        type: string
      initialSetupComplete:
        type: boolean
      news:
        type: boolean
      notifications:
        items:
          $ref: '#/definitions/Notification'
        type: array
      securityUpdates:
        type: boolean
      workspaceId:
        $ref: '#/definitions/WorkspaceId'
    required:
      - workspaceId
      - initialSetupComplete
      - anonymousDataCollection
      - news
      - securityUpdates
    type: object
externalDocs:
  description: Find out more about Airbyte
  url: 'https://airbyte.io'
host: airbyte.local
info:
  contact:
    email: contact@airbyte.io
  description: >
    Airbyte Configuration API

    [https://airbyte.io](https://airbyte.io).


    This API is a collection of HTTP RPC-style methods. While it is not a REST
    API, those familiar with REST should find the conventions of this API
    recognizable.


    Here are some conventions that this API follows:

    * All endpoints are http POST methods.

    * All endpoints accept data via `application/json` request bodies. The API
    does not accept any data via query params.

    * The naming convention for endpoints is:
    localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g.
    `localhost:8000/v1/connections/create`.

    * For all `update` methods, the whole object must be passed in, even the
    fields that did not change.


    Change Management:

    * The major version of the API endpoint can be determined / specified in the
    URL `localhost:8080/v1/connections/create`

    * Minor version bumps will be invisible to the end user. The user cannot
    specify minor versions in requests.

    * All backwards incompatible changes will happen in major version bumps. We
    will not make backwards incompatible changes in minor version bumps.
    Examples of non-breaking changes (includes but not limited to...):
      * Adding fields to request or response bodies.
      * Adding new HTTP endpoints.
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  title: Airbyte Configuration API
  version: 1.0.0
  x-apisguru-categories:
    - developer_tools
  x-origin:
    - format: openapi
      url: >-
        https://raw.githubusercontent.com/airbytehq/airbyte/master/airbyte-api/src/main/openapi/config.yaml
      version: '3.0'
  x-providerName: airbyte.local
  x-serviceName: config
paths:
  /v1/connections/create:
    post:
      consumes:
        - application/json
      operationId: createConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Create a connection between a source and a destination
      tags:
        - connection
  /v1/connections/delete:
    post:
      consumes:
        - application/json
      operationId: deleteConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionIdRequestBody'
      produces:
        - application/json
      responses:
        '204':
          description: The resource was deleted successfully.
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Delete a connection
      tags:
        - connection
  /v1/connections/get:
    post:
      consumes:
        - application/json
      operationId: getConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get a connection
      tags:
        - connection
  /v1/connections/list:
    post:
      consumes:
        - application/json
      description: List connections for workspace. Does not return deleted connections.
      operationId: listConnectionsForWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectionReadList'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Returns all connections for a workspace.
      tags:
        - connection
  /v1/connections/reset:
    post:
      consumes:
        - application/json
      operationId: resetConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/JobInfoRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: >-
        Reset the data for the connection. Deletes data generated by the
        connection in the destination. Resets any cursors back to initial state.
      tags:
        - connection
  /v1/connections/sync:
    post:
      consumes:
        - application/json
      operationId: syncConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/JobInfoRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Trigger a manual sync of the connection
      tags:
        - connection
  /v1/connections/update:
    post:
      consumes:
        - application/json
      operationId: updateConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update a connection
      tags:
        - connection
  /v1/deployment/export:
    post:
      operationId: exportArchive
      parameters: []
      produces:
        - application/x-gzip
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/AirbyteArchive'
      summary: Export Airbyte Configuration and Data Archive
      tags:
        - deployment
  /v1/deployment/import:
    post:
      consumes:
        - application/x-gzip
      operationId: importArchive
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AirbyteArchive'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ImportRead'
      summary: Import Airbyte Configuration and Data Archive
      tags:
        - deployment
  /v1/destination_definition_specifications/get:
    post:
      consumes:
        - application/json
      operationId: getDestinationDefinitionSpecification
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationDefinitionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationDefinitionSpecificationRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get specification for a destinationDefinition
      tags:
        - destination_definition_specification
  /v1/destination_definitions/create:
    post:
      consumes:
        - application/json
      operationId: createDestinationDefinition
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/DestinationDefinitionCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationDefinitionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Creates a destinationsDefinition
      tags:
        - destination_definition
  /v1/destination_definitions/get:
    post:
      consumes:
        - application/json
      operationId: getDestinationDefinition
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationDefinitionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationDefinitionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get destinationDefinition
      tags:
        - destination_definition
  /v1/destination_definitions/list:
    post:
      operationId: listDestinationDefinitions
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationDefinitionReadList'
      summary: >-
        List all the destinationDefinitions the current Airbyte deployment is
        configured to use
      tags:
        - destination_definition
  /v1/destination_definitions/list_latest:
    post:
      description: Guaranteed to retrieve the latest information on supported destinations.
      operationId: listLatestDestinationDefinitions
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationDefinitionReadList'
      summary: List the latest destinationDefinitions Airbyte supports
      tags:
        - destination_definition
  /v1/destination_definitions/update:
    post:
      consumes:
        - application/json
      operationId: updateDestinationDefinition
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationDefinitionUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationDefinitionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update destinationDefinition
      tags:
        - destination_definition
  /v1/destinations/check_connection:
    post:
      consumes:
        - application/json
      operationId: checkConnectionToDestination
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckConnectionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Check connection to the destination
      tags:
        - destination
  /v1/destinations/check_connection_for_update:
    post:
      consumes:
        - application/json
      operationId: checkConnectionToDestinationForUpdate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckConnectionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Check connection for a proposed update to a destination
      tags:
        - destination
  /v1/destinations/create:
    post:
      consumes:
        - application/json
      operationId: createDestination
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Create a destination
      tags:
        - destination
  /v1/destinations/delete:
    post:
      consumes:
        - application/json
      operationId: deleteDestination
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationIdRequestBody'
      produces:
        - application/json
      responses:
        '204':
          description: The resource was deleted successfully.
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Delete the destination
      tags:
        - destination
  /v1/destinations/get:
    post:
      consumes:
        - application/json
      operationId: getDestination
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get configured destination
      tags:
        - destination
  /v1/destinations/list:
    post:
      consumes:
        - application/json
      operationId: listDestinationsForWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationReadList'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: List configured destinations for a workspace
      tags:
        - destination
  /v1/destinations/update:
    post:
      consumes:
        - application/json
      operationId: updateDestination
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update a destination
      tags:
        - destination
  /v1/health:
    get:
      operationId: getHealthCheck
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/HealthCheckRead'
      summary: Health Check
      tags:
        - health
  /v1/jobs/cancel:
    post:
      consumes:
        - application/json
      operationId: cancelJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/JobIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/JobInfoRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Cancels a job
      tags:
        - jobs
  /v1/jobs/get:
    post:
      consumes:
        - application/json
      operationId: getJobInfo
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/JobIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/JobInfoRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get information about a job
      tags:
        - jobs
  /v1/jobs/list:
    post:
      consumes:
        - application/json
      operationId: listJobsFor
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/JobListRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/JobReadList'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: >-
        Returns recent jobs for a connection. Jobs are returned in descending
        order by createdAt.
      tags:
        - jobs
  /v1/logs/get:
    post:
      consumes:
        - application/json
      operationId: getLogs
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LogsRequestBody'
      produces:
        - text/plain
        - application/json
      responses:
        '200':
          description: Returns the log file
          schema:
            format: binary
            type: string
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get logs
      tags:
        - logs
  /v1/notifications/try:
    post:
      consumes:
        - application/json
      operationId: tryNotificationConfig
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Notification'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/NotificationRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Try sending a notifications
      tags:
        - notifications
  /v1/openapi:
    get:
      operationId: getOpenApiSpec
      parameters: []
      produces:
        - text/plain
      responses:
        '200':
          description: Returns the openapi specification file
          schema:
            format: binary
            type: string
      summary: Returns the openapi specification
      tags:
        - openapi
  /v1/operations/check:
    post:
      consumes:
        - application/json
      operationId: checkOperation
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OperatorConfiguration'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckOperationRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Check if an operation to be created is valid
      tags:
        - operation
  /v1/operations/create:
    post:
      consumes:
        - application/json
      operationId: createOperation
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OperationCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/OperationRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Create an operation to be applied as part of a connection pipeline
      tags:
        - operation
  /v1/operations/delete:
    post:
      consumes:
        - application/json
      operationId: deleteOperation
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OperationIdRequestBody'
      produces:
        - application/json
      responses:
        '204':
          description: The resource was deleted successfully.
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Delete an operation
      tags:
        - operation
  /v1/operations/get:
    post:
      consumes:
        - application/json
      operationId: getOperation
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OperationIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/OperationRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Returns an operation
      tags:
        - operation
  /v1/operations/list:
    post:
      consumes:
        - application/json
      description: List operations for connection.
      operationId: listOperationsForConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/OperationReadList'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Returns all operations for a connection.
      tags:
        - operation
  /v1/operations/update:
    post:
      consumes:
        - application/json
      operationId: updateOperation
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OperationUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/OperationRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update an operation
      tags:
        - operation
  /v1/scheduler/destinations/check_connection:
    post:
      consumes:
        - application/json
      operationId: executeDestinationCheckConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationCoreConfig'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckConnectionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Run check connection for a given destination configuration
      tags:
        - scheduler
  /v1/scheduler/sources/check_connection:
    post:
      consumes:
        - application/json
      operationId: executeSourceCheckConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceCoreConfig'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckConnectionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Run check connection for a given source configuration
      tags:
        - scheduler
  /v1/scheduler/sources/discover_schema:
    post:
      consumes:
        - application/json
      operationId: executeSourceDiscoverSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceCoreConfig'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDiscoverSchemaRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Run discover schema for a given source a source configuration
      tags:
        - scheduler
  /v1/source_definition_specifications/get:
    post:
      consumes:
        - application/json
      operationId: getSourceDefinitionSpecification
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceDefinitionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDefinitionSpecificationRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get specification for a SourceDefinition.
      tags:
        - source_definition_specification
  /v1/source_definitions/create:
    post:
      consumes:
        - application/json
      operationId: createSourceDefinition
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SourceDefinitionCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDefinitionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Creates a sourceDefinition
      tags:
        - source_definition
  /v1/source_definitions/get:
    post:
      consumes:
        - application/json
      operationId: getSourceDefinition
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceDefinitionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDefinitionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get source
      tags:
        - source_definition
  /v1/source_definitions/list:
    post:
      operationId: listSourceDefinitions
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDefinitionReadList'
      summary: >-
        List all the sourceDefinitions the current Airbyte deployment is
        configured to use
      tags:
        - source_definition
  /v1/source_definitions/list_latest:
    post:
      description: Guaranteed to retrieve the latest information on supported sources.
      operationId: listLatestSourceDefinitions
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDefinitionReadList'
      summary: List the latest sourceDefinitions Airbyte supports
      tags:
        - source_definition
  /v1/source_definitions/update:
    post:
      consumes:
        - application/json
      operationId: updateSourceDefinition
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SourceDefinitionUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDefinitionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update a sourceDefinition
      tags:
        - source_definition
  /v1/sources/check_connection:
    post:
      consumes:
        - application/json
      operationId: checkConnectionToSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckConnectionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Check connection to the source
      tags:
        - source
  /v1/sources/check_connection_for_update:
    post:
      consumes:
        - application/json
      operationId: checkConnectionToSourceForUpdate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckConnectionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Check connection for a proposed update to a source
      tags:
        - source
  /v1/sources/create:
    post:
      consumes:
        - application/json
      operationId: createSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Create a source
      tags:
        - source
  /v1/sources/delete:
    post:
      consumes:
        - application/json
      operationId: deleteSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceIdRequestBody'
      produces:
        - application/json
      responses:
        '204':
          description: The resource was deleted successfully.
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Delete a source
      tags:
        - source
  /v1/sources/discover_schema:
    post:
      consumes:
        - application/json
      operationId: discoverSchemaForSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceDiscoverSchemaRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Discover the schema catalog of the source
      tags:
        - source
  /v1/sources/get:
    post:
      consumes:
        - application/json
      operationId: getSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get source
      tags:
        - source
  /v1/sources/list:
    post:
      consumes:
        - application/json
      description: List sources for workspace. Does not return deleted sources.
      operationId: listSourcesForWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceReadList'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: List sources for workspace
      tags:
        - source
  /v1/sources/update:
    post:
      consumes:
        - application/json
      operationId: updateSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update a source
      tags:
        - source
  /v1/state/get:
    post:
      consumes:
        - application/json
      operationId: getState
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectionState'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Fetch the current state for a connection.
      tags:
        - connection
  /v1/web_backend/connections/create:
    post:
      consumes:
        - application/json
      operationId: webBackendCreateConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WebBackendConnectionCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WebBackendConnectionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Create a connection
      tags:
        - web_backend
  /v1/web_backend/connections/get:
    post:
      consumes:
        - application/json
      operationId: webBackendGetConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WebBackendConnectionRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WebBackendConnectionRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Get a connection
      tags:
        - web_backend
  /v1/web_backend/connections/list:
    post:
      consumes:
        - application/json
      operationId: webBackendListConnectionsForWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WebBackendConnectionReadList'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Returns all connections for a workspace.
      tags:
        - web_backend
  /v1/web_backend/connections/update:
    post:
      consumes:
        - application/json
      operationId: webBackendUpdateConnection
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WebBackendConnectionUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WebBackendConnectionRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update a connection
      tags:
        - web_backend
  /v1/web_backend/destinations/recreate:
    post:
      consumes:
        - application/json
      operationId: webBackendRecreateDestination
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DestinationRecreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DestinationRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Recreate a destination
      tags:
        - web_backend
  /v1/web_backend/sources/recreate:
    post:
      consumes:
        - application/json
      operationId: webBackendRecreateSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SourceRecreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SourceRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Recreate a source
      tags:
        - web_backend
  /v1/workspaces/create:
    post:
      consumes:
        - application/json
      operationId: createWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceCreate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WorkspaceRead'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Creates a workspace
      tags:
        - workspace
  /v1/workspaces/delete:
    post:
      consumes:
        - application/json
      operationId: deleteWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceIdRequestBody'
      produces:
        - application/json
      responses:
        '204':
          description: The resource was deleted successfully.
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Deletes a workspace
      tags:
        - workspace
  /v1/workspaces/get:
    post:
      consumes:
        - application/json
      operationId: getWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceIdRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WorkspaceRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Find workspace by ID
      tags:
        - workspace
  /v1/workspaces/get_by_slug:
    post:
      consumes:
        - application/json
      operationId: getWorkspaceBySlug
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SlugRequestBody'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WorkspaceRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Find workspace by slug
      tags:
        - workspace
  /v1/workspaces/list:
    post:
      operationId: listWorkspaces
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WorkspaceReadList'
      summary: List all workspaces registered in the current Airbyte deployment
      tags:
        - workspace
  /v1/workspaces/update:
    post:
      consumes:
        - application/json
      operationId: updateWorkspace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkspaceUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/WorkspaceRead'
        '404':
          description: Object with given id was not found.
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
        '422':
          description: Input failed validation
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      summary: Update workspace state
      tags:
        - workspace
schemes:
  - http
security:
  - {}
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: '2.0'
tags:
  - description: Workspace related resources.
    name: workspace
  - description: SourceDefinition related resources.
    name: source_definition
  - description: SourceDefinition specification related resources.
    name: source_definition_specification
  - description: Source related resources.
    name: source
  - description: DestinationDefinition related resources.
    name: destination_definition
  - description: DestinationDefinitionSpecification related resources.
    name: destination_definition_specification
  - description: Destination  related resources.
    name: destination
  - description: Connection between sources and destinations.
    name: connection
  - description: Connection between sources and destinations.
    name: web_backend
  - description: Healthchecks
    name: health
  - description: Export/Import Airbyte Configuration and Database resources.
    name: deployment
x-components:
  responses:
    ExceptionResponse:
      content:
        application/json:
          schema:
            $ref: '#/definitions/KnownExceptionInfo'
      description: Exception occurred; see message for details.
    InvalidInputResponse:
      content:
        application/json:
          schema:
            $ref: '#/definitions/InvalidInputExceptionInfo'
      description: Input failed validation
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/definitions/NotFoundKnownExceptionInfo'
      description: Object with given id was not found.

