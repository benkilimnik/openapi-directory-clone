basePath: /api
definitions:
  APIError:
    properties:
      error:
        type: string
      status:
        format: int32
        type: integer
    required:
      - error
      - status
    type: object
  ArticleCreate:
    properties:
      article:
        properties:
          body_markdown:
            description: |
              The body of the article.

              It can contain an optional front matter. For example

              ```markdown
              ---
              title: Hello, World!
              published: true
              tags: discuss, help
              date: 20190701T10:00Z
              series: Hello series
              canonical_url: https://example.com/blog/hello
              cover_image: article_published_cover_image
              ---
              ```

              `date`, `series` and `canonical_url` are optional.
              `date` is the publication date-time
              `series` is the name of the series the article belongs to
              `canonical_url` is the canonical URL of the article
              `cover_image` is the main image of the article

              *If the markdown contains a front matter, it will take precedence
              on the equivalent params given in the payload.*
            type: string
          canonical_url:
            format: url
            type: string
          description:
            type: string
          main_image:
            format: url
            type: string
          organization_id:
            description: >
              Only users belonging to an organization can assign the article to
              it
            format: int32
            type: integer
          published:
            description: >
              True to create a published article, false otherwise. Defaults to
              false
            type: boolean
          series:
            description: >
              Article series name.


              All articles belonging to the same series need to have the same
              name

              in this parameter.
            type: string
          tags:
            items:
              type: string
            type: array
          title:
            type: string
        type: object
    type: object
  ArticleFlareTag:
    description: Flare tag of the article
    properties:
      bg_color_hex:
        description: Background color (hexadecimal)
        type: string
      name:
        type: string
      text_color_hex:
        description: Text color (hexadecimal)
        type: string
    type: object
  ArticleIndex:
    properties:
      canonical_url:
        format: url
        type: string
      comments_count:
        format: int32
        type: integer
      cover_image:
        format: url
        type: string
        x-nullable: true
      created_at:
        format: date-time
        type: string
      crossposted_at:
        format: date-time
        type: string
        x-nullable: true
      description:
        type: string
      edited_at:
        format: date-time
        type: string
        x-nullable: true
      flare_tag:
        $ref: '#/definitions/ArticleFlareTag'
      id:
        format: int32
        type: integer
      last_comment_at:
        format: date-time
        type: string
      organization:
        $ref: '#/definitions/SharedOrganization'
      path:
        format: path
        type: string
      positive_reactions_count:
        format: int32
        type: integer
      public_reactions_count:
        format: int32
        type: integer
      published_at:
        format: date-time
        type: string
      published_timestamp:
        description: Crossposting or published date time
        format: date-time
        type: string
      readable_publish_date:
        type: string
      reading_time_minutes:
        description: 'Reading time, in minutes'
        format: int32
        type: integer
      slug:
        type: string
      social_image:
        format: url
        type: string
      tag_list:
        items:
          type: string
        type: array
      tags:
        type: string
      title:
        type: string
      type_of:
        type: string
      url:
        format: url
        type: string
      user:
        $ref: '#/definitions/SharedUser'
    required:
      - type_of
      - id
      - title
      - description
      - cover_image
      - readable_publish_date
      - social_image
      - tag_list
      - tags
      - slug
      - path
      - url
      - canonical_url
      - comments_count
      - positive_reactions_count
      - public_reactions_count
      - created_at
      - edited_at
      - crossposted_at
      - published_at
      - last_comment_at
      - published_timestamp
      - user
      - reading_time_minutes
    type: object
  ArticleMe:
    properties:
      body_markdown:
        description: The body of the article in Markdown format
        type: string
      canonical_url:
        format: url
        type: string
      comments_count:
        format: int32
        type: integer
      cover_image:
        format: url
        type: string
        x-nullable: true
      description:
        type: string
      flare_tag:
        $ref: '#/definitions/ArticleFlareTag'
      id:
        format: int32
        type: integer
      organization:
        $ref: '#/definitions/SharedOrganization'
      page_views_count:
        format: int32
        type: integer
      path:
        format: path
        type: string
      positive_reactions_count:
        format: int32
        type: integer
      public_reactions_count:
        format: int32
        type: integer
      published:
        type: boolean
      published_at:
        format: date-time
        type: string
      published_timestamp:
        description: Crossposting or published date time
        format: date-time
        type: string
      reading_time_minutes:
        description: 'Reading time, in minutes'
        format: int32
        type: integer
      slug:
        type: string
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
      type_of:
        type: string
      url:
        format: url
        type: string
      user:
        $ref: '#/definitions/SharedUser'
    required:
      - type_of
      - id
      - title
      - description
      - cover_image
      - published
      - published_at
      - tag_list
      - slug
      - path
      - url
      - canonical_url
      - comments_count
      - positive_reactions_count
      - public_reactions_count
      - page_views_count
      - published_timestamp
      - body_markdown
      - user
      - reading_time_minutes
    type: object
  ArticleShow:
    properties:
      body_html:
        type: string
      body_markdown:
        type: string
      canonical_url:
        format: url
        type: string
      comments_count:
        format: int32
        type: integer
      cover_image:
        format: url
        type: string
        x-nullable: true
      created_at:
        format: date-time
        type: string
      crossposted_at:
        format: date-time
        type: string
        x-nullable: true
      description:
        type: string
      edited_at:
        format: date-time
        type: string
        x-nullable: true
      flare_tag:
        $ref: '#/definitions/ArticleFlareTag'
      id:
        format: int32
        type: integer
      last_comment_at:
        format: date-time
        type: string
      organization:
        $ref: '#/definitions/SharedOrganization'
      path:
        format: path
        type: string
      positive_reactions_count:
        format: int32
        type: integer
      public_reactions_count:
        format: int32
        type: integer
      published_at:
        format: date-time
        type: string
      published_timestamp:
        description: Crossposting or published date time
        format: date-time
        type: string
      readable_publish_date:
        type: string
      reading_time_minutes:
        description: 'Reading time, in minutes'
        format: int32
        type: integer
      slug:
        type: string
      social_image:
        format: url
        type: string
      tag_list:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      type_of:
        type: string
      url:
        format: url
        type: string
      user:
        $ref: '#/definitions/SharedUser'
    required:
      - type_of
      - id
      - title
      - description
      - cover_image
      - readable_publish_date
      - social_image
      - tag_list
      - tags
      - slug
      - path
      - url
      - canonical_url
      - comments_count
      - positive_reactions_count
      - public_reactions_count
      - created_at
      - edited_at
      - crossposted_at
      - published_at
      - last_comment_at
      - published_timestamp
      - body_html
      - body_markdown
      - user
      - reading_time_minutes
    type: object
  ArticleUpdate:
    properties:
      article:
        properties:
          body_markdown:
            description: |
              The body of the article.

              It can contain an optional front matter. For example

              ```markdown
              ---
              title: Hello, World!
              published: true
              tags: discuss, help
              date: 20190701T10:00Z
              series: Hello series
              canonical_url: https://example.com/blog/hello
              cover_image: article_published_cover_image
              ---
              ```

              `date`, `series` and `canonical_url` are optional.
              `date` is the publication date-time
              `series` is the name of the series the article belongs to
              `canonical_url` is the canonical URL of the article
              `cover_image` is the main image of the article

              *If the markdown contains a front matter, it will take precedence
              on the equivalent params given in the payload.*
            type: string
          canonical_url:
            format: url
            type: string
          description:
            type: string
          main_image:
            format: url
            type: string
          organization_id:
            description: >
              Only users belonging to an organization can assign the article to
              it
            format: int32
            type: integer
          published:
            description: >
              True to create a published article, false otherwise. Defaults to
              false
            type: boolean
          series:
            description: >
              Article series name.


              All articles belonging to the same series need to have the same
              name

              in this parameter.


              To remove an article from a series, the `null` value can be used.
            type: string
          tags:
            items:
              type: string
            type: array
          title:
            type: string
        type: object
    type: object
  ArticleVideo:
    properties:
      cloudinary_video_url:
        description: The preview image of the video
        format: url
        type: string
      id:
        format: int32
        type: integer
      path:
        type: string
      title:
        type: string
      type_of:
        type: string
      user:
        properties:
          name:
            description: The user's name
            type: string
        type: object
      user_id:
        format: int32
        type: integer
      video_duration_in_minutes:
        description: |
          The duration of the video.

          If the video duration is below 1 hour, the format will be `mm:ss`,
          if it's 1 hour or above the format will be `h:mm:ss`.
        type: string
      video_source_url:
        format: url
        type: string
    required:
      - type_of
      - id
      - path
      - cloudinary_video_url
      - title
      - user_id
      - video_duration_in_minutes
      - video_source_url
      - user
    type: object
  Comment:
    properties:
      body_html:
        description: HTML formatted comment
        type: string
      children:
        items:
          $ref: '#/definitions/Comment'
        type: array
      created_at:
        format: date-time
        type: string
      id_code:
        type: string
      type_of:
        type: string
      user:
        $ref: '#/definitions/SharedUser'
    required:
      - type_of
      - id_code
      - created_at
      - body_html
      - user
      - children
    type: object
  FollowedTag:
    properties:
      id:
        description: Tag id
        format: int64
        type: integer
      name:
        type: string
      points:
        format: float
        type: number
    required:
      - id
      - name
      - points
    type: object
  Follower:
    properties:
      created_at:
        description: Date the user became a follower
        format: date-time
        type: string
      id:
        description: Follow id
        format: int32
        type: integer
      name:
        type: string
      path:
        type: string
      profile_image:
        description: Profile image (60x60)
        format: url
        type: string
      type_of:
        type: string
      username:
        type: string
    required:
      - type_of
      - created_at
      - id
      - name
      - path
      - username
      - profile_image
    type: object
  Listing:
    properties:
      body_markdown:
        type: string
      category:
        $ref: '#/definitions/ListingCategory'
      id:
        format: int64
        type: integer
      organization:
        $ref: '#/definitions/SharedOrganization'
      processed_html:
        type: string
      published:
        type: boolean
      slug:
        type: string
      tag_list:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      type_of:
        type: string
      user:
        $ref: '#/definitions/SharedUser'
    required:
      - type_of
      - id
      - title
      - slug
      - body_markdown
      - tag_list
      - tags
      - category
      - processed_html
      - published
      - user
    type: object
  ListingCategory:
    enum:
      - cfp
      - forhire
      - collabs
      - education
      - jobs
      - mentors
      - products
      - mentees
      - forsale
      - events
      - misc
    type: string
  ListingCreate:
    properties:
      listing:
        properties:
          action:
            description: Set it to "draft" to create an unpublished listing
            enum:
              - draft
            type: string
          body_markdown:
            description: The body of the listing in Markdown format.
            type: string
          category:
            $ref: '#/definitions/ListingCategory'
          contact_via_connect:
            description: |
              True if users are allowed to contact the listing's owner
              via DEV connect, false otherwise.

              Defaults to false.
            type: boolean
          expires_at:
            description: Date and time of expiration.
            format: date-time
            type: string
          location:
            description: Geographical area or city for the listing.
            type: string
          organization_id:
            description: >
              The id of the organization the user is creating the listing for.


              Only users belonging to an organization can assign the listing to
              it.
            format: int64
            type: integer
          tag_list:
            description: |
              Comma separated list of tags.

              A maximum of 8 tags are allowed.
            type: string
          tags:
            description: >
              Tags related to the listing.


              A maximum of 8 tags are allowed and it takes precedence over
              `tag_list`.
            items:
              type: string
            type: array
          title:
            type: string
        required:
          - title
          - body_markdown
          - category
        type: object
    type: object
  ListingUpdate:
    properties:
      listing:
        properties:
          action:
            description: |
              This param can be provided by itself to invoke some actions:

              - `bump` bumps the listing and charge either the
                organization or the user
              - `publish` publishes a draft listing
              - `unpublish` unpublishes a published listing

              It will take priority on any other param in the payload.
            enum:
              - bump
              - publish
              - unpublish
            type: string
          body_markdown:
            description: The body of the listing in Markdown format.
            type: string
          category:
            $ref: '#/definitions/ListingCategory'
          contact_via_connect:
            description: |
              True if users are allowed to contact the listing's owner
              via DEV connect, false otherwise.

              Defaults to false.
            type: boolean
          expires_at:
            description: Date and time of expiration.
            format: date-time
            type: string
          location:
            description: Geographical area or city for the listing.
            type: string
          tag_list:
            description: |
              Comma separated list of tags.

              A maximum of 8 tags are allowed.
            type: string
          tags:
            description: >
              Tags related to the listing.


              A maximum of 8 tags are allowed and it takes precedence over
              `tag_list`.
            items:
              type: string
            type: array
          title:
            type: string
        type: object
    type: object
  Organization:
    description: Organization
    properties:
      github_username:
        type: string
        x-nullable: true
      joined_at:
        description: Date of joining
        format: date-time
        type: string
      location:
        type: string
        x-nullable: true
      name:
        type: string
      profile_image:
        description: Profile image (640x640)
        format: url
        type: string
      story:
        type: string
        x-nullable: true
      summary:
        type: string
        x-nullable: true
      tag_line:
        type: string
        x-nullable: true
      tech_stack:
        type: string
        x-nullable: true
      twitter_username:
        type: string
        x-nullable: true
      type_of:
        type: string
      url:
        format: url
        type: string
      username:
        type: string
    type: object
  PodcastEpisode:
    properties:
      id:
        format: int32
        type: integer
      image_url:
        format: url
        type: string
      path:
        type: string
      podcast:
        properties:
          image_url:
            format: url
            type: string
          slug:
            type: string
          title:
            type: string
        type: object
      title:
        type: string
      type_of:
        type: string
    required:
      - type_of
      - id
      - path
      - image_url
      - title
      - podcast
    type: object
  ProfileImage:
    description: Profile image
    properties:
      image_of:
        description: >-
          Discriminates what is the type of the profile image owner (user or
          organization)
        enum:
          - user
          - organization
        type: string
      profile_image:
        description: Profile image (640x640)
        type: string
      profile_image_90:
        description: Profile image (90x90)
        type: string
      type_of:
        enum:
          - profile_image
        type: string
    type: object
  ReadingList:
    properties:
      article:
        $ref: '#/definitions/ArticleIndex'
      created_at:
        format: date-time
        type: string
      id:
        description: Follow id
        format: int32
        type: integer
      status:
        enum:
          - valid
          - invalid
          - confirmed
          - archived
        type: string
      type_of:
        type: string
    required:
      - type_of
      - id
      - status
      - created_at
      - article
    type: object
  SharedOrganization:
    description: The organization the resource belongs to
    properties:
      name:
        type: string
      profile_image:
        description: Profile image (640x640)
        format: url
        type: string
      profile_image_90:
        description: Profile image (90x90)
        format: url
        type: string
      slug:
        type: string
      username:
        type: string
    type: object
  SharedUser:
    description: The resource creator
    properties:
      github_username:
        type: string
        x-nullable: true
      name:
        type: string
      profile_image:
        description: Profile image (640x640)
        type: string
      profile_image_90:
        description: Profile image (90x90)
        type: string
      twitter_username:
        type: string
        x-nullable: true
      username:
        type: string
      website_url:
        format: url
        type: string
        x-nullable: true
    type: object
  Tag:
    properties:
      bg_color_hex:
        description: Background color (hexadecimal)
        type: string
      id:
        format: int32
        type: integer
      name:
        type: string
      text_color_hex:
        description: Text color (hexadecimal)
        type: string
    required:
      - id
      - name
      - bg_color_hex
      - text_color_hex
    type: object
  User:
    properties:
      github_username:
        type: string
        x-nullable: true
      id:
        format: int32
        type: integer
      joined_at:
        description: 'Date of joining (formatted with strftime `"%b %e, %Y"`)'
        type: string
      location:
        type: string
        x-nullable: true
      name:
        type: string
      profile_image:
        description: Profile image (320x320)
        format: url
        type: string
      summary:
        type: string
        x-nullable: true
      twitter_username:
        type: string
        x-nullable: true
      type_of:
        type: string
      username:
        type: string
      website_url:
        format: url
        type: string
        x-nullable: true
    required:
      - type_of
      - id
      - username
      - name
      - summary
      - twitter_username
      - github_username
      - website_url
      - location
      - joined_at
      - profile_image
    type: object
  WebhookCreate:
    description: Webhook creation payload
    properties:
      webhook_endpoint:
        properties:
          events:
            description: An array of events identifiers
            items:
              enum:
                - article_created
                - article_updated
                - article_destroyed
              type: string
            type: array
          source:
            description: 'The name of the requester, eg. "DEV"'
            type: string
          target_url:
            format: url
            type: string
        required:
          - source
          - target_url
          - events
        type: object
    type: object
  WebhookIndex:
    description: Webhook
    properties:
      created_at:
        format: date-time
        type: string
      events:
        description: An array of events identifiers
        items:
          type: string
        type: array
      id:
        format: int64
        type: integer
      source:
        description: 'The name of the requester, eg. "DEV"'
        type: string
      target_url:
        format: url
        type: string
      type_of:
        type: string
    type: object
  WebhookShow:
    description: Webhook
    properties:
      created_at:
        format: date-time
        type: string
      events:
        description: An array of events identifiers
        items:
          type: string
        type: array
      id:
        format: int64
        type: integer
      source:
        description: 'The name of the requester, eg. "DEV"'
        type: string
      target_url:
        format: url
        type: string
      type_of:
        type: string
      user:
        $ref: '#/definitions/SharedUser'
    type: object
host: dev.to
info:
  contact:
    email: yo@dev.to
    name: DEV Team
    url: 'https://dev.to/contact'
  description: >

    Access Forem articles, users and other resources via API.


    For a real-world example of Forem in action, check out
    [DEV](https://www.dev.to).


    All endpoints that don't require authentication are CORS enabled.


    Dates and date times, unless otherwise specified, must be in

    the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
  termsOfService: 'https://dev.to/terms'
  title: DEV API (beta)
  version: 0.9.7
  x-apisguru-categories:
    - social
  x-logo:
    altText: Forem logo
    backgroundColor: ''
    url: >-
      https://res.cloudinary.com/practicaldev/image/fetch/s--EYllUmBG--/c_limit,f_auto,fl_progressive,q_80,w_190/https://res.cloudinary.com/practicaldev/image/fetch/s--m5i3pkpk--/c_limit%252cf_auto%252cfl_progressive%252cq_auto%252cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sf6uve8ehm4ogwka0mez.png
  x-origin:
    - format: openapi
      url: 'https://raw.githubusercontent.com/forem/forem/master/docs/api_v0.yml'
      version: '3.0'
  x-providerName: dev.to
paths:
  /articles:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        By default it will return featured, published articles ordered
        by descending popularity.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getArticles
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
        - description: |
            Using this parameter will retrieve articles that contain the
            requested tag.

            Articles will be ordered by descending popularity.

            This parameter can be used in conjuction with `top`.
          in: query
          name: tag
          type: string
          x-example: discuss
        - description: >
            Using this parameter will retrieve articles with any of the
            comma-separated tags.


            Articles will be ordered by descending popularity.
          in: query
          name: tags
          type: string
          x-example: 'javascript, css'
        - description: >
            Using this parameter will retrieve articles that do _not_ contain
            _any_ of comma-separated tags.


            Articles will be ordered by descending popularity.
          in: query
          name: tags_exclude
          type: string
          x-example: 'node, java'
        - description: >
            Using this parameter will retrieve articles belonging

            to a User or Organization ordered by descending publication date.


            If `state=all` the number of items returned will be `1000` instead
            of the default `30`.


            This parameter can be used in conjuction with `state`.
          in: query
          name: username
          type: string
          x-example: ben
        - description: >
            Using this parameter will allow the client to check which articles
            are fresh or rising.


            If `state=fresh` the server will return fresh articles.

            If `state=rising` the server will return rising articles.


            This param can be used in conjuction with `username`, only if set to
            `all`.
          enum:
            - fresh
            - rising
            - all
          in: query
          name: state
          type: string
          x-example: fresh
        - description: >
            Using this parameter will allow the client to return the most
            popular articles

            in the last `N` days.


            `top` indicates the number of days since publication of the articles

            returned.


            This param can be used in conjuction with `tag`.
          format: int32
          in: query
          minimum: 1
          name: top
          type: integer
          x-example: 2
        - description: |
            Adding this will allow the client to return the list of articles
            belonging to the requested collection, ordered by ascending
            publication date.
          format: int32
          in: query
          name: collection_id
          type: integer
          x-example: 99
      produces:
        - application/json
      responses:
        '200':
          description: A list of articles
          schema:
            items:
              $ref: '#/definitions/ArticleIndex'
            type: array
      summary: Published articles
      tags:
        - articles
      x-codeSamples:
        - label: curl (all articles)
          lang: Shell
          source: |
            curl https://dev.to/api/articles
        - label: curl (user's articles)
          lang: Shell
          source: |
            curl https://dev.to/api/articles?username=ben
    post:
      consumes:
        - application/json
      description: >
        This endpoint allows the client to create a new article.


        "Articles" are all the posts that users create on DEV that typically

        show up in the feed. They can be a blog post, a discussion question,

        a help thread etc. but is referred to as article within the code.


        ### Rate limiting


        There is a limit of 10 requests per 30 seconds.


        ### Additional resources


        - [Rails tests for Articles
        API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb)
      operationId: createArticle
      parameters:
        - description: Article to create
          in: body
          name: body
          schema:
            $ref: '#/definitions/ArticleCreate'
      produces:
        - application/json
      responses:
        '201':
          description: A newly created article
          headers:
            Location:
              description: The URL of the new article
              format: url
              type: string
          schema:
            $ref: '#/definitions/ArticleShow'
        '400':
          description: BadRequest
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/APIError'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/APIError'
        '429':
          description: Too Many Requests
          headers:
            Retry-After:
              description: The number of seconds to wait until the next request
              format: int32
              type: integer
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: Create a new article
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"article":{"title":"Title","body_markdown":"Body","published":false,"tags":["discuss", "javascript"]}}' \
              https://dev.to/api/articles
        - label: curl (with front matter)
          lang: Shell
          source: >
            curl -X POST -H "Content-Type: application/json" \

            -H "api-key: API_KEY" \

            -d '{"article":{"body_markdown":"---\ntitle:A sample article
            about...\npublished:false\n---\n..."}}' \

            https://dev.to/api/articles
  /articles/latest:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles.
        ordered by descending publish date.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getLatestArticles
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of articles sorted by descending publish date
          schema:
            items:
              $ref: '#/definitions/ArticleIndex'
            type: array
      summary: Published articles sorted by publish date
      tags:
        - articles
  /articles/me:
    get:
      description: |
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Published articles will be in reverse chronological publication order.

        It will return published articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserArticles
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of published articles
          schema:
            items:
              $ref: '#/definitions/ArticleMe'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: User's articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me
  /articles/me/all:
    get:
      description: >
        This endpoint allows the client to retrieve a list of all articles on

        behalf of an authenticated user.


        "Articles" are all the posts that users create on DEV that typically

        show up in the feed. They can be a blog post, a discussion question,

        a help thread etc. but is referred to as article within the code.


        It will return both published and unpublished articles with pagination.


        Unpublished articles will be at the top of the list in reverse
        chronological creation order.

        Published articles will follow in reverse chronological publication
        order.


        By default a page will contain `30` articles.
      operationId: getUserAllArticles
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of articles
          schema:
            items:
              $ref: '#/definitions/ArticleMe'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: User's all articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me/all
  /articles/me/published:
    get:
      description: |
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Published articles will be in reverse chronological publication order.

        It will return published articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserPublishedArticles
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of published articles
          schema:
            items:
              $ref: '#/definitions/ArticleMe'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: User's published articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me/published
  /articles/me/unpublished:
    get:
      description: >
        This endpoint allows the client to retrieve a list of unpublished
        articles

        on behalf of an authenticated user.


        "Articles" are all the posts that users create on DEV that typically

        show up in the feed. They can be a blog post, a discussion question,

        a help thread etc. but is referred to as article within the code.


        Unpublished articles will be in reverse chronological creation order.


        It will return unpublished articles with pagination.

        By default a page will contain `30` articles.
      operationId: getUserUnpublishedArticles
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of articles
          schema:
            items:
              $ref: '#/definitions/ArticleMe'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: User's unpublished articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: >
            curl -H "api-key: API_KEY"
            https://dev.to/api/articles/me/unpublished
  '/articles/{id}':
    get:
      description: |
        This endpoint allows the client to retrieve a single
        published article given its `id`.
      operationId: getArticleById
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: An article
          schema:
            $ref: '#/definitions/ArticleShow'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: A published article by ID
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/articles/150589
    parameters:
      - description: Id of the article
        format: int32
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
        x-example: 150589
    put:
      consumes:
        - application/json
      description: >
        This endpoint allows the client to update an existing article.


        "Articles" are all the posts that users create on DEV that typically

        show up in the feed. They can be a blog post, a discussion question,

        a help thread etc. but is referred to as article within the code.


        ### Rate limiting


        There is a limit of 30 requests per 30 seconds.


        ### Additional resources


        - [Rails tests for Articles
        API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb)
      operationId: updateArticle
      parameters:
        - description: >
            Article params for the update.


            *Note: if the article contains a front matter in its body, its front

            matter properties will still take precedence over any JSON
            equivalent

            params, which means that the full body_markdown with the modified

            front matter params needs to be provided for an update to be
            successful*
          in: body
          name: body
          schema:
            $ref: '#/definitions/ArticleUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: The updated article
          schema:
            $ref: '#/definitions/ArticleShow'
        '400':
          description: BadRequest
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/APIError'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/APIError'
        '429':
          description: Too Many Requests
          headers:
            Retry-After:
              description: The number of seconds to wait until the next request
              format: int32
              type: integer
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: Update an article
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X PUT -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"article":{"title":"Title"}}' \
              https://dev.to/api/articles/{id}
  '/articles/{username}/{slug}':
    get:
      description: |
        This endpoint allows the client to retrieve a single
        published article given its `path`.
      operationId: getArticleByPath
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: An article
          schema:
            $ref: '#/definitions/ArticleShow'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: A published article by path
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: >
            curl
            https://dev.to/api/articles/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
    parameters:
      - description: User or organization username.
        in: path
        name: username
        required: true
        type: string
        x-example: devteam
      - description: Slug of the article.
        in: path
        name: slug
        required: true
        type: string
        x-example: for-empowering-community-2k6h
  /comments:
    get:
      description: |
        This endpoint allows the client to retrieve all comments belonging to an
        article or podcast episode as threaded conversations.

        It will return the all top level comments with their nested comments as
        threads. See the format specification for further details.
      operationId: getCommentsByArticleId
      parameters:
        - description: Article identifier.
          format: int32
          in: query
          minimum: 1
          name: a_id
          type: integer
          x-example: 270180
        - description: Podcast Episode identifier.
          format: int32
          in: query
          minimum: 1
          name: p_id
          type: integer
          x-example: 124
      produces:
        - application/json
      responses:
        '200':
          description: A list of threads of comments
          schema:
            items:
              $ref: '#/definitions/Comment'
            type: array
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: Comments
      tags:
        - comments
      x-codeSamples:
        - label: curl (all comments of an article)
          lang: Shell
          source: |
            curl https://dev.to/api/comments?a_id=270180
        - label: curl (all comments of a podcast episode)
          lang: Shell
          source: |
            curl https://dev.to/api/comments?p_id=124
  '/comments/{id}':
    get:
      description: |
        This endpoint allows the client to retrieve a comment as well as his
        descendants comments.

        It will return the required comment (the root) with its nested
        descendants as a thread.

        See the format specification for further details.
      operationId: getCommentById
      parameters:
        - description: Comment identifier.
          in: path
          name: id
          required: true
          type: string
          x-example: m35m
      produces:
        - application/json
      responses:
        '200':
          description: A comment and its descendants
          schema:
            $ref: '#/definitions/Comment'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: Comment
      tags:
        - comments
      x-codeSamples:
        - label: curl (a comment and its descendants)
          lang: Shell
          source: |
            curl https://dev.to/api/comments/m51e
  /followers/users:
    get:
      description: >
        This endpoint allows the client to retrieve a list of the followers

        they have.


        "Followers" are users that are following other users on the website.


        It supports pagination, each page will contain `80` followers by
        default.
      operationId: getFollowers
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 80
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: created_at
          description: |
            Specifies the sort order for the `created_at` param of the follow
            relationship. To sort by newest followers first (descending order)
            specify `?sort=-created_at`.
          in: query
          name: sort
          pattern: '^-?\w+(,-?\w+)*$'
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: A list of followers
          schema:
            items:
              $ref: '#/definitions/Follower'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
      summary: Followers
      tags:
        - followers
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/followers/users
  /follows/tags:
    get:
      description: |
        This endpoint allows the client to retrieve a list of the tags
        they follow.
      operationId: getFollowedTags
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: A list of followed tags
          schema:
            items:
              $ref: '#/definitions/FollowedTag'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
      summary: Followed tags
      tags:
        - follows
        - tags
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/follows/tags
  /listings:
    get:
      description: >
        This endpoint allows the client to retrieve a list of listings.


        "Listings" are classified ads that users create on DEV.

        They can be related to conference announcements, job offers,
        mentorships,

        upcoming events and more.


        By default it will return published listings ordered by descending

        freshness.


        It supports pagination, each page will contain `30` articles by default.
      operationId: getListings
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
        - description: |
            Using this parameter will return listings belonging to the
            requested category.
          in: query
          name: category
          type: string
          x-example: cfp
      produces:
        - application/json
      responses:
        '200':
          description: A list of listings
          schema:
            items:
              $ref: '#/definitions/Listing'
            type: array
      summary: Published listings
      tags:
        - listings
      x-codeSamples:
        - label: curl (all listings)
          lang: Shell
          source: |
            curl https://dev.to/api/listings
    post:
      consumes:
        - application/json
      description: >
        This endpoint allows the client to create a new listing.


        "Listings" are classified ads that users create on DEV.

        They can be related to conference announcements, job offers,
        mentorships,

        upcoming events and more.


        The user creating the listing or the organization on which behalf the
        user

        is creating for need to have enough creadits for this operation to be

        successful. The server will prioritize the organization's credits over

        the user's credits.


        ### Additional resources


        - [Rails tests for Listings
        API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb)
      operationId: createListing
      parameters:
        - description: Listing to create
          in: body
          name: body
          schema:
            $ref: '#/definitions/ListingCreate'
      produces:
        - application/json
      responses:
        '201':
          description: A newly created Listing
          schema:
            $ref: '#/definitions/Listing'
        '400':
          description: BadRequest
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '402':
          description: PaymentRequired
          schema:
            $ref: '#/definitions/APIError'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
      summary: Create a new listing
      tags:
        - listings
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title","body_markdown":"Body","category":"cfp"}}' \
              https://dev.to/api/listings
        - label: curl (with tags)
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title","body_markdown":"Body","category":"cfp","tags":["python"]}}' \
              https://dev.to/api/listings
        - label: curl (draft)
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title","body_markdown":"Body","category":"cfp","action":"draft"}}' \
              https://dev.to/api/listings
  '/listings/category/{category}':
    get:
      description: >
        This endpoint allows the client to retrieve a list of listings belonging

        to the specified category.


        "Listings" are classified ads that users create on DEV.

        They can be related to conference announcements, job offers,
        mentorships,

        upcoming events and more.


        By default it will return published listings ordered by descending

        freshness.


        It supports pagination, each page will contain `30` articles by default.
      operationId: getListingsByCategory
      parameters:
        - description: The category of the listing
          enum:
            - cfp
            - forhire
            - collabs
            - education
            - jobs
            - mentors
            - products
            - mentees
            - forsale
            - events
            - misc
          in: path
          name: category
          required: true
          type: string
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of listings
          schema:
            items:
              $ref: '#/definitions/Listing'
            type: array
      summary: Published listings by category
      tags:
        - listings
      x-codeSamples:
        - label: curl (call for papers listings)
          lang: Shell
          source: |
            curl https://dev.to/api/listings/category/cfp
  '/listings/{id}':
    get:
      description: |
        This endpoint allows the client to retrieve
        a single listing given its `id`.

        An unpublished listing is only accessible if authentication is supplied
        and it belongs to the authenticated user.
      operationId: getListingById
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: A listing
          schema:
            $ref: '#/definitions/Listing'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      security:
        - {}
        - api_key: []
      summary: A listing
      tags:
        - listings
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/listings/1184
        - label: curl (with authentication)
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/listings/1185
    parameters:
      - description: Id of the listing
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
        x-example: 1
    put:
      consumes:
        - application/json
      description: |
        This endpoint allows the client to update an existing listing.
      operationId: updateListing
      parameters:
        - description: >
            Listing params for the update.


            **Note**: except for bumping, publishing and unpublishing there are
            the

            following restrictions on the ability to update listings:


            - the payload has to contain at least one param among `title`,
            `body_markdown` or `tags`/`tag_list`

            - the listing can't be updated if it has not been bumped in the last
            24 hours

            - the listing can't be updated if it has been published but not
            recently bumped
          in: body
          name: body
          schema:
            $ref: '#/definitions/ListingUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: The updated article
          schema:
            $ref: '#/definitions/ArticleShow'
        '400':
          description: BadRequest
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '402':
          description: PaymentRequired
          schema:
            $ref: '#/definitions/APIError'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
      summary: Update a listing
      tags:
        - listings
      x-codeSamples:
        - label: curl (bump)
          lang: Shell
          source: |
            curl -X PUT -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"action":"bump"}' \
              https://dev.to/api/listings/{id}
        - label: curl (update)
          lang: Shell
          source: |
            curl -X PUT -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title"}' \
              https://dev.to/api/listings/{id}
  '/organizations/{username}':
    get:
      description: >
        This endpoint allows the client to retrieve a single organization by
        their username
      operationId: getOrganization
      parameters:
        - description: |
            Username of the organization
          in: path
          name: username
          required: true
          type: string
          x-example: ecorp
      produces:
        - application/json
      responses:
        '200':
          description: An organization
          schema:
            $ref: '#/definitions/Organization'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: An organization
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp
  '/organizations/{username}/articles':
    get:
      description: >
        This endpoint allows the client to retrieve a list of Articles belonging
        to the organization


        It supports pagination, each page will contain `30` listing by default.
      operationId: getOrgArticles
      parameters:
        - description: |
            Username of the organization
          in: path
          name: username
          required: true
          type: string
          x-example: ecorp
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of users belonging to the organization
          schema:
            items:
              $ref: '#/definitions/ArticleIndex'
            type: array
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: Organization's Articles
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp/listings
  '/organizations/{username}/listings':
    get:
      description: >
        This endpoint allows the client to retrieve a list of listings belonging
        to the organization


        It supports pagination, each page will contain `30` listing by default.
      operationId: getOrgListings
      parameters:
        - description: |
            Username of the organization
          in: path
          name: username
          required: true
          type: string
          x-example: ecorp
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
        - description: |
            Using this parameter will return listings belonging to the
            requested category.
          in: query
          name: category
          type: string
          x-example: cfp
      produces:
        - application/json
      responses:
        '200':
          description: A list of listings belonging to the organization
          schema:
            items:
              allOf:
                - $ref: '#/definitions/Listing'
                - required:
                    - organization
            type: array
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: Organization's listings
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp/listings
  '/organizations/{username}/users':
    get:
      description: >
        This endpoint allows the client to retrieve a list of users belonging to
        the organization


        It supports pagination, each page will contain `30` users by default.
      operationId: getOrgUsers
      parameters:
        - description: |
            Username of the organization
          in: path
          name: username
          required: true
          type: string
          x-example: ecorp
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of users belonging to the organization
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: Organization's users
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp/users
  /podcast_episodes:
    get:
      description: |
        This endpoint allows the client to retrieve a list of podcast episodes.

        "Podcast episodes" are episodes belonging to podcasts.

        It will only return active podcast episodes that belong to published
        podcasts available on the platform,
        ordered by descending publication date.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getPodcastEpisodes
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
        - description: |
            Using this parameter will retrieve episodes belonging
            to a specific podcast.
          in: query
          name: username
          type: string
          x-example: codenewbie
      produces:
        - application/json
      responses:
        '200':
          description: A list of podcast episodes
          schema:
            items:
              $ref: '#/definitions/PodcastEpisode'
            type: array
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: Published podcast episodes
      tags:
        - podcast-episodes
      x-codeSamples:
        - label: curl (all podcast episodes)
          lang: Shell
          source: |
            curl https://dev.to/api/podcast_episodes
        - label: curl (all episodes belonging to a podcast)
          lang: Shell
          source: |
            curl https://dev.to/api/podcast_episodes?username=codenewbie
  '/profile_images/{username}':
    get:
      description: |
        This endpoint allows the client to retrieve a user or organization
        profile image information by its corresponding username
      operationId: getProfileImage
      parameters:
        - description: Username of the user or organization
          in: path
          name: username
          required: true
          type: string
          x-example: diogoosorio
      produces:
        - application/json
      responses:
        '200':
          description: The profile image
          schema:
            $ref: '#/definitions/ProfileImage'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: User or organization profile picture
      tags:
        - profile images
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/profile_images/diogoosorio
  /readinglist:
    get:
      description: >
        This endpoint allows the client to retrieve a list of readinglist
        reactions along with the related article for the authenticated user.


        Reading list will be in reverse chronological order base

        on the creation of the reaction.


        It will return paginated reading list items along with the articles

        they refer to. By default a page will contain `30` items
      operationId: getReadinglist
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 30
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: The reading list with a overwiew of the article
          schema:
            items:
              $ref: '#/definitions/ReadingList'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: User's reading list
      tags:
        - readinglist
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/readinglist
  /tags:
    get:
      description: |
        This endpoint allows the client to retrieve a list of tags
        that can be used to tag articles.

        It will return tags ordered by popularity.

        It supports pagination, each page will contain `10` tags by default.
      operationId: getTags
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 10
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of tags
          schema:
            items:
              $ref: '#/definitions/Tag'
            type: array
      summary: Tags
      tags:
        - tags
      x-codeSamples:
        - label: curl (all tags)
          lang: Shell
          source: |
            curl https://dev.to/api/tags
  /users/me:
    get:
      description: |
        This endpoint allows the client to retrieve information
        about the authenticated user
      operationId: getUserMe
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: A user
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: The authenticated user
      tags:
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/users/me
  '/users/{id}':
    get:
      description: |
        This endpoint allows the client to retrieve a single user, either by
        id or by the user's username
      operationId: getUser
      parameters:
        - description: |
            Id of the user.

            It can be either of the following two values:

              - an integer representing the id of the user
              - the string `by_username` (needs to be used in conjuction with the param `url`)
          in: path
          name: id
          required: true
          type: string
          x-example: '1'
        - description: Username of the user
          in: query
          name: url
          type: string
          x-example: ben
      produces:
        - application/json
      responses:
        '200':
          description: A user
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      summary: A user
      tags:
        - users
      x-codeSamples:
        - label: curl (by id)
          lang: Shell
          source: |
            curl https://dev.to/api/users/1
        - label: curl (by username)
          lang: Shell
          source: |
            curl https://dev.to/api/users/by_username?url=ben
  /videos:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles
        that are uploaded with a video.

        It will only return published video articles
        ordered by descending popularity.

        It supports pagination, each page will contain `24` articles by default.
      operationId: getArticlesWithVideo
      parameters:
        - default: 1
          description: Pagination page.
          format: int32
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 24
          description: Page size (the number of items to return per page).
          format: int32
          in: query
          maximum: 1000
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: A list of video articles
          schema:
            items:
              $ref: '#/definitions/ArticleVideo'
            type: array
      summary: Articles with a video
      tags:
        - articles
        - videos
      x-codeSamples:
        - label: curl (all video articles)
          lang: Shell
          source: |
            curl https://dev.to/api/videos
  /webhooks:
    get:
      description: >
        This endpoint allows the client to retrieve a list of webhooks they have

        previously registered.


        "Webhooks" are used to register HTTP endpoints that will be called once
        a relevant event is

        triggered inside the web application, events like `article_created`,
        `article_updated`.


        It will return all webhooks, without pagination.
      operationId: getWebhooks
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: A list of webhooks
          schema:
            items:
              $ref: '#/definitions/WebhookIndex'
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: Webhooks
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/webhooks
    post:
      consumes:
        - application/json
      description: >
        This endpoint allows the client to create a new webhook.


        "Webhooks" are used to register HTTP endpoints that will be called once
        a relevant event is

        triggered inside the web application, events like `article_created`,
        `article_updated`.
      operationId: createWebhook
      parameters:
        - description: Webhook to create
          in: body
          name: body
          schema:
            $ref: '#/definitions/WebhookCreate'
      produces:
        - application/json
      responses:
        '201':
          description: A newly created webhook
          schema:
            $ref: '#/definitions/WebhookShow'
        '400':
          description: BadRequest
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: Create a new webhook
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"webhook_endpoint":{"target_url":"https://example.org/webhooks/webhook1","source":"DEV","events":["article_created"]}}' \
              https://dev.to/api/webhooks
  '/webhooks/{id}':
    delete:
      description: |
        This endpoint allows the client to delete a single
        webhook given its `id`.
      operationId: deleteWebhook
      parameters: []
      produces:
        - application/json
      responses:
        '204':
          description: A successful deletion
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: A webhook endpoint
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X DELETE \
              -H "api-key: API_KEY" \
              https://dev.to/api/webhooks/1
    get:
      description: |
        This endpoint allows the client to retrieve a single
        webhook given its `id`.
      operationId: getWebhookById
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: A webhook endpoint
          schema:
            $ref: '#/definitions/WebhookShow'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
      security:
        - api_key: []
        - oauth2: []
      summary: A webhook endpoint
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/webhooks/123
    parameters:
      - description: Id of the webhook
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
        x-example: 123
schemes:
  - https
securityDefinitions:
  api_key:
    description: |
      API Key authentication.

      Authentication for some endpoints, like write operations on the
      Articles API require a DEV API key.

      ### Getting an API key

      To obtain one, please follow these steps:

        - visit https://dev.to/settings/account
        - in the "DEV API Keys" section create a new key by adding a
          description and clicking on "Generate API Key"

          ![obtain a DEV API Key](https://user-images.githubusercontent.com/146201/64421366-af3f8b00-d0a1-11e9-8ff6-7cc0ca6e854e.png)
        - You'll see the newly generated key in the same view
          ![generated DEV API Key](https://user-images.githubusercontent.com/146201/64421367-af3f8b00-d0a1-11e9-9831-73d3bdfdff66.png)
    in: header
    name: api-key
    type: apiKey
  oauth2:
    authorizationUrl: 'https://dev.to/oauth/authorize'
    description: |
      OAuth2 authentication.

      OAuth2 authentication is still in private alpha.
    flow: accessCode
    scopes: {}
    tokenUrl: 'https://dev.to/oauth/token'
    type: oauth2
swagger: '2.0'
tags:
  - description: Articles are all the posts users create on DEV
    name: articles
  - description: Users can leave comments to articles and podcasts episodes
    name: comments
  - description: Resources are user can follow
    name: follows
  - description: Users can follow other users on the website
    name: followers
  - description: Listings are classified ads
    name: listings
  - description: Users can create and join organizations
    name: organizations
  - description: Podcast episodes
    name: podcast-episodes
  - description: User's reading list
    name: readinglist
  - description: Tags for articles
    name: tags
  - description: Users own resources that require authentication
    name: users
  - description: Video articles
    name: videos
  - description: Webhooks are HTTP endpoints registered to receive events
    name: webhooks
  - description: User or organization profile images
    name: profile images
x-components:
  examples:
    ArticleCreateFrontMatter:
      value:
        article:
          body_markdown: |
            ---
            title: Hello, World!
            published: true
            tags: discuss, help
            date: 20190701T10:00Z
            series: Hello series
            ---

            Hello DEV, this is my first post
    ArticleCreateOrganization:
      value:
        article:
          body_markdown: 'Hello DEV, this is my first post'
          organization_id: 1234
          published: true
          series: Hello series
          tags:
            - discuss
            - help
          title: 'Hello, World!'
    ArticleCreateTitleBody:
      value:
        article:
          body_markdown: 'Hello DEV, this is my first post'
          published: true
          series: Hello series
          tags:
            - discuss
            - help
          title: 'Hello, World!'
    ArticleShow:
      value:
        body_html: >
          <p>Today's episode of Byte Sized is about Leonhard Euler and the
          creation of <a href="https://en.wikipedia.org/wiki/Graph_theory">Graph
          Theory</a>.</p>


          <p>For more about how Graph Theory works, check out this video from
          BaseCS!</p>...
        body_markdown: "---\r\ntitle: Byte Sized Episode 2: The Creation of Graph Theory \r\npublished: true\r\ndescription: The full story of Leonhard Euler and the creation of this fundamental computer science principle, delivered in a few minutes.\r\ntags: computerscience, graphtheory, bytesized, history\r\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\r\nseries: Byte Sized Season 1\r\n---\r\n\r\nToday's episode of Byte Sized is about Leonhard Euler and the creation of [Graph Theory](https://en.wikipedia.org/wiki/Graph_theory).\r\n\r\nFor more about how Graph Theory works, check out this video from BaseCS!..."
        canonical_url: >-
          https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        collection_id: 1693
        comments_count: 21
        cover_image: >-
          https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
        created_at: '2019-07-31T11:15:06.000Z'
        crossposted_at: null
        description: >-
          The full story of Leonhard Euler and the creation of this fundamental
          computer science principle, delivered in a few minutes.
        edited_at: null
        id: 150589
        last_comment_at: '2019-08-06T16:48:10.000Z'
        organization:
          name: Byte Sized
          profile_image: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
          profile_image_90: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
          slug: bytesized
          username: bytesized
        path: /bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        positive_reactions_count: 122
        public_reactions_count: 322
        published_at: '2019-08-01T15:47:54.000Z'
        published_timestamp: '2019-08-01T15:47:54.000Z'
        readable_publish_date: Aug  1
        reading_time_minutes: 15
        slug: byte-sized-episode-2-the-creation-of-graph-theory-34g1
        social_image: >-
          https://res.cloudinary.com/practicaldev/image/fetch/s--6wSHHfwd--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
        tag_list: 'computerscience, graphtheory, bytesized, history'
        tags:
          - computerscience
          - graphtheory
          - bytesized
          - history
        title: 'Byte Sized Episode 2: The Creation of Graph Theory '
        type_of: article
        url: >-
          https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        user:
          github_username: vaidehijoshi
          name: Vaidehi Joshi
          profile_image: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
          profile_image_90: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
          twitter_username: vaidehijoshi
          username: vaidehijoshi
          website_url: 'http://www.vaidehi.com'
    ArticleVideo:
      value:
        - cloudinary_video_url: 'https://res.cloudinary.com/....png'
          id: 273532
          path: /devteam/basecs-depth-first-search-implementing-4kkl
          title: 'BaseCS: Depth First Search Implementing'
          type_of: video_article
          user:
            name: Vaidehi Joshi
          user_id: 2882
          video_duration_in_minutes: 707
          video_source_url: 'https://dw71fyauz7yz9.cloudfront.net/123/123.m3u8'
    ArticlesIndex:
      value:
        - canonical_url: >-
            https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          collection_id: null
          comments_count: 37
          cover_image: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--74Bl23tz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png
          created_at: '2019-10-24T13:41:29.000Z'
          crossposted_at: null
          description: ''
          edited_at: '2019-10-24T13:56:35.000Z'
          id: 194541
          last_comment_at: '2019-10-25T08:12:43.000Z'
          organization:
            name: The DEV Team
            profile_image: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--0kDBq1Ne--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png
            profile_image_90: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--8tTU-XkZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png
            slug: devteam
            username: devteam
          path: >-
            /devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          positive_reactions_count: 12
          public_reactions_count: 142
          published_at: '2019-10-24T13:52:17.000Z'
          published_timestamp: '2019-10-24T13:52:17.000Z'
          readable_publish_date: Oct 24
          reading_time_minutes: 15
          slug: >-
            there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          social_image: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--SeMxdKIa--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png
          tag_list:
            - meta
            - changelog
            - css
            - ux
          tags: 'meta, changelog, css, ux'
          title: >-
            There's a new DEV theme in town for all you 10x hackers out there
            (plus one actually useful new feature)
          type_of: article
          url: >-
            https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          user:
            github_username: benhalpern
            name: Ben Halpern
            profile_image: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--Y1sq1tFG--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png
            profile_image_90: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--DcW51A6v--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png
            twitter_username: bendhalpern
            username: ben
            website_url: 'http://benhalpern.com'
    Comment:
      value:
        body_html: >
          <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
          "http://www.w3.org/TR/REC-html40/loose.dtd">

          <html><body>

          <p>...</p>


          <p>...</p>


          </body></html>
        children:
          - body_html: >
              <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
              "http://www.w3.org/TR/REC-html40/loose.dtd">

              <html><body>


              <p>...</p>


              </body></html>
            children: []
            created_at: '2020-07-02T17:19:40.000Z'
            id_code: m35m
            type_of: comment
            user:
              github_username: null
              name: rhymes
              profile_image: 'https://res.cloudinary.com/...jpeg'
              profile_image_90: 'https://res.cloudinary.com/....jpeg'
              twitter_username: null
              username: rhymes
              website_url: null
        created_at: '2020-08-02T17:19:40.000Z'
        id_code: m357
        type_of: comment
        user:
          github_username: null
          name: Dario Waelchi
          profile_image: 'https://res.cloudinary.com/...png'
          profile_image_90: 'https://res.cloudinary.com/...png'
          twitter_username: null
          username: dario waelchi
          website_url: null
    CommentDeleted:
      value:
        body_html: '<p>[deleted]</p>'
        children:
          - body_html: >
              <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
              "http://www.w3.org/TR/REC-html40/loose.dtd">

              <html><body>


              <p>...</p>


              </body></html>
            children: []
            id_code: m35m
            type_of: comment
            user:
              github_username: null
              name: rhymes
              profile_image: 'https://res.cloudinary.com/...jpeg'
              profile_image_90: 'https://res.cloudinary.com/...jpeg'
              twitter_username: null
              username: rhymes
              website_url: null
        id_code: m357
        type_of: comment
        user: {}
    CommentHidden:
      value:
        body_html: '<p>[hidden by post author]</p>'
        children:
          - body_html: >
              <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
              "http://www.w3.org/TR/REC-html40/loose.dtd">

              <html><body>


              <p>...</p>


              </body></html>
            children: []
            id_code: m35m
            type_of: comment
            user:
              github_username: null
              name: rhymes
              profile_image: 'https://res.cloudinary.com/...jpeg'
              profile_image_90: 'https://res.cloudinary.com/...jpeg'
              twitter_username: null
              username: rhymes
              website_url: null
        id_code: m357
        type_of: comment
        user: {}
    Comments:
      value:
        - body_html: >
            <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
            "http://www.w3.org/TR/REC-html40/loose.dtd">

            <html><body>

            <p>...</p>


            </body></html>
          children: []
          created_at: '2020-07-01T17:59:43.000Z'
          id_code: m3m0
          type_of: comment
          user:
            github_username: null
            name: Heriberto Morissette
            profile_image: 'https://res.cloudinary.com/...jpeg'
            profile_image_90: 'https://res.cloudinary.com/...jpeg'
            twitter_username: null
            username: heriberto_morissette
            website_url: null
        - body_html: >
            <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
            "http://www.w3.org/TR/REC-html40/loose.dtd">

            <html><body>

            <p>...</p>


            <p>...</p>


            </body></html>
          children:
            - body_html: >
                <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
                "http://www.w3.org/TR/REC-html40/loose.dtd">

                <html><body>


                <p>...</p>


                </body></html>
              children: []
              created_at: '2020-08-01T11:59:40.000Z'
              id_code: m35m
              type_of: comment
              user:
                github_username: null
                name: rhymes
                profile_image: 'https://res.cloudinary.com/...jpeg'
                profile_image_90: >-
                  https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg
                twitter_username: null
                username: rhymes
                website_url: null
          created_at: '2020-07-02T17:19:40.000Z'
          id_code: m357
          type_of: comment
          user:
            github_username: null
            name: Dario Waelchi
            profile_image: 'https://res.cloudinary.com/...png'
            profile_image_90: 'https://res.cloudinary.com/...png'
            twitter_username: null
            username: dario waelchi
            website_url: null
    CommentsDeleted:
      value:
        - body_html: '<p>[deleted]</p>'
          children:
            - body_html: >
                <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
                "http://www.w3.org/TR/REC-html40/loose.dtd">

                <html><body>


                <p>...</p>


                </body></html>
              children: []
              id_code: m35m
              type_of: comment
              user:
                github_username: null
                name: rhymes
                profile_image: 'https://res.cloudinary.com/...jpeg'
                profile_image_90: >-
                  https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg
                twitter_username: null
                username: rhymes
                website_url: null
          id_code: m357
          type_of: comment
          user: {}
    CommentsHidden:
      value:
        - body_html: '<p>[hidden by post author]</p>'
          children:
            - body_html: >
                <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
                "http://www.w3.org/TR/REC-html40/loose.dtd">

                <html><body>


                <p>...</p>


                </body></html>
              children: []
              id_code: m35m
              type_of: comment
              user:
                github_username: null
                name: rhymes
                profile_image: 'https://res.cloudinary.com/...jpeg'
                profile_image_90: >-
                  https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg
                twitter_username: null
                username: rhymes
                website_url: null
          id_code: m357
          type_of: comment
          user: {}
    ErrorBadRequest:
      value:
        error: bad request
        status: 400
    ErrorForbidden:
      value:
        error: forbidden
        status: 403
    ErrorNotFound:
      value:
        error: not found
        status: 404
    ErrorPaymentRequired:
      value:
        error: not enough available credits
        status: 402
    ErrorTooManyRequests:
      value:
        error: 'Rate limit reached, try again in 30 seconds'
        status: 429
    ErrorUnauthorized:
      value:
        error: unauthorized
        status: 401
    ErrorUnprocessableEntity:
      value:
        error: 'param is missing or the value is empty: article'
        status: 422
    Followers:
      value:
        - created_at: '2021-04-02T04:21:46.000Z'
          id: 12
          name: Mrs. Neda Morissette
          path: /nedamrsmorissette
          profile_image: 'https://res.cloudinary.com/...'
          type_of: user_follower
          username: nedamrsmorissette
        - created_at: '2021-04-02T04:21:46.000Z'
          id: 11
          name: Yoko Hintz
          path: /yokohintz
          profile_image: 'https://res.cloudinary.com/...'
          type_of: user_follower
          username: yokohintz
    Listing:
      value:
        body_markdown: >-
          Do you want to learn about automation? Maybe you're interested in
          AI-driven testing? Security testing? We have a selection of talks,
          workshops and training courses to help you in a wide variety of areas
          in software testing. Join us for our very first trip to Detroit MI! 


          https://bit.ly/TBDetroit
        category: cfp
        id: 1157
        processed_html: >
          <p>Do you want to learn about automation? Maybe you're interested in
          AI-driven testing? Security testing? We have a selection of talks,
          workshops and training courses to help you in a wide variety of areas
          in software testing. Join us for our very first trip to Detroit MI!
          </p>


          <p><a href="https://bit.ly/TBDetroit">https://bit.ly/TBDetroit</a></p>
        published: true
        slug: testbash-detroit-50gb
        tag_list: events
        tags:
          - events
        title: TestBash Detroit
        type_of: listing
        user:
          github_username: Heather-R
          name: Heather
          profile_image: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
          profile_image_90: >-
            https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
          twitter_username: null
          username: heatherr
          website_url: null
    ListingCreate:
      value:
        listing:
          body_markdown: Awesome conference
          category: cfp
          tags:
            - events
          title: ACME Conference
    ListingCreateOrganization:
      value:
        listing:
          body_markdown: Awesome conference
          category: cfp
          organization_id: 1
          tags:
            - events
          title: ACME Conference
    ListingUpdate:
      value:
        listing:
          body_markdown: Awesome new conference
          title: ACME New Conference
    ListingUpdateActionBump:
      value:
        listing:
          action: bump
    ListingUpdateActionPublish:
      value:
        listing:
          action: publish
    ListingUpdateActionUnpublish:
      value:
        listing:
          action: unpublish
    Listings:
      value:
        - body_markdown: >-
            Do you want to learn about automation? Maybe you're interested in
            AI-driven testing? Security testing? We have a selection of talks,
            workshops and training courses to help you in a wide variety of
            areas in software testing. Join us for our very first trip to
            Detroit MI! 


            https://bit.ly/TBDetroit
          category: cfp
          created_at: '2021-04-07 08:29:42 UTC'
          id: 1157
          processed_html: >
            <p>Do you want to learn about automation? Maybe you're interested in
            AI-driven testing? Security testing? We have a selection of talks,
            workshops and training courses to help you in a wide variety of
            areas in software testing. Join us for our very first trip to
            Detroit MI! </p>


            <p><a
            href="https://bit.ly/TBDetroit">https://bit.ly/TBDetroit</a></p>
          published: true
          slug: testbash-detroit-50gb
          tag_list: events
          tags:
            - events
          title: TestBash Detroit
          type_of: listing
          user:
            github_username: Heather-R
            name: Heather
            profile_image: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            profile_image_90: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            twitter_username: null
            username: heatherr
            website_url: null
    ListingsByOrganization:
      value:
        - body_markdown: >-
            Do you want to learn about automation? Maybe you're interested in
            AI-driven testing? Security testing? We have a selection of talks,
            workshops and training courses to help you in a wide variety of
            areas in software testing. Join us for our very first trip to
            Detroit MI! 


            https://bit.ly/TBDetroit
          category: cfp
          id: 1157
          organization:
            name: E Corp
            profile_image: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            profile_image_90: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            slug: ecorp
            username: ecorp
          processed_html: >
            <p>Do you want to learn about automation? Maybe you're interested in
            AI-driven testing? Security testing? We have a selection of talks,
            workshops and training courses to help you in a wide variety of
            areas in software testing. Join us for our very first trip to
            Detroit MI! </p>


            <p><a
            href="https://bit.ly/TBDetroit">https://bit.ly/TBDetroit</a></p>
          published: true
          slug: testbash-detroit-50gb
          tag_list: events
          tags:
            - events
          title: TestBash Detroit
          type_of: listing
          user:
            github_username: Heather-R
            name: Heather
            profile_image: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            profile_image_90: >-
              https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            twitter_username: null
            username: heatherr
            website_url: null
    Organization:
      value:
        github_username: ecorp
        joined_at: '2019-10-24T13:41:29.000Z'
        location: New York
        name: E Corp
        profile_image: 'https://res.cloudinary.com/...jpeg'
        story: null
        summary: 'Together we can change the world, with E Corp'
        tag_line: null
        tech_stack: Ruby
        twitter_username: ecorp
        type_of: organization
        url: 'https://ecorp.internet'
        username: ecorp
    PodcastEpisodes:
      value:
        - id: 13894
          image_url: >-
            https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
          path: /codenewbie/s11-e7-why-site-reliability-is-so-important-molly-struve
          podcast:
            image_url: >-
              https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
            slug: codenewbie
            title: CodeNewbie
          title: 'S11:E7 - Why site reliability is so important (Molly Struve)'
          type_of: podcast_episodes
        - id: 13829
          image_url: >-
            https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
          path: >-
            /codenewbie/s11-e6-what-are-the-pros-and-cons-of-working-in-civic-tech-aidan-feldman
          podcast:
            image_url: >-
              https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
            slug: codenewbie
            title: CodeNewbie
          title: >-
            S11:E6 - What are the pros and cons of working in civic tech (Aidan
            Feldman)
          type_of: podcast_episodes
    ProfileImage:
      value:
        image_of: user
        profile_image: 'https://res.cloudinary.com/...jpeg'
        profile_image_90: 'https://res.cloudinary.com/...jpeg'
        type_of: profile_image
    Tags:
      value:
        - bg_color_hex: '#F7DF1E'
          id: 6
          name: javascript
          text_color_hex: '#000000'
        - bg_color_hex: '#562765'
          id: 8
          name: webdev
          text_color_hex: '#ffffff'
    TagsFollowed:
      value:
        - id: 13
          name: discuss
          points: 3
        - id: 12
          name: webdev
          points: 1
    User:
      value:
        github_username: bob
        id: 1234
        joined_at: 'Jan 1, 2017'
        location: New York
        name: bob
        profile_image: 'https://res.cloudinary.com/...jpeg'
        summary: 'Hello, world'
        twitter_username: bob
        type_of: user
        username: bob
        website_url: null
    Users:
      value:
        - github_username: bob
          id: 1234
          joined_at: 'Jan 1, 2017'
          location: New York
          name: bob
          profile_image: 'https://res.cloudinary.com/...jpeg'
          summary: 'Hello, world'
          twitter_username: bob
          type_of: user
          username: bob
          website_url: null
    WebhookCreate:
      value:
        webhook_endpoint:
          events:
            - article_created
          source: DEV
          target_url: 'https://example.com/webhooks/webhook1'
    WebhookShow:
      value:
        created_at: '2019-09-02T09:47:39.230Z'
        events:
          - article_created
        id: 1
        source: DEV
        target_url: 'https://example.com/webhooks/webhook1'
        type_of: webhook_endpoint
        user:
          github_username: bob
          name: bob
          profile_image: ...
          profile_image_90: ...
          twitter_username: null
          username: bob
          website_url: null
  parameters:
    listingCategoryParam:
      description: |
        Using this parameter will return listings belonging to the
        requested category.
      in: query
      name: category
      type: string
      x-example: cfp
    pageParam:
      default: 1
      description: Pagination page.
      format: int32
      in: query
      minimum: 1
      name: page
      required: false
      type: integer
    perPageParam10to1000:
      default: 10
      description: Page size (the number of items to return per page).
      format: int32
      in: query
      maximum: 1000
      minimum: 1
      name: per_page
      required: false
      type: integer
    perPageParam24to1000:
      default: 24
      description: Page size (the number of items to return per page).
      format: int32
      in: query
      maximum: 1000
      minimum: 1
      name: per_page
      required: false
      type: integer
    perPageParam30to100:
      default: 30
      description: Page size (the number of items to return per page).
      format: int32
      in: query
      maximum: 100
      minimum: 1
      name: per_page
      required: false
      type: integer
    perPageParam30to1000:
      default: 30
      description: Page size (the number of items to return per page).
      format: int32
      in: query
      maximum: 1000
      minimum: 1
      name: per_page
      required: false
      type: integer
    perPageParam80to1000:
      default: 80
      description: Page size (the number of items to return per page).
      format: int32
      in: query
      maximum: 1000
      minimum: 1
      name: per_page
      required: false
      type: integer

