definitions:
  ColorDto:
    additionalProperties: false
    description: Set color
    properties:
      B:
        description: Get or sets B value of RGB color
        format: int32
        maximum: 255
        minimum: 0
        readOnly: true
        type: integer
      G:
        description: Get or sets G value of RGB color
        format: int32
        maximum: 255
        minimum: 0
        readOnly: true
        type: integer
      R:
        description: Get or sets R value of RGB color
        format: int32
        maximum: 255
        minimum: 0
        readOnly: true
        type: integer
    type: object
  ErrorResponseDto:
    additionalProperties: false
    properties:
      Description:
        type: string
        x-nullable: true
      ErrorMessage:
        description: If any error occurs the message will be displayed in here
        type: string
        x-nullable: true
      StatusCode:
        format: int32
        type: integer
    type: object
  FoRequestDto:
    additionalProperties: false
    description: >-
      The basic request with the XSL-FO document as a Base64 encoded string with
      a set of resources provided with a name and the data of the resource as a
      Base64 encoded string.
    properties:
      FoDocumentBase64String:
        description: This is the complete XSL-FO document provided using Base64 encoding.
        type: string
        x-nullable: true
      Metadata:
        $ref: '#/definitions/PdfMetadataDto'
      Resources:
        additionalProperties:
          type: string
        description: >-
          This is a set of key-value pairs of digital resources like images that
          is referenced in the XSL-FO document. It uses the filename as key and
          the data is provided as a Base64 encoded string.
        type: object
        x-nullable: true
    type: object
  FoTransformRequestDto:
    additionalProperties: false
    description: >-
      The XSL-FO transform document and xml data document as a Base64 encoded
      string with a set of resources provided with a name and the data of the
      resource as a Base64 encoded string.
    properties:
      FoDocumentBase64String:
        description: This is the complete XSL-FO document provided using Base64 encoding.
        type: string
        x-nullable: true
      Metadata:
        $ref: '#/definitions/PdfMetadataDto'
      Resources:
        additionalProperties:
          type: string
        description: >-
          This is a set of key-value pairs of digital resources like images that
          is referenced in the XSL-FO document. It uses the filename as key and
          the data is provided as a Base64 encoded string.
        type: object
        x-nullable: true
      XmlDataDocumentBase64String:
        description: >-
          This is xml data document on which the XSL-FO transform document is
          applied. Provided using Base64 encoding.
        type: string
        x-nullable: true
    type: object
  FontDto:
    additionalProperties: false
    description: The Font dto object
    properties:
      Name:
        description: Gets the name of the font
        readOnly: true
        type: string
        x-nullable: true
      Size:
        description: Gets the size of the font
        format: float
        readOnly: true
        type: number
      Style:
        $ref: '#/definitions/FontStyle'
    type: object
  FontStyle:
    description: 'Font style enum representing Regular, Bold, Italic, BoldItalic'
    enum:
      - 0
      - 1
      - 2
      - 3
    format: int32
    type: integer
  ImageResponseDto:
    additionalProperties: false
    description: >-
      When setting the Accept-header in the request to "application/json" the
      image file will be return as Base64 encoded string. Note that converting
      data to Base64 encoded strings increases the response size with
      approximately 33%, if you can accept the a binary format it's better to
      use Accept-header "image/jpeg", "image/png" or "image/gif".
    properties:
      ErrorMessage:
        description: If any error occurs the message will be displayed in here
        type: string
        x-nullable: true
      ImageBase64String:
        description: >-
          The Base64 encoded string that is the image file. This is a complete
          data uri, including media type that can be used directly as src on a
          img-tag e.g.
        type: string
        x-nullable: true
    type: object
  PdfConcatenationRequestDto:
    additionalProperties: false
    description: Request to concatenate a list of Pdf documents to a single Pdf document.
    properties:
      PdfDocumentsAsBase64String:
        description: The list of Pdf documents encoded as Base64 strings.
        items:
          type: string
        type: array
        x-nullable: true
    type: object
  PdfMetadataDto:
    additionalProperties: false
    description: Enter meta data for pdf document
    properties:
      Author:
        description: Pdf document author
        type: string
        x-nullable: true
      EnableAdd:
        description: "Enables or disables adding or modifying text annotations and interactive\r\nform fields."
        type: boolean
      EnableCopy:
        description: Enables or disables copying of text and graphics.
        type: boolean
      EnableModify:
        description: "Enables or disables modifying document contents (other than text annotations and \r\ninteractive form fields)."
        type: boolean
      EnablePrinting:
        description: Enables or disables printing.
        type: boolean
      Keywords:
        description: Pdf document keywords
        items:
          type: string
        type: array
        x-nullable: true
      OwnerPassword:
        description: >-
          Specifies the owner password that will protect full access to any
          generated PDF documents.
        type: string
        x-nullable: true
      Subject:
        description: Pdf document subject
        type: string
        x-nullable: true
      Title:
        description: Pdf document title
        type: string
        x-nullable: true
      UserPassword:
        description: >-
          Specifies the user password that will protect access to any generated
          PDF documents.
        type: string
        x-nullable: true
    type: object
  PdfResponseDto:
    additionalProperties: false
    description: >-
      When setting the Accept-header in the request to "application/json" the
      content of the pdf file will be return as Base64 encoded string. Note that
      converting data to Base64 encoded strings increases the response size with
      approximately 33%, if you can accept the a binary format it's better to
      use Accept-header "application/pdf".
    properties:
      ErrorMessage:
        description: If any error occurs the message will be displayed in here
        type: string
        x-nullable: true
      PdfFileBase64String:
        description: The Base64 encoded string that is the pdf file.
        type: string
        x-nullable: true
    type: object
  PdfToImageOptions:
    additionalProperties: false
    properties:
      Height:
        description: >-
          Set the height of the output image, default value is width of source
          document. To scale height, and keeping proportions, do not set width;
        format: int32
        type: integer
      HorizontalResolution:
        description: 'Set the horizontal resolution, default is 96 dpi;'
        format: double
        type: number
      ImageFormat:
        description: >-
          Valid options are "image/jpeg", "image/png" or "image/gif". Default is
          "image/png"
        type: string
        x-nullable: true
      JpegQuality:
        description: 'Sets the quality of jpeg images, range 0 to 100, default is 75'
        format: int32
        type: integer
      PageNumber:
        description: >-
          Which page of the pdf file to generate image from, default is first
          page
        format: int32
        type: integer
      PngCompressionLevel:
        description: 'Sets the png compression level, range 1 - 9, default is 6'
        format: int32
        type: integer
      Transparent:
        description: >-
          Keep the background of the image transparent. This setting is not
          available in JPEG-files, since transparency is not supported in the
          JPEG format.
        type: boolean
      VerticalResolution:
        description: 'Set the vertical resolution, default is 96 dpi;'
        format: double
        type: number
      Width:
        description: >-
          Set the width of the output image, default value is width of source
          document. To scale width, and keeping proportions, do not set height;
        format: int32
        type: integer
    type: object
  PdfToImageRequestDto:
    additionalProperties: false
    properties:
      Options:
        $ref: '#/definitions/PdfToImageOptions'
      PdfFileBase64String:
        description: 'The pdf file to generate image from, as Base64 encoded string.'
        type: string
        x-nullable: true
    type: object
  PdfWriteStringOptions:
    additionalProperties: false
    description: Options for writing string in pdf page;
    properties:
      Font:
        $ref: '#/definitions/FontDto'
      PageNumber:
        description: 'Get or set which page in the pdf to write on, default is first page.'
        format: int32
        type: integer
      Text:
        description: The text to write in the pdf
        type: string
        x-nullable: true
      TextColor:
        $ref: '#/definitions/ColorDto'
      XOrigin:
        $ref: '#/definitions/XOriginPoint'
      XPosition:
        description: >-
          Get or set the X axis position on where to write string, in reference
          to XOrigin.
        format: float
        type: number
      YOrigin:
        $ref: '#/definitions/YOriginPoint'
      YPosition:
        description: >-
          Get or set the Y axis position on where to write string, in reference
          to YOrigin.
        format: float
        type: number
    type: object
  PdfWriteStringRequestDto:
    additionalProperties: false
    description: The request dto object to write a string on pdf page
    properties:
      FontFileBase64String:
        description: >-
          System fonts are available, but you can provide your own font file to
          be embedded in the pdf document. Send font as Base64 encoded string.
        type: string
        x-nullable: true
      Options:
        $ref: '#/definitions/PdfWriteStringOptions'
      PdfFileBase64String:
        description: 'The pdf file to add text to, as Base64 encoded string.'
        type: string
        x-nullable: true
    type: object
  WkHtmlToPdfRequestDto:
    additionalProperties: false
    description: >-
      WkHtmlToPdfRequestDto is the data transfer object for generating a pdf
      using wkhtmltopdf;
    properties:
      HtmlBase64String:
        description: >-
          Base64 encoded string with html. If property Url is set, it will be
          used, not HtmlBase64String.
        type: string
        x-nullable: true
      Resources:
        additionalProperties:
          type: string
        description: >-
          This is a set of key-value pairs of digital resources like images that
          is referenced in the HtmlBase64String document. It uses the filename
          including relative path as key and the data is provided as a Base64
          encoded string.
        type: object
        x-nullable: true
      Url:
        description: >-
          The url to generate pdf from. Url has precedence over HtmlBase64String
          value if both are set.
        type: string
        x-nullable: true
      WkHtmlToPdfArguments:
        additionalProperties:
          type: string
        description: Command line arguments passed to wkhtmltopdf.
        type: object
        x-nullable: true
    type: object
  XOriginPoint:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
  YOriginPoint:
    enum:
      - 0
      - 1
      - 2
    format: int32
    type: integer
info:
  contact:
    email: support@pdfbroker.io
    name: PdfBroker.io Support
    url: 'https://www.pdfbroker.io/docs'
  description: >-
    PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other
    useful pdf utilities.
  termsOfService: 'https://www.pdfbroker.io/terms'
  title: PdfBroker.io API
  version: v1
  x-apisguru-categories:
    - text
  x-origin:
    - format: openapi
      url: 'https://api.pdfbroker.io/swagger/v1/swagger.json'
      version: '3.0'
  x-providerName: pdfbroker.io
paths:
  /api/pdf:
    get:
      parameters: []
      produces:
        - application/json
      responses:
        '400':
          description: If any error occurs parsing input
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: >-
            If content-type of request is not set to multipart/form-data or
            application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: Basic method to verify api is up and running
      tags:
        - Pdf
  /api/pdf/pdfconcat:
    post:
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - description: >-
            PdfConcat Request. Add two or more pdf files and concatenate pages
            into single pdf document.
          in: body
          name: body
          schema:
            $ref: '#/definitions/PdfConcatenationRequestDto'
      produces:
        - application/json
        - application/pdf
      responses:
        '200':
          description: >-
            Returns the newly created pdf file. Either the file directly or
            serialized as Json if Accept-header is set to application/json
          examples:
            application/json: "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
          schema:
            $ref: '#/definitions/PdfResponseDto'
        '400':
          description: If any error occurs parsing input
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: >-
            If content-type of request is not set to multipart/form-data or
            application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: Concatenate multiple pdf files into single pdf file..
      tags:
        - Pdf
  /api/pdf/pdftoimage:
    post:
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - description: >-
            PdfToImage Request. Create an image of a page in an existing pdf
            document.
          in: body
          name: body
          schema:
            $ref: '#/definitions/PdfToImageRequestDto'
      produces:
        - application/json
        - image/gif
        - image/jpeg
        - image/png
      responses:
        '200':
          description: >-
            Generate an image of the provided pdf file. Either the image file
            directly or serialized as Json if Accept-header is set to
            application/json
          examples:
            application/json: "{\r\n  \"imageBase64String\": \"Image file base64 encoded. This is a complete data uri, including media type that can be used directly as src on a img-tag e.g.\",\r\n  \"errorMessage\": \"If any error occurred, information will be provided here\"\r\n}"
          schema:
            $ref: '#/definitions/ImageResponseDto'
        '400':
          description: If any error occurs parsing input
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: >-
            If content-type of request is not set to multipart/form-data or
            application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: Generate an image of to provided pdf file
      tags:
        - Pdf
  /api/pdf/pdfwritestring:
    post:
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - description: PdfWriteString Request. Write string on page in pdf document
          in: body
          name: body
          schema:
            $ref: '#/definitions/PdfWriteStringRequestDto'
      produces:
        - application/json
        - application/pdf
      responses:
        '200':
          description: >-
            Returns the newly created pdf file. Either the file directly or
            serialized as Json if Accept-header is set to application/json
          examples:
            application/json: "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
          schema:
            $ref: '#/definitions/PdfResponseDto'
        '400':
          description: If any error occurs parsing input
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: >-
            If content-type of request is not set to multipart/form-data or
            application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: Write text on a page in a pdf document.
      tags:
        - Pdf
  /api/pdf/wkhtmltopdf:
    post:
      consumes:
        - application/json
      parameters:
        - description: >-
            WkHtmlToPdf Request. Generate pdf from html, either from url or
            base64 encoded html string
          in: body
          name: body
          schema:
            $ref: '#/definitions/WkHtmlToPdfRequestDto'
      produces:
        - application/json
        - application/pdf
      responses:
        '200':
          description: >-
            Returns the newly created pdf file. Either the file directly or
            serialized as Json if Accept-header is set to application/json
          examples:
            application/json: "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
          schema:
            $ref: '#/definitions/PdfResponseDto'
        '400':
          description: If any error occurs executing request
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: If content-type of request is not set to application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: Generate pdf file from url using the excellent tool wkhtmltopdf.
      tags:
        - Pdf
  /api/pdf/xslfo:
    post:
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - description: >-
            XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document
            and digital resources, either as 'multipart/form-data' or
            'application/json'
          in: body
          name: body
          schema:
            $ref: '#/definitions/FoRequestDto'
      produces:
        - application/json
        - application/pdf
      responses:
        '200':
          description: >-
            Returns the newly created pdf file. Either the file directly or
            serialized as Json if Accept-header is set to application/json
          examples:
            application/json: "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
          schema:
            $ref: '#/definitions/PdfResponseDto'
        '400':
          description: If any error occurs parsing input
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: >-
            If content-type of request is not set to multipart/form-data or
            application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: Create pdf-file from complete XSL-FO document.
      tags:
        - Pdf
  /api/pdf/xslfowithtransform:
    post:
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - description: >-
            XSL-FO Transform Request. The XSL-FO is transformed on the supplied
            xml data document. Post your XSL-FO transform document and xml data
            document aloing with your digital resources, either as
            'multipart/form-data' or 'application/json'
          in: body
          name: body
          schema:
            $ref: '#/definitions/FoTransformRequestDto'
      produces:
        - application/json
        - application/pdf
      responses:
        '200':
          description: >-
            Returns the newly created pdf file. Either the file directly or
            serialized as Json if Accept-header is set to application/json
          examples:
            application/json: "{\r\n  \"pdfFileBase64String\": \"Base64 encoded pdf file content\",\r\n  \"errorMessage\": \"If any error occured, info will be provided here\"\r\n}"
          schema:
            $ref: '#/definitions/PdfResponseDto'
        '400':
          description: If any error occurs parsing input
          examples:
            application/json: "{\r\n  \"description\": \"Always empty in the public response, used for internal error transport to logs\",\r\n  \"statusCode\": 400,\r\n  \"errorMessage\": \"The error message provided to client\"\r\n}"
          schema:
            $ref: '#/definitions/ErrorResponseDto'
        '415':
          description: >-
            If content-type of request is not set to multipart/form-data or
            application/json
        '429':
          description: If you reach the monthly request limit for your subscription plan
      summary: >-
        Create pdf-file from transforming xml document with Xsl-Fo transform
        document.
      tags:
        - Pdf
security:
  - OAuth2:
      - pdfbroker
securityDefinitions:
  OAuth2:
    flow: application
    scopes:
      pdfbroker: Scope to access the PdfBroker API.
    tokenUrl: 'https://login.pdfbroker.io/connect/token'
    type: oauth2
swagger: '2.0'
x-components: {}

