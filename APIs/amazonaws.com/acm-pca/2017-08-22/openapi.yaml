basePath: /
definitions:
  ASN1PrintableString64:
    maxLength: 64
    minLength: 0
    pattern: '[a-zA-Z0-9''()+-.?:/= ]*'
    type: string
  ASN1Subject:
    description: >-
      Contains information about the certificate subject. The
      <code>Subject</code> field in the certificate identifies the entity that
      owns or controls the public key in the certificate. The entity can be a
      user, computer, device, or service. The <code>Subject </code>must contain
      an X.500 distinguished name (DN). A DN is a sequence of relative
      distinguished names (RDNs). The RDNs are separated by commas in the
      certificate.
    properties:
      CommonName:
        allOf:
          - $ref: '#/definitions/String64'
          - description: >-
              <p>For CA and end-entity certificates in a private PKI, the common
              name (CN) can be any string within the length limit. </p> <p>Note:
              In publicly trusted certificates, the common name must be a fully
              qualified domain name (FQDN) associated with the certificate
              subject.</p>
      Country:
        allOf:
          - $ref: '#/definitions/CountryCodeString'
          - description: >-
              Two-digit code that specifies the country in which the certificate
              subject located.
      DistinguishedNameQualifier:
        allOf:
          - $ref: '#/definitions/ASN1PrintableString64'
          - description: Disambiguating information for the certificate subject.
      GenerationQualifier:
        allOf:
          - $ref: '#/definitions/String3'
          - description: >-
              Typically a qualifier appended to the name of an individual.
              Examples include Jr. for junior, Sr. for senior, and III for
              third.
      GivenName:
        allOf:
          - $ref: '#/definitions/String16'
          - description: First name.
      Initials:
        allOf:
          - $ref: '#/definitions/String5'
          - description: >-
              Concatenation that typically contains the first letter of the
              <b>GivenName</b>, the first letter of the middle name if one
              exists, and the first letter of the <b>Surname</b>.
      Locality:
        allOf:
          - $ref: '#/definitions/String128'
          - description: >-
              The locality (such as a city or town) in which the certificate
              subject is located.
      Organization:
        allOf:
          - $ref: '#/definitions/String64'
          - description: >-
              Legal name of the organization with which the certificate subject
              is affiliated. 
      OrganizationalUnit:
        allOf:
          - $ref: '#/definitions/String64'
          - description: >-
              A subdivision or unit of the organization (such as sales or
              finance) with which the certificate subject is affiliated.
      Pseudonym:
        allOf:
          - $ref: '#/definitions/String128'
          - description: >-
              Typically a shortened version of a longer <b>GivenName</b>. For
              example, Jonathan is often shortened to John. Elizabeth is often
              shortened to Beth, Liz, or Eliza.
      SerialNumber:
        allOf:
          - $ref: '#/definitions/ASN1PrintableString64'
          - description: The certificate serial number.
      State:
        allOf:
          - $ref: '#/definitions/String128'
          - description: State in which the subject of the certificate is located.
      Surname:
        allOf:
          - $ref: '#/definitions/String40'
          - description: >-
              Family name. In the US and the UK, for example, the surname of an
              individual is ordered last. In Asian cultures the surname is
              typically ordered first.
      Title:
        allOf:
          - $ref: '#/definitions/String64'
          - description: >-
              A title such as Mr. or Ms., which is pre-pended to the name to
              refer formally to the certificate subject.
    type: object
  AWSPolicy:
    maxLength: 20480
    minLength: 1
    pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
    type: string
  AccessDescription:
    description: >-
      Provides access information used by the <code>authorityInfoAccess</code>
      and <code>subjectInfoAccess</code> extensions described in <a
      href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>.
    properties:
      AccessLocation:
        allOf:
          - $ref: '#/definitions/GeneralName'
          - description: The location of <code>AccessDescription</code> information.
      AccessMethod:
        allOf:
          - $ref: '#/definitions/AccessMethod'
          - description: The type and format of <code>AccessDescription</code> information.
    required:
      - AccessMethod
      - AccessLocation
    type: object
  AccessDescriptionList:
    items:
      $ref: '#/definitions/AccessDescription'
    type: array
  AccessMethod:
    description: >-
      Describes the type and format of extension access. Only one of
      <code>CustomObjectIdentifier</code> or <code>AccessMethodType</code> may
      be provided. Providing both results in <code>InvalidArgsException</code>.
    properties:
      AccessMethodType:
        allOf:
          - $ref: '#/definitions/AccessMethodType'
          - description: Specifies the <code>AccessMethod</code>.
      CustomObjectIdentifier:
        allOf:
          - $ref: '#/definitions/CustomObjectIdentifier'
          - description: >-
              An object identifier (OID) specifying the
              <code>AccessMethod</code>. The OID must satisfy the regular
              expression shown below. For more information, see NIST's
              definition of <a
              href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object
              Identifier (OID)</a>.
    type: object
  AccessMethodType:
    enum:
      - CA_REPOSITORY
      - RESOURCE_PKI_MANIFEST
      - RESOURCE_PKI_NOTIFY
    type: string
  AccountId:
    maxLength: 12
    minLength: 12
    pattern: '[0-9]+'
    type: string
  ActionList:
    items:
      $ref: '#/definitions/ActionType'
    maxItems: 3
    minItems: 1
    type: array
  ActionType:
    enum:
      - IssueCertificate
      - GetCertificate
      - ListPermissions
    type: string
  ApiPassthrough:
    description: >-
      <p>Contains X.509 certificate information to be placed in an issued
      certificate. An <code>APIPassthrough</code> or
      <code>APICSRPassthrough</code> template variant must be selected, or else
      this parameter is ignored. </p> <p>If conflicting or duplicate certificate
      information is supplied from other sources, ACM Private CA applies <a
      href="https://docs.aws.amazon.com/acm-pca/latest/userguide/UsingTemplates.html#template-order-of-operations">order
      of operation rules</a> to determine what information is used.</p>
    properties:
      Extensions:
        allOf:
          - $ref: '#/definitions/Extensions'
          - description: Specifies X.509 extension information for a certificate.
      Subject:
        $ref: '#/definitions/ASN1Subject'
    type: object
  Arn:
    maxLength: 200
    minLength: 5
    pattern: >-
      arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]*:[\w+=,.@-]+(/[\w+=,.@-]+)*
    type: string
  AuditReportId:
    maxLength: 36
    minLength: 36
    pattern: '[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}'
    type: string
  AuditReportResponseFormat:
    enum:
      - JSON
      - CSV
    type: string
  AuditReportStatus:
    enum:
      - CREATING
      - SUCCESS
      - FAILED
    type: string
  Boolean:
    type: boolean
  CertificateAuthorities:
    items:
      $ref: '#/definitions/CertificateAuthority'
    type: array
  CertificateAuthority:
    description: >-
      Contains information about your private certificate authority (CA). Your
      private CA can issue and revoke X.509 digital certificates. Digital
      certificates verify that the entity named in the certificate
      <b>Subject</b> field owns or controls the public key contained in the
      <b>Subject Public Key Info</b> field. Call the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
      action to create your private CA. You must then call the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetCertificateAuthorityCertificate.html">GetCertificateAuthorityCertificate</a>
      action to retrieve a private CA certificate signing request (CSR). Sign
      the CSR with your ACM Private CA-hosted or on-premises root or subordinate
      CA certificate. Call the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html">ImportCertificateAuthorityCertificate</a>
      action to import the signed certificate into AWS Certificate Manager
      (ACM). 
    properties:
      Arn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              Amazon Resource Name (ARN) for your private certificate authority
              (CA). The format is <code>
              <i>12345678-1234-1234-1234-123456789012</i> </code>.
      CertificateAuthorityConfiguration:
        allOf:
          - $ref: '#/definitions/CertificateAuthorityConfiguration'
          - description: Your private CA configuration.
      CreatedAt:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: Date and time at which your private CA was created.
      FailureReason:
        allOf:
          - $ref: '#/definitions/FailureReason'
          - description: Reason the request to create your private CA failed.
      KeyStorageSecurityStandard:
        allOf:
          - $ref: '#/definitions/KeyStorageSecurityStandard'
          - description: >-
              <p>Defines a cryptographic key management compliance standard used
              for handling CA keys. </p> <p>Default:
              FIPS_140_2_LEVEL_3_OR_HIGHER</p> <p>Note: AWS Region
              ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You
              must explicitly specify this parameter and value when creating a
              CA in that Region. Specifying a different value (or no value)
              results in an <code>InvalidArgsException</code> with the message
              "A certificate authority cannot be created in this region with the
              specified security standard."</p>
      LastStateChangeAt:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: Date and time at which your private CA was last updated.
      NotAfter:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: >-
              Date and time after which your private CA certificate is not
              valid.
      NotBefore:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: >-
              Date and time before which your private CA certificate is not
              valid.
      OwnerAccount:
        allOf:
          - $ref: '#/definitions/AccountId'
          - description: The AWS account ID that owns the certificate authority.
      RestorableUntil:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: >-
              The period during which a deleted CA can be restored. For more
              information, see the <code>PermanentDeletionTimeInDays</code>
              parameter of the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeleteCertificateAuthorityRequest.html">DeleteCertificateAuthorityRequest</a>
              action. 
      RevocationConfiguration:
        allOf:
          - $ref: '#/definitions/RevocationConfiguration'
          - description: >-
              Information about the Online Certificate Status Protocol (OCSP)
              configuration or certificate revocation list (CRL) created and
              maintained by your private CA. 
      Serial:
        allOf:
          - $ref: '#/definitions/String'
          - description: Serial number of your private CA.
      Status:
        allOf:
          - $ref: '#/definitions/CertificateAuthorityStatus'
          - description: Status of your private CA.
      Type:
        allOf:
          - $ref: '#/definitions/CertificateAuthorityType'
          - description: Type of your private CA.
    type: object
  CertificateAuthorityConfiguration:
    description: >-
      Contains configuration information for your private certificate authority
      (CA). This includes information about the class of public key algorithm
      and the key pair that your private CA creates when it issues a
      certificate. It also includes the signature algorithm that it uses when
      issuing certificates, and its X.500 distinguished name. You must specify
      this information when you call the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
      action. 
    properties:
      CsrExtensions:
        allOf:
          - $ref: '#/definitions/CsrExtensions'
          - description: >-
              Specifies information to be added to the extension section of the
              certificate signing request (CSR).
      KeyAlgorithm:
        allOf:
          - $ref: '#/definitions/KeyAlgorithm'
          - description: >-
              Type of the public key algorithm and size, in bits, of the key
              pair that your CA creates when it issues a certificate. When you
              create a subordinate CA, you must use a key algorithm supported by
              the parent CA.
      SigningAlgorithm:
        allOf:
          - $ref: '#/definitions/SigningAlgorithm'
          - description: >-
              <p>Name of the algorithm your private CA uses to sign certificate
              requests.</p> <p>This parameter should not be confused with the
              <code>SigningAlgorithm</code> parameter used to sign certificates
              when they are issued.</p>
      Subject:
        allOf:
          - $ref: '#/definitions/ASN1Subject'
          - description: >-
              Structure that contains X.500 distinguished name information for
              your private CA.
    required:
      - KeyAlgorithm
      - SigningAlgorithm
      - Subject
    type: object
  CertificateAuthorityStatus:
    enum:
      - CREATING
      - PENDING_CERTIFICATE
      - ACTIVE
      - DELETED
      - DISABLED
      - EXPIRED
      - FAILED
    type: string
  CertificateAuthorityType:
    enum:
      - ROOT
      - SUBORDINATE
    type: string
  CertificateBody:
    type: string
  CertificateBodyBlob:
    maxLength: 32768
    minLength: 1
    type: string
  CertificateChain:
    type: string
  CertificateChainBlob:
    maxLength: 2097152
    minLength: 0
    type: string
  CertificateMismatchException: {}
  CertificatePolicyList:
    items:
      $ref: '#/definitions/PolicyInformation'
    maxItems: 20
    minItems: 1
    type: array
  ConcurrentModificationException: {}
  CountryCodeString:
    maxLength: 2
    minLength: 2
    pattern: '[A-Za-z]{2}'
    type: string
  CreateCertificateAuthorityAuditReportRequest:
    properties:
      AuditReportResponseFormat:
        allOf:
          - $ref: '#/definitions/AuditReportResponseFormat'
          - description: >-
              The format in which to create the report. This can be either
              <b>JSON</b> or <b>CSV</b>.
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) of the CA to be audited. This is
              of the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>.</p>
      S3BucketName:
        allOf:
          - $ref: '#/definitions/S3BucketName'
          - description: The name of the S3 bucket that will contain the audit report.
    required:
      - CertificateAuthorityArn
      - S3BucketName
      - AuditReportResponseFormat
    title: CreateCertificateAuthorityAuditReportRequest
    type: object
  CreateCertificateAuthorityAuditReportResponse:
    properties:
      AuditReportId:
        allOf:
          - $ref: '#/definitions/AuditReportId'
          - description: An alphanumeric string that contains a report identifier.
      S3Key:
        allOf:
          - $ref: '#/definitions/S3Key'
          - description: >-
              The <b>key</b> that uniquely identifies the report file in your S3
              bucket.
    type: object
  CreateCertificateAuthorityRequest:
    properties:
      CertificateAuthorityConfiguration:
        allOf:
          - $ref: '#/definitions/CertificateAuthorityConfiguration'
          - description: >-
              Name and bit size of the private key algorithm, the name of the
              signing algorithm, and X.500 certificate subject information.
      CertificateAuthorityType:
        allOf:
          - $ref: '#/definitions/CertificateAuthorityType'
          - description: The type of the certificate authority.
      IdempotencyToken:
        allOf:
          - $ref: '#/definitions/IdempotencyToken'
          - description: >-
              Custom string that can be used to distinguish between calls to the
              <b>CreateCertificateAuthority</b> action. Idempotency tokens for
              <b>CreateCertificateAuthority</b> time out after five minutes.
              Therefore, if you call <b>CreateCertificateAuthority</b> multiple
              times with the same idempotency token within five minutes, ACM
              Private CA recognizes that you are requesting only certificate
              authority and will issue only one. If you change the idempotency
              token for each call, PCA recognizes that you are requesting
              multiple certificate authorities.
      KeyStorageSecurityStandard:
        allOf:
          - $ref: '#/definitions/KeyStorageSecurityStandard'
          - description: >-
              <p>Specifies a cryptographic key management compliance standard
              used for handling CA keys.</p> <p>Default:
              FIPS_140_2_LEVEL_3_OR_HIGHER</p> <p>Note:
              <code>FIPS_140_2_LEVEL_3_OR_HIGHER</code> is not supported in
              Region ap-northeast-3. When creating a CA in the ap-northeast-3,
              you must provide <code>FIPS_140_2_LEVEL_2_OR_HIGHER</code> as the
              argument for <code>KeyStorageSecurityStandard</code>. Failure to
              do this results in an <code>InvalidArgsException</code> with the
              message, "A certificate authority cannot be created in this region
              with the specified security standard."</p>
      RevocationConfiguration:
        allOf:
          - $ref: '#/definitions/RevocationConfiguration'
          - description: >-
              Contains information to enable Online Certificate Status Protocol
              (OCSP) support, to enable a certificate revocation list (CRL), to
              enable both, or to enable neither. The default is for both
              certificate validation mechanisms to be disabled. For more
              information, see the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_OcspConfiguration.html">OcspConfiguration</a>
              and <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a>
              types.
      Tags:
        allOf:
          - $ref: '#/definitions/TagList'
          - description: >-
              Key-value pairs that will be attached to the new private CA. You
              can associate up to 50 tags with a private CA. For information
              using tags with IAM to manage permissions, see <a
              href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling
              Access Using IAM Tags</a>.
    required:
      - CertificateAuthorityConfiguration
      - CertificateAuthorityType
    title: CreateCertificateAuthorityRequest
    type: object
  CreateCertificateAuthorityResponse:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>If successful, the Amazon Resource Name (ARN) of the
              certificate authority (CA). This is of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
    type: object
  CreatePermissionRequest:
    properties:
      Actions:
        allOf:
          - $ref: '#/definitions/ActionList'
          - description: >-
              The actions that the specified AWS service principal can use.
              These include <code>IssueCertificate</code>,
              <code>GetCertificate</code>, and <code>ListPermissions</code>.
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) of the CA that grants the
              permissions. You can find the ARN by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
              action. This must have the following form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
      Principal:
        allOf:
          - $ref: '#/definitions/Principal'
          - description: >-
              The AWS service or identity that receives the permission. At this
              time, the only valid principal is <code>acm.amazonaws.com</code>.
      SourceAccount:
        allOf:
          - $ref: '#/definitions/AccountId'
          - description: The ID of the calling account.
    required:
      - CertificateAuthorityArn
      - Principal
      - Actions
    title: CreatePermissionRequest
    type: object
  CrlConfiguration:
    description: >-
      <p>Contains configuration information for a certificate revocation list
      (CRL). Your private certificate authority (CA) creates base CRLs. Delta
      CRLs are not supported. You can enable CRLs for your new or an existing
      private CA by setting the <b>Enabled</b> parameter to <code>true</code>.
      Your private CA writes CRLs to an S3 bucket that you specify in the
      <b>S3BucketName</b> parameter. You can hide the name of your bucket by
      specifying a value for the <b>CustomCname</b> parameter. Your private CA
      copies the CNAME or the S3 bucket name to the <b>CRL Distribution
      Points</b> extension of each certificate it issues. Your S3 bucket policy
      must give write permission to ACM Private CA. </p> <p>ACM Private CA
      assets that are stored in Amazon S3 can be protected with encryption. For
      more information, see <a
      href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaCreateCa.html#crl-encryption">Encrypting
      Your CRLs</a>.</p> <p>Your private CA uses the value in the
      <b>ExpirationInDays</b> parameter to calculate the <b>nextUpdate</b> field
      in the CRL. The CRL is refreshed at 1/2 the age of next update or when a
      certificate is revoked. When a certificate is revoked, it is recorded in
      the next CRL that is generated and in the next audit report. Only time
      valid certificates are listed in the CRL. Expired certificates are not
      included.</p> <p>A CRL is typically updated approximately 30 minutes after
      a certificate is revoked. If for any reason a CRL update fails, ACM
      Private CA makes further attempts every 15 minutes.</p> <p>CRLs contain
      the following fields:</p> <ul> <li> <p> <b>Version</b>: The current
      version number defined in RFC 5280 is V2. The integer value is 0x1. </p>
      </li> <li> <p> <b>Signature Algorithm</b>: The name of the algorithm used
      to sign the CRL.</p> </li> <li> <p> <b>Issuer</b>: The X.500 distinguished
      name of your private CA that issued the CRL.</p> </li> <li> <p> <b>Last
      Update</b>: The issue date and time of this CRL.</p> </li> <li> <p>
      <b>Next Update</b>: The day and time by which the next CRL will be
      issued.</p> </li> <li> <p> <b>Revoked Certificates</b>: List of revoked
      certificates. Each list item contains the following information.</p> <ul>
      <li> <p> <b>Serial Number</b>: The serial number, in hexadecimal format,
      of the revoked certificate.</p> </li> <li> <p> <b>Revocation Date</b>:
      Date and time the certificate was revoked.</p> </li> <li> <p> <b>CRL Entry
      Extensions</b>: Optional extensions for the CRL entry.</p> <ul> <li> <p>
      <b>X509v3 CRL Reason Code</b>: Reason the certificate was revoked.</p>
      </li> </ul> </li> </ul> </li> <li> <p> <b>CRL Extensions</b>: Optional
      extensions for the CRL.</p> <ul> <li> <p> <b>X509v3 Authority Key
      Identifier</b>: Identifies the public key associated with the private key
      used to sign the certificate.</p> </li> <li> <p> <b>X509v3 CRL
      Number:</b>: Decimal sequence number for the CRL.</p> </li> </ul> </li>
      <li> <p> <b>Signature Algorithm</b>: Algorithm used by your private CA to
      sign the CRL.</p> </li> <li> <p> <b>Signature Value</b>: Signature
      computed over the CRL.</p> </li> </ul> <p>Certificate revocation lists
      created by ACM Private CA are DER-encoded. You can use the following
      OpenSSL command to list a CRL.</p> <p> <code>openssl crl -inform DER -text
      -in <i>crl_path</i> -noout</code> </p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/acm-pca/latest/userguide/crl-planning.html">Planning
      a certificate revocation list (CRL)</a> in the <i>AWS Certificate Manager
      Private Certificate Authority (PCA) User Guide</i> </p>
    properties:
      CustomCname:
        allOf:
          - $ref: '#/definitions/String253'
          - description: >-
              Name inserted into the certificate <b>CRL Distribution Points</b>
              extension that enables the use of an alias for the CRL
              distribution point. Use this value if you don't want the name of
              your S3 bucket to be public.
      Enabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Boolean value that specifies whether certificate revocation lists
              (CRLs) are enabled. You can use this value to enable certificate
              revocation for a new CA when you call the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
              action or for an existing CA when you call the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UpdateCertificateAuthority.html">UpdateCertificateAuthority</a>
              action. 
      ExpirationInDays:
        allOf:
          - $ref: '#/definitions/Integer1To5000'
          - description: Validity period of the CRL in days.
      S3BucketName:
        allOf:
          - $ref: '#/definitions/String3To255'
          - description: >-
              Name of the S3 bucket that contains the CRL. If you do not provide
              a value for the <b>CustomCname</b> argument, the name of your S3
              bucket is placed into the <b>CRL Distribution Points</b> extension
              of the issued certificate. You can change the name of your bucket
              by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UpdateCertificateAuthority.html">UpdateCertificateAuthority</a>
              operation. You must specify a <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaCreateCa.html#s3-policies">bucket
              policy</a> that allows ACM Private CA to write the CRL to your
              bucket.
      S3ObjectAcl:
        allOf:
          - $ref: '#/definitions/S3ObjectAcl'
          - description: >-
              <p>Determines whether the CRL will be publicly readable or
              privately held in the CRL Amazon S3 bucket. If you choose
              PUBLIC_READ, the CRL will be accessible over the public internet.
              If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL
              S3 bucket can access the CRL, and your PKI clients may need an
              alternative method of access. </p> <p>If no value is specified,
              the default is <code>PUBLIC_READ</code>.</p> <p> <i>Note:</i> This
              default can cause CA creation to fail in some circumstances. If
              you have have enabled the Block Public Access (BPA) feature in
              your S3 account, then you must specify the value of this parameter
              as <code>BUCKET_OWNER_FULL_CONTROL</code>, and not doing so
              results in an error. If you have disabled BPA in S3, then you can
              specify either <code>BUCKET_OWNER_FULL_CONTROL</code> or
              <code>PUBLIC_READ</code> as the value.</p> <p>For more
              information, see <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaCreateCa.html#s3-bpa">Blocking
              public access to the S3 bucket</a>.</p>
    required:
      - Enabled
    type: object
  CsrBlob:
    maxLength: 32768
    minLength: 1
    type: string
  CsrBody:
    type: string
  CsrExtensions:
    description: >-
      Describes the certificate extensions to be added to the certificate
      signing request (CSR).
    properties:
      KeyUsage:
        allOf:
          - $ref: '#/definitions/KeyUsage'
          - description: >-
              Indicates the purpose of the certificate and of the key contained
              in the certificate.
      SubjectInformationAccess:
        allOf:
          - $ref: '#/definitions/AccessDescriptionList'
          - description: >-
              For CA certificates, provides a path to additional information
              pertaining to the CA, such as revocation and policy. For more
              information, see <a
              href="https://tools.ietf.org/html/rfc5280#section-4.2.2.2">Subject
              Information Access</a> in RFC 5280.
    type: object
  CustomObjectIdentifier:
    maxLength: 64
    minLength: 0
    pattern: '^([0-2])\.([0-9]|([0-3][0-9]))((\.([0-9]+)){0,126})$'
    type: string
  DeleteCertificateAuthorityRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must have the following form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
      PermanentDeletionTimeInDays:
        allOf:
          - $ref: '#/definitions/PermanentDeletionTimeInDays'
          - description: >-
              The number of days to make a CA restorable after it has been
              deleted. This can be anywhere from 7 to 30 days, with 30 being the
              default.
    required:
      - CertificateAuthorityArn
    title: DeleteCertificateAuthorityRequest
    type: object
  DeletePermissionRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Number (ARN) of the private CA that issued
              the permissions. You can find the CA's ARN by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
              action. This must have the following form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
      Principal:
        allOf:
          - $ref: '#/definitions/Principal'
          - description: >-
              The AWS service or identity that will have its CA permissions
              revoked. At this time, the only valid service principal is
              <code>acm.amazonaws.com</code> 
      SourceAccount:
        allOf:
          - $ref: '#/definitions/AccountId'
          - description: The AWS account that calls this action.
    required:
      - CertificateAuthorityArn
      - Principal
    title: DeletePermissionRequest
    type: object
  DeletePolicyRequest:
    properties:
      ResourceArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              The Amazon Resource Number (ARN) of the private CA that will have
              its policy deleted. You can find the CA's ARN by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
              action. The ARN value must have the form
              <code>arn:aws:acm-pca:region:account:certificate-authority/01234567-89ab-cdef-0123-0123456789ab</code>. 
    required:
      - ResourceArn
    title: DeletePolicyRequest
    type: object
  DescribeCertificateAuthorityAuditReportRequest:
    properties:
      AuditReportId:
        allOf:
          - $ref: '#/definitions/AuditReportId'
          - description: >-
              The report ID returned by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html">CreateCertificateAuthorityAuditReport</a>
              action.
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) of the private CA. This must be
              of the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
    required:
      - CertificateAuthorityArn
      - AuditReportId
    title: DescribeCertificateAuthorityAuditReportRequest
    type: object
  DescribeCertificateAuthorityAuditReportResponse:
    properties:
      AuditReportStatus:
        allOf:
          - $ref: '#/definitions/AuditReportStatus'
          - description: >-
              Specifies whether report creation is in progress, has succeeded,
              or has failed.
      CreatedAt:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: The date and time at which the report was created.
      S3BucketName:
        allOf:
          - $ref: '#/definitions/S3BucketName'
          - description: Name of the S3 bucket that contains the report.
      S3Key:
        allOf:
          - $ref: '#/definitions/S3Key'
          - description: >-
              S3 <b>key</b> that uniquely identifies the report file in your S3
              bucket.
    type: object
  DescribeCertificateAuthorityRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
    required:
      - CertificateAuthorityArn
    title: DescribeCertificateAuthorityRequest
    type: object
  DescribeCertificateAuthorityResponse:
    properties:
      CertificateAuthority:
        allOf:
          - $ref: '#/definitions/CertificateAuthority'
          - description: >-
              A <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthority.html">CertificateAuthority</a>
              structure that contains information about your private CA.
    type: object
  EdiPartyName:
    description: >-
      Describes an Electronic Data Interchange (EDI) entity as described in as
      defined in <a href="https://tools.ietf.org/html/rfc5280">Subject
      Alternative Name</a> in RFC 5280.
    properties:
      NameAssigner:
        allOf:
          - $ref: '#/definitions/String256'
          - description: Specifies the name assigner.
      PartyName:
        allOf:
          - $ref: '#/definitions/String256'
          - description: Specifies the party name.
    required:
      - PartyName
    type: object
  ExtendedKeyUsage:
    description: >-
      Specifies additional purposes for which the certified public key may be
      used other than basic purposes indicated in the <code>KeyUsage</code>
      extension.
    properties:
      ExtendedKeyUsageObjectIdentifier:
        allOf:
          - $ref: '#/definitions/CustomObjectIdentifier'
          - description: >-
              Specifies a custom <code>ExtendedKeyUsage</code> with an object
              identifier (OID).
      ExtendedKeyUsageType:
        allOf:
          - $ref: '#/definitions/ExtendedKeyUsageType'
          - description: >-
              Specifies a standard <code>ExtendedKeyUsage</code> as defined as
              in <a
              href="https://tools.ietf.org/html/rfc5280#section-4.2.1.12">RFC
              5280</a>.
    type: object
  ExtendedKeyUsageList:
    items:
      $ref: '#/definitions/ExtendedKeyUsage'
    maxItems: 20
    minItems: 1
    type: array
  ExtendedKeyUsageType:
    enum:
      - SERVER_AUTH
      - CLIENT_AUTH
      - CODE_SIGNING
      - EMAIL_PROTECTION
      - TIME_STAMPING
      - OCSP_SIGNING
      - SMART_CARD_LOGIN
      - DOCUMENT_SIGNING
      - CERTIFICATE_TRANSPARENCY
    type: string
  Extensions:
    description: Contains X.509 extension information for a certificate.
    properties:
      CertificatePolicies:
        allOf:
          - $ref: '#/definitions/CertificatePolicyList'
          - description: >-
              <p>Contains a sequence of one or more policy information terms,
              each of which consists of an object identifier (OID) and optional
              qualifiers. For more information, see NIST's definition of <a
              href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object
              Identifier (OID)</a>.</p> <p>In an end-entity certificate, these
              terms indicate the policy under which the certificate was issued
              and the purposes for which it may be used. In a CA certificate,
              these terms limit the set of policies for certification paths that
              include this certificate.</p>
      ExtendedKeyUsage:
        allOf:
          - $ref: '#/definitions/ExtendedKeyUsageList'
          - description: >-
              Specifies additional purposes for which the certified public key
              may be used other than basic purposes indicated in the
              <code>KeyUsage</code> extension.
      KeyUsage:
        $ref: '#/definitions/KeyUsage'
      SubjectAlternativeNames:
        allOf:
          - $ref: '#/definitions/GeneralNameList'
          - description: >-
              The subject alternative name extension allows identities to be
              bound to the subject of the certificate. These identities may be
              included in addition to or in place of the identity in the subject
              field of the certificate.
    type: object
  FailureReason:
    enum:
      - REQUEST_TIMED_OUT
      - UNSUPPORTED_ALGORITHM
      - OTHER
    type: string
  GeneralName:
    description: >-
      Describes an ASN.1 X.400 <code>GeneralName</code> as defined in <a
      href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. Only one of the
      following naming options should be provided. Providing more than one
      option results in an <code>InvalidArgsException</code> error.
    properties:
      DirectoryName:
        $ref: '#/definitions/ASN1Subject'
      DnsName:
        allOf:
          - $ref: '#/definitions/String253'
          - description: Represents <code>GeneralName</code> as a DNS name.
      EdiPartyName:
        allOf:
          - $ref: '#/definitions/EdiPartyName'
          - description: >-
              Represents <code>GeneralName</code> as an
              <code>EdiPartyName</code> object.
      IpAddress:
        allOf:
          - $ref: '#/definitions/String39'
          - description: Represents <code>GeneralName</code> as an IPv4 or IPv6 address.
      OtherName:
        allOf:
          - $ref: '#/definitions/OtherName'
          - description: >-
              Represents <code>GeneralName</code> using an
              <code>OtherName</code> object.
      RegisteredId:
        allOf:
          - $ref: '#/definitions/CustomObjectIdentifier'
          - description: ' Represents <code>GeneralName</code> as an object identifier (OID).'
      Rfc822Name:
        allOf:
          - $ref: '#/definitions/String256'
          - description: >-
              Represents <code>GeneralName</code> as an <a
              href="https://tools.ietf.org/html/rfc822">RFC 822</a> email
              address.
      UniformResourceIdentifier:
        allOf:
          - $ref: '#/definitions/String253'
          - description: Represents <code>GeneralName</code> as a URI.
    type: object
  GeneralNameList:
    items:
      $ref: '#/definitions/GeneralName'
    maxItems: 20
    minItems: 1
    type: array
  GetCertificateAuthorityCertificateRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) of your private CA. This is of
              the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
    required:
      - CertificateAuthorityArn
    title: GetCertificateAuthorityCertificateRequest
    type: object
  GetCertificateAuthorityCertificateResponse:
    properties:
      Certificate:
        allOf:
          - $ref: '#/definitions/CertificateBody'
          - description: Base64-encoded certificate authority (CA) certificate.
      CertificateChain:
        allOf:
          - $ref: '#/definitions/CertificateChain'
          - description: >-
              Base64-encoded certificate chain that includes any intermediate
              certificates and chains up to root certificate that you used to
              sign your private CA certificate. The chain does not include your
              private CA certificate. If this is a root CA, the value will be
              null.
    type: object
  GetCertificateAuthorityCsrRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
              action. This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
    required:
      - CertificateAuthorityArn
    title: GetCertificateAuthorityCsrRequest
    type: object
  GetCertificateAuthorityCsrResponse:
    properties:
      Csr:
        allOf:
          - $ref: '#/definitions/CsrBody'
          - description: >-
              The base64 PEM-encoded certificate signing request (CSR) for your
              private CA certificate.
    type: object
  GetCertificateRequest:
    properties:
      CertificateArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The ARN of the issued certificate. The ARN contains the
              certificate serial number and must be in the following form: </p>
              <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>/certificate/<i>286535153982981100925020015808220737245</i>
              </code> </p>
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code>. </p>
    required:
      - CertificateAuthorityArn
      - CertificateArn
    title: GetCertificateRequest
    type: object
  GetCertificateResponse:
    properties:
      Certificate:
        allOf:
          - $ref: '#/definitions/CertificateBody'
          - description: >-
              The base64 PEM-encoded certificate specified by the
              <code>CertificateArn</code> parameter.
      CertificateChain:
        allOf:
          - $ref: '#/definitions/CertificateChain'
          - description: >-
              The base64 PEM-encoded certificate chain that chains up to the
              root CA certificate that you used to sign your private CA
              certificate. 
    type: object
  GetPolicyRequest:
    properties:
      ResourceArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              The Amazon Resource Number (ARN) of the private CA that will have
              its policy retrieved. You can find the CA's ARN by calling the
              ListCertificateAuthorities action. 
    required:
      - ResourceArn
    title: GetPolicyRequest
    type: object
  GetPolicyResponse:
    properties:
      Policy:
        allOf:
          - $ref: '#/definitions/AWSPolicy'
          - description: The policy attached to the private CA as a JSON document.
    type: object
  IdempotencyToken:
    maxLength: 36
    minLength: 1
    pattern: '[\u0009\u000A\u000D\u0020-\u00FF]*'
    type: string
  ImportCertificateAuthorityCertificateRequest:
    properties:
      Certificate:
        allOf:
          - $ref: '#/definitions/CertificateBodyBlob'
          - description: >-
              The PEM-encoded certificate for a private CA. This may be a
              self-signed certificate in the case of a root CA, or it may be
              signed by another CA that you control.
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      CertificateChain:
        allOf:
          - $ref: '#/definitions/CertificateChainBlob'
          - description: >-
              <p>A PEM-encoded file that contains all of your certificates,
              other than the certificate you're importing, chaining up to your
              root CA. Your ACM Private CA-hosted or on-premises root
              certificate is the last in the chain, and each certificate in the
              chain signs the one preceding. </p> <p>This parameter must be
              supplied when you import a subordinate CA. When you import a root
              CA, there is no chain.</p>
    required:
      - CertificateAuthorityArn
      - Certificate
    title: ImportCertificateAuthorityCertificateRequest
    type: object
  Integer1To5000:
    maximum: 5000
    minimum: 1
    type: integer
  InvalidArgsException: {}
  InvalidArnException: {}
  InvalidNextTokenException: {}
  InvalidPolicyException: {}
  InvalidRequestException: {}
  InvalidStateException: {}
  InvalidTagException: {}
  IssueCertificateRequest:
    properties:
      ApiPassthrough:
        allOf:
          - $ref: '#/definitions/ApiPassthrough'
          - description: >-
              <p>Specifies X.509 certificate information to be included in the
              issued certificate. An <code>APIPassthrough</code> or
              <code>APICSRPassthrough</code> template variant must be selected,
              or else this parameter is ignored. For more information about
              using these templates, see <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/UsingTemplates.html">Understanding
              Certificate Templates</a>.</p> <p>If conflicting or duplicate
              certificate information is supplied during certificate issuance,
              ACM Private CA applies <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/UsingTemplates.html#template-order-of-operations">order
              of operation rules</a> to determine what information is used.</p>
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must be of the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      Csr:
        allOf:
          - $ref: '#/definitions/CsrBlob'
          - description: >-
              <p>The certificate signing request (CSR) for the certificate you
              want to issue. As an example, you can use the following OpenSSL
              command to create the CSR and a 2048 bit RSA private key. </p> <p>
              <code>openssl req -new -newkey rsa:2048 -days 365 -keyout
              private/test_cert_priv_key.pem -out csr/test_cert_.csr</code> </p>
              <p>If you have a configuration file, you can then use the
              following OpenSSL command. The <code>usr_cert</code> block in the
              configuration file contains your X509 version 3 extensions. </p>
              <p> <code>openssl req -new -config openssl_rsa.cnf -extensions
              usr_cert -newkey rsa:2048 -days -365 -keyout
              private/test_cert_priv_key.pem -out csr/test_cert_.csr</code> </p>
              <p>Note: A CSR must provide either a <i>subject name</i> or a
              <i>subject alternative name</i> or the request will be rejected.
              </p>
      IdempotencyToken:
        allOf:
          - $ref: '#/definitions/IdempotencyToken'
          - description: >-
              Alphanumeric string that can be used to distinguish between calls
              to the <b>IssueCertificate</b> action. Idempotency tokens for
              <b>IssueCertificate</b> time out after one minute. Therefore, if
              you call <b>IssueCertificate</b> multiple times with the same
              idempotency token within one minute, ACM Private CA recognizes
              that you are requesting only one certificate and will issue only
              one. If you change the idempotency token for each call, PCA
              recognizes that you are requesting multiple certificates.
      SigningAlgorithm:
        allOf:
          - $ref: '#/definitions/SigningAlgorithm'
          - description: >-
              <p>The name of the algorithm that will be used to sign the
              certificate to be issued. </p> <p>This parameter should not be
              confused with the <code>SigningAlgorithm</code> parameter used to
              sign a CSR in the <code>CreateCertificateAuthority</code>
              action.</p>
      TemplateArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>Specifies a custom configuration template to use when issuing a
              certificate. If this parameter is not provided, ACM Private CA
              defaults to the <code>EndEntityCertificate/V1</code> template. For
              CA certificates, you should choose the shortest path length that
              meets your needs. The path length is indicated by the
              PathLen<i>N</i> portion of the ARN, where <i>N</i> is the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaTerms.html#terms-cadepth">CA
              depth</a>.</p> <p>Note: The CA depth configured on a subordinate
              CA certificate must not exceed the limit set by its parents in the
              CA hierarchy.</p> <p>For a list of <code>TemplateArn</code> values
              supported by ACM Private CA, see <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/UsingTemplates.html">Understanding
              Certificate Templates</a>.</p>
      Validity:
        allOf:
          - $ref: '#/definitions/Validity'
          - description: >-
              <p>Information describing the end of the validity period of the
              certificate. This parameter sets the “Not After” date for the
              certificate.</p> <p>Certificate validity is the period of time
              during which a certificate is valid. Validity can be expressed as
              an explicit date and time when the certificate expires, or as a
              span of time after issuance, stated in days, months, or years. For
              more information, see <a
              href="https://tools.ietf.org/html/rfc5280#section-4.1.2.5">Validity</a>
              in RFC 5280. </p> <p>This value is unaffected when
              <code>ValidityNotBefore</code> is also specified. For example, if
              <code>Validity</code> is set to 20 days in the future, the
              certificate will expire 20 days from issuance time regardless of
              the <code>ValidityNotBefore</code> value.</p> <p>The end of the
              validity period configured on a certificate must not exceed the
              limit set on its parents in the CA hierarchy.</p>
      ValidityNotBefore:
        allOf:
          - $ref: '#/definitions/Validity'
          - description: >-
              <p>Information describing the start of the validity period of the
              certificate. This parameter sets the “Not Before" date for the
              certificate.</p> <p>By default, when issuing a certificate, ACM
              Private CA sets the "Not Before" date to the issuance time minus
              60 minutes. This compensates for clock inconsistencies across
              computer systems. The <code>ValidityNotBefore</code> parameter can
              be used to customize the “Not Before” value. </p> <p>Unlike the
              <code>Validity</code> parameter, the
              <code>ValidityNotBefore</code> parameter is optional.</p> <p>The
              <code>ValidityNotBefore</code> value is expressed as an explicit
              date and time, using the <code>Validity</code> type value
              <code>ABSOLUTE</code>. For more information, see <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_Validity.html">Validity</a>
              in this API reference and <a
              href="https://tools.ietf.org/html/rfc5280#section-4.1.2.5">Validity</a>
              in RFC 5280.</p>
    required:
      - CertificateAuthorityArn
      - Csr
      - SigningAlgorithm
      - Validity
    title: IssueCertificateRequest
    type: object
  IssueCertificateResponse:
    properties:
      CertificateArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) of the issued certificate and
              the certificate serial number. This is of the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>/certificate/<i>286535153982981100925020015808220737245</i>
              </code> </p>
    type: object
  KeyAlgorithm:
    enum:
      - RSA_2048
      - RSA_4096
      - EC_prime256v1
      - EC_secp384r1
    type: string
  KeyStorageSecurityStandard:
    enum:
      - FIPS_140_2_LEVEL_2_OR_HIGHER
      - FIPS_140_2_LEVEL_3_OR_HIGHER
    type: string
  KeyUsage:
    description: >-
      Defines one or more purposes for which the key contained in the
      certificate can be used. Default value for each option is false.
    properties:
      CRLSign:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used to sign CRLs.
      DataEncipherment:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used to decipher data.
      DecipherOnly:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used only to decipher data.
      DigitalSignature:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: ' Key can be used for digital signing.'
      EncipherOnly:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used only to encipher data.
      KeyAgreement:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used in a key-agreement protocol.
      KeyCertSign:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used to sign certificates.
      KeyEncipherment:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used to encipher data.
      NonRepudiation:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: Key can be used for non-repudiation.
    type: object
  LimitExceededException: {}
  ListCertificateAuthoritiesRequest:
    properties:
      MaxResults:
        allOf:
          - $ref: '#/definitions/MaxResults'
          - description: >-
              Use this parameter when paginating results to specify the maximum
              number of items to return in the response on each page. If
              additional items exist beyond the number you specify, the
              <code>NextToken</code> element is sent in the response. Use this
              <code>NextToken</code> value in a subsequent request to retrieve
              additional items.
      NextToken:
        allOf:
          - $ref: '#/definitions/NextToken'
          - description: >-
              Use this parameter when paginating results in a subsequent request
              after you receive a response with truncated results. Set it to the
              value of the <code>NextToken</code> parameter from the response
              you just received.
      ResourceOwner:
        allOf:
          - $ref: '#/definitions/ResourceOwner'
          - description: >-
              Use this parameter to filter the returned set of certificate
              authorities based on their owner. The default is SELF.
    title: ListCertificateAuthoritiesRequest
    type: object
  ListCertificateAuthoritiesResponse:
    properties:
      CertificateAuthorities:
        allOf:
          - $ref: '#/definitions/CertificateAuthorities'
          - description: >-
              Summary information about each certificate authority you have
              created.
      NextToken:
        allOf:
          - $ref: '#/definitions/NextToken'
          - description: >-
              When the list is truncated, this value is present and should be
              used for the <code>NextToken</code> parameter in a subsequent
              pagination request.
    type: object
  ListPermissionsRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              The Amazon Resource Number (ARN) of the private CA to inspect. You
              can find the ARN by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
              action. This must be of the form:
              <code>arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012</code>
              You can get a private CA's ARN by running the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
              action.
      MaxResults:
        allOf:
          - $ref: '#/definitions/MaxResults'
          - description: >-
              When paginating results, use this parameter to specify the maximum
              number of items to return in the response. If additional items
              exist beyond the number you specify, the <b>NextToken</b> element
              is sent in the response. Use this <b>NextToken</b> value in a
              subsequent request to retrieve additional items.
      NextToken:
        allOf:
          - $ref: '#/definitions/NextToken'
          - description: >-
              When paginating results, use this parameter in a subsequent
              request after you receive a response with truncated results. Set
              it to the value of <b>NextToken</b> from the response you just
              received.
    required:
      - CertificateAuthorityArn
    title: ListPermissionsRequest
    type: object
  ListPermissionsResponse:
    properties:
      NextToken:
        allOf:
          - $ref: '#/definitions/NextToken'
          - description: >-
              When the list is truncated, this value is present and should be
              used for the <b>NextToken</b> parameter in a subsequent pagination
              request. 
      Permissions:
        allOf:
          - $ref: '#/definitions/PermissionList'
          - description: >-
              Summary information about each permission assigned by the
              specified private CA, including the action enabled, the policy
              provided, and the time of creation.
    type: object
  ListTagsRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
              action. This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      MaxResults:
        allOf:
          - $ref: '#/definitions/MaxResults'
          - description: >-
              Use this parameter when paginating results to specify the maximum
              number of items to return in the response. If additional items
              exist beyond the number you specify, the <b>NextToken</b> element
              is sent in the response. Use this <b>NextToken</b> value in a
              subsequent request to retrieve additional items.
      NextToken:
        allOf:
          - $ref: '#/definitions/NextToken'
          - description: >-
              Use this parameter when paginating results in a subsequent request
              after you receive a response with truncated results. Set it to the
              value of <b>NextToken</b> from the response you just received.
    required:
      - CertificateAuthorityArn
    title: ListTagsRequest
    type: object
  ListTagsResponse:
    properties:
      NextToken:
        allOf:
          - $ref: '#/definitions/NextToken'
          - description: >-
              When the list is truncated, this value is present and should be
              used for the <b>NextToken</b> parameter in a subsequent pagination
              request. 
      Tags:
        allOf:
          - $ref: '#/definitions/TagList'
          - description: The tags associated with your private CA.
    type: object
  LockoutPreventedException: {}
  MalformedCSRException: {}
  MalformedCertificateException: {}
  MaxResults:
    maximum: 1000
    minimum: 1
    type: integer
  NextToken:
    maxLength: 500
    minLength: 1
    type: string
  OcspConfiguration:
    description: >-
      <p>Contains information to enable and configure Online Certificate Status
      Protocol (OCSP) for validating certificate revocation status.</p> <p>When
      you revoke a certificate, OCSP responses may take up to 60 minutes to
      reflect the new status.</p>
    properties:
      Enabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Flag enabling use of the Online Certificate Status Protocol (OCSP)
              for validating certificate revocation status.
      OcspCustomCname:
        allOf:
          - $ref: '#/definitions/String253'
          - description: >-
              <p>By default, ACM Private CA injects an AWS domain into
              certificates being validated by the Online Certificate Status
              Protocol (OCSP). A customer can alternatively use this object to
              define a CNAME specifying a customized OCSP domain.</p> <p>Note:
              The value of the CNAME must not include a protocol prefix such as
              "http://" or "https://".</p> <p>For more information, see <a
              href="https://docs.aws.amazon.com/acm-pca/latest/userguide/ocsp-customize.html">Customizing
              Online Certificate Status Protocol (OCSP) </a> in the <i>AWS
              Certificate Manager Private Certificate Authority (PCA) User
              Guide</i>.</p>
    required:
      - Enabled
    type: object
  OtherName:
    description: >-
      Defines a custom ASN.1 X.400 <code>GeneralName</code> using an object
      identifier (OID) and value. The OID must satisfy the regular expression
      shown below. For more information, see NIST's definition of <a
      href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object
      Identifier (OID)</a>.
    properties:
      TypeId:
        allOf:
          - $ref: '#/definitions/CustomObjectIdentifier'
          - description: 'Specifies an OID. '
      Value:
        allOf:
          - $ref: '#/definitions/String256'
          - description: Specifies an OID value.
    required:
      - TypeId
      - Value
    type: object
  PermanentDeletionTimeInDays:
    maximum: 30
    minimum: 7
    type: integer
  Permission:
    description: >-
      Permissions designate which private CA actions can be performed by an AWS
      service or entity. In order for ACM to automatically renew private
      certificates, you must give the ACM service principal all available
      permissions (<code>IssueCertificate</code>, <code>GetCertificate</code>,
      and <code>ListPermissions</code>). Permissions can be assigned with the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreatePermission.html">CreatePermission</a>
      action, removed with the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeletePermission.html">DeletePermission</a>
      action, and listed with the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListPermissions.html">ListPermissions</a>
      action.
    properties:
      Actions:
        allOf:
          - $ref: '#/definitions/ActionList'
          - description: >-
              The private CA actions that can be performed by the designated AWS
              service.
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              The Amazon Resource Number (ARN) of the private CA from which the
              permission was issued.
      CreatedAt:
        allOf:
          - $ref: '#/definitions/TStamp'
          - description: The time at which the permission was created.
      Policy:
        allOf:
          - $ref: '#/definitions/AWSPolicy'
          - description: The name of the policy that is associated with the permission.
      Principal:
        allOf:
          - $ref: '#/definitions/Principal'
          - description: >-
              The AWS service or entity that holds the permission. At this time,
              the only valid principal is <code>acm.amazonaws.com</code>.
      SourceAccount:
        allOf:
          - $ref: '#/definitions/AccountId'
          - description: The ID of the account that assigned the permission.
    type: object
  PermissionAlreadyExistsException: {}
  PermissionList:
    items:
      $ref: '#/definitions/Permission'
    minItems: 0
    type: array
  PolicyInformation:
    description: Defines the X.509 <code>CertificatePolicies</code> extension.
    properties:
      CertPolicyId:
        allOf:
          - $ref: '#/definitions/CustomObjectIdentifier'
          - description: >-
              Specifies the object identifier (OID) of the certificate policy
              under which the certificate was issued. For more information, see
              NIST's definition of <a
              href="https://csrc.nist.gov/glossary/term/Object_Identifier">Object
              Identifier (OID)</a>.
      PolicyQualifiers:
        allOf:
          - $ref: '#/definitions/PolicyQualifierInfoList'
          - description: >-
              Modifies the given <code>CertPolicyId</code> with a qualifier. ACM
              Private CA supports the certification practice statement (CPS)
              qualifier.
    required:
      - CertPolicyId
    type: object
  PolicyQualifierId:
    enum:
      - CPS
    type: string
  PolicyQualifierInfo:
    description: >-
      Modifies the <code>CertPolicyId</code> of a <code>PolicyInformation</code>
      object with a qualifier. ACM Private CA supports the certification
      practice statement (CPS) qualifier.
    properties:
      PolicyQualifierId:
        allOf:
          - $ref: '#/definitions/PolicyQualifierId'
          - description: Identifies the qualifier modifying a <code>CertPolicyId</code>.
      Qualifier:
        allOf:
          - $ref: '#/definitions/Qualifier'
          - description: >-
              Defines the qualifier type. ACM Private CA supports the use of a
              URI for a CPS qualifier in this field.
    required:
      - PolicyQualifierId
      - Qualifier
    type: object
  PolicyQualifierInfoList:
    items:
      $ref: '#/definitions/PolicyQualifierInfo'
    maxItems: 20
    minItems: 1
    type: array
  PositiveLong:
    minimum: 1
    type: integer
  Principal:
    maxLength: 128
    minLength: 0
    pattern: '^[^*]+$'
    type: string
  PutPolicyRequest:
    properties:
      Policy:
        allOf:
          - $ref: '#/definitions/AWSPolicy'
          - description: >-
              The path and file name of a JSON-formatted IAM policy to attach to
              the specified private CA resource. If this policy does not contain
              all required statements or if it includes any statement that is
              not allowed, the <code>PutPolicy</code> action returns an
              <code>InvalidPolicyException</code>. For information about IAM
              policy and statement structure, see <a
              href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json">Overview
              of JSON Policies</a>.
      ResourceArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Number (ARN) of the private CA to associate
              with the policy. The ARN of the CA can be found by calling the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
              action.</p> <p/>
    required:
      - ResourceArn
      - Policy
    title: PutPolicyRequest
    type: object
  Qualifier:
    description: >-
      Defines a <code>PolicyInformation</code> qualifier. ACM Private CA
      supports the <a
      href="https://tools.ietf.org/html/rfc5280#section-4.2.1.4">certification
      practice statement (CPS) qualifier</a> defined in RFC 5280. 
    properties:
      CpsUri:
        allOf:
          - $ref: '#/definitions/String256'
          - description: >-
              Contains a pointer to a certification practice statement (CPS)
              published by the CA.
    required:
      - CpsUri
    type: object
  RequestAlreadyProcessedException: {}
  RequestFailedException: {}
  RequestInProgressException: {}
  ResourceNotFoundException: {}
  ResourceOwner:
    enum:
      - SELF
      - OTHER_ACCOUNTS
    type: string
  RestoreCertificateAuthorityRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
              action. This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
    required:
      - CertificateAuthorityArn
    title: RestoreCertificateAuthorityRequest
    type: object
  RevocationConfiguration:
    description: >-
      Certificate revocation information used by the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
      and <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UpdateCertificateAuthority.html">UpdateCertificateAuthority</a>
      actions. Your private certificate authority (CA) can configure Online
      Certificate Status Protocol (OCSP) support and/or maintain a certificate
      revocation list (CRL). OCSP returns validation information about
      certificates as requested by clients, and a CRL contains an updated list
      of certificates revoked by your CA. For more information, see <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_RevokeCertificate.html">RevokeCertificate</a>
      and <a
      href="https://docs.aws.amazon.com/acm-pca/latest/userguide/revocation-setup.html">Setting
      up a certificate revocation method</a> in the <i>AWS Certificate Manager
      Private Certificate Authority (PCA) User Guide</i>.
    properties:
      CrlConfiguration:
        allOf:
          - $ref: '#/definitions/CrlConfiguration'
          - description: >-
              Configuration of the certificate revocation list (CRL), if any,
              maintained by your private CA. A CRL is typically updated
              approximately 30 minutes after a certificate is revoked. If for
              any reason a CRL update fails, ACM Private CA makes further
              attempts every 15 minutes.
      OcspConfiguration:
        allOf:
          - $ref: '#/definitions/OcspConfiguration'
          - description: >-
              Configuration of Online Certificate Status Protocol (OCSP)
              support, if any, maintained by your private CA. When you revoke a
              certificate, OCSP responses may take up to 60 minutes to reflect
              the new status.
    type: object
  RevocationReason:
    enum:
      - UNSPECIFIED
      - KEY_COMPROMISE
      - CERTIFICATE_AUTHORITY_COMPROMISE
      - AFFILIATION_CHANGED
      - SUPERSEDED
      - CESSATION_OF_OPERATION
      - PRIVILEGE_WITHDRAWN
      - A_A_COMPROMISE
    type: string
  RevokeCertificateRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>Amazon Resource Name (ARN) of the private CA that issued the
              certificate to be revoked. This must be of the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      CertificateSerial:
        allOf:
          - $ref: '#/definitions/String128'
          - description: >-
              <p>Serial number of the certificate to be revoked. This must be in
              hexadecimal format. You can retrieve the serial number by calling
              <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetCertificate.html">GetCertificate</a>
              with the Amazon Resource Name (ARN) of the certificate you want
              and the ARN of your private CA. The <b>GetCertificate</b> action
              retrieves the certificate in the PEM format. You can use the
              following OpenSSL command to list the certificate in text format
              and copy the hexadecimal serial number. </p> <p> <code>openssl
              x509 -in <i>file_path</i> -text -noout</code> </p> <p>You can also
              copy the serial number from the console or use the <a
              href="https://docs.aws.amazon.com/acm/latest/APIReference/API_DescribeCertificate.html">DescribeCertificate</a>
              action in the <i>AWS Certificate Manager API Reference</i>. </p>
      RevocationReason:
        allOf:
          - $ref: '#/definitions/RevocationReason'
          - description: Specifies why you revoked the certificate.
    required:
      - CertificateAuthorityArn
      - CertificateSerial
      - RevocationReason
    title: RevokeCertificateRequest
    type: object
  S3BucketName:
    maxLength: 63
    minLength: 3
    type: string
  S3Key:
    maxLength: 1024
    type: string
  S3ObjectAcl:
    enum:
      - PUBLIC_READ
      - BUCKET_OWNER_FULL_CONTROL
    type: string
  SigningAlgorithm:
    enum:
      - SHA256WITHECDSA
      - SHA384WITHECDSA
      - SHA512WITHECDSA
      - SHA256WITHRSA
      - SHA384WITHRSA
      - SHA512WITHRSA
    type: string
  String:
    type: string
  String128:
    maxLength: 128
    minLength: 0
    type: string
  String16:
    maxLength: 16
    minLength: 0
    type: string
  String253:
    maxLength: 253
    minLength: 0
    type: string
  String256:
    maxLength: 256
    minLength: 0
    type: string
  String3:
    maxLength: 3
    minLength: 0
    type: string
  String39:
    maxLength: 39
    minLength: 0
    type: string
  String3To255:
    maxLength: 255
    minLength: 3
    type: string
  String40:
    maxLength: 40
    minLength: 0
    type: string
  String5:
    maxLength: 5
    minLength: 0
    type: string
  String64:
    maxLength: 64
    minLength: 0
    type: string
  TStamp:
    format: date-time
    type: string
  Tag:
    description: >-
      Tags are labels that you can use to identify and organize your private
      CAs. Each tag consists of a key and an optional value. You can associate
      up to 50 tags with a private CA. To add one or more tags to a private CA,
      call the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_TagCertificateAuthority.html">TagCertificateAuthority</a>
      action. To remove a tag, call the <a
      href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UntagCertificateAuthority.html">UntagCertificateAuthority</a>
      action. 
    properties:
      Key:
        allOf:
          - $ref: '#/definitions/TagKey'
          - description: Key (name) of the tag.
      Value:
        allOf:
          - $ref: '#/definitions/TagValue'
          - description: Value of the tag.
    required:
      - Key
    type: object
  TagCertificateAuthorityRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      Tags:
        allOf:
          - $ref: '#/definitions/TagList'
          - description: List of tags to be associated with the CA.
    required:
      - CertificateAuthorityArn
      - Tags
    title: TagCertificateAuthorityRequest
    type: object
  TagKey:
    maxLength: 128
    minLength: 1
    pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
    type: string
  TagList:
    items:
      $ref: '#/definitions/Tag'
    maxItems: 50
    minItems: 1
    type: array
  TagValue:
    maxLength: 256
    minLength: 0
    pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
    type: string
  TooManyTagsException: {}
  UntagCertificateAuthorityRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>The Amazon Resource Name (ARN) that was returned when you
              called <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>.
              This must be of the form: </p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      Tags:
        allOf:
          - $ref: '#/definitions/TagList'
          - description: List of tags to be removed from the CA.
    required:
      - CertificateAuthorityArn
      - Tags
    title: UntagCertificateAuthorityRequest
    type: object
  UpdateCertificateAuthorityRequest:
    properties:
      CertificateAuthorityArn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: >-
              <p>Amazon Resource Name (ARN) of the private CA that issued the
              certificate to be revoked. This must be of the form:</p> <p>
              <code>arn:aws:acm-pca:<i>region</i>:<i>account</i>:certificate-authority/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
      RevocationConfiguration:
        allOf:
          - $ref: '#/definitions/RevocationConfiguration'
          - description: >-
              Contains information to enable Online Certificate Status Protocol
              (OCSP) support, to enable a certificate revocation list (CRL), to
              enable both, or to enable neither. If this parameter is not
              supplied, existing capibilites remain unchanged. For more
              information, see the <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_OcspConfiguration.html">OcspConfiguration</a>
              and <a
              href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CrlConfiguration.html">CrlConfiguration</a>
              types.
      Status:
        allOf:
          - $ref: '#/definitions/CertificateAuthorityStatus'
          - description: Status of your private CA.
    required:
      - CertificateAuthorityArn
    title: UpdateCertificateAuthorityRequest
    type: object
  Validity:
    description: >-
      <p>Validity specifies the period of time during which a certificate is
      valid. Validity can be expressed as an explicit date and time when the
      validity of a certificate starts or expires, or as a span of time after
      issuance, stated in days, months, or years. For more information, see <a
      href="https://tools.ietf.org/html/rfc5280#section-4.1.2.5">Validity</a> in
      RFC 5280.</p> <p>ACM Private CA API consumes the <code>Validity</code>
      data type differently in two distinct parameters of the
      <code>IssueCertificate</code> action. The required parameter
      <code>IssueCertificate</code>:<code>Validity</code> specifies the end of a
      certificate's validity period. The optional parameter
      <code>IssueCertificate</code>:<code>ValidityNotBefore</code> specifies a
      customized starting time for the validity period.</p>
    properties:
      Type:
        allOf:
          - $ref: '#/definitions/ValidityPeriodType'
          - description: >-
              <p>Determines how <i>ACM Private CA</i> interprets the
              <code>Value</code> parameter, an integer. Supported validity types
              include those listed below. Type definitions with values include a
              sample input value and the resulting output. </p> <p>
              <code>END_DATE</code>: The specific date and time when the
              certificate will expire, expressed using UTCTime (YYMMDDHHMMSS) or
              GeneralizedTime (YYYYMMDDHHMMSS) format. When UTCTime is used, if
              the year field (YY) is greater than or equal to 50, the year is
              interpreted as 19YY. If the year field is less than 50, the year
              is interpreted as 20YY.</p> <ul> <li> <p>Sample input value:
              491231235959 (UTCTime format)</p> </li> <li> <p>Output expiration
              date/time: 12/31/2049 23:59:59</p> </li> </ul> <p>
              <code>ABSOLUTE</code>: The specific date and time when the
              validity of a certificate will start or expire, expressed in
              seconds since the Unix Epoch. </p> <ul> <li> <p>Sample input
              value: 2524608000</p> </li> <li> <p>Output expiration date/time:
              01/01/2050 00:00:00</p> </li> </ul> <p> <code>DAYS</code>,
              <code>MONTHS</code>, <code>YEARS</code>: The relative time from
              the moment of issuance until the certificate will expire,
              expressed in days, months, or years. </p> <p>Example if
              <code>DAYS</code>, issued on 10/12/2020 at 12:34:54 UTC:</p> <ul>
              <li> <p>Sample input value: 90</p> </li> <li> <p>Output expiration
              date: 01/10/2020 12:34:54 UTC</p> </li> </ul> <p>The minimum
              validity duration for a certificate using relative time
              (<code>DAYS</code>) is one day. The minimum validity for a
              certificate using absolute time (<code>ABSOLUTE</code> or
              <code>END_DATE</code>) is one second.</p>
      Value:
        allOf:
          - $ref: '#/definitions/PositiveLong'
          - description: >-
              A long integer interpreted according to the value of
              <code>Type</code>, below.
    required:
      - Value
      - Type
    type: object
  ValidityPeriodType:
    enum:
      - END_DATE
      - ABSOLUTE
      - DAYS
      - MONTHS
      - YEARS
    type: string
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/acm-pca/'
host: acm-pca.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    <p>This is the <i>ACM Private CA API Reference</i>. It provides
    descriptions, syntax, and usage examples for each of the actions and data
    types involved in creating and managing private certificate authorities (CA)
    for your organization.</p> <p>The documentation for each action shows the
    Query API request parameters and the XML response. Alternatively, you can
    use one of the AWS SDKs to access an API that's tailored to the programming
    language or platform that you're using. For more information, see <a
    href="https://aws.amazon.com/tools/#SDKs">AWS SDKs</a>.</p> <p>Each ACM
    Private CA API operation has a quota that determines the number of times the
    operation can be called per second. ACM Private CA throttles API requests at
    different rates depending on the operation. Throttling means that ACM
    Private CA rejects an otherwise valid request because the request exceeds
    the operation's quota for the number of requests per second. When a request
    is throttled, ACM Private CA returns a <a
    href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/CommonErrors.html">ThrottlingException</a>
    error. ACM Private CA does not guarantee a minimum request rate for APIs.
    </p> <p>To see an up-to-date list of your ACM Private CA quotas, or to
    request a quota increase, log into your AWS account and visit the <a
    href="https://console.aws.amazon.com/servicequotas/">Service Quotas</a>
    console.</p>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS Certificate Manager Private Certificate Authority
  version: '2017-08-22'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-pca-2017-08-22.normal.json
      x-apisguru-driver: external
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: acm-pca
paths:
  /#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a root or subordinate private certificate authority (CA). You
        must specify the CA configuration, an optional configuration for Online
        Certificate Status Protocol (OCSP) and/or a certificate revocation list
        (CRL), the CA type, and an optional idempotency token to avoid
        accidental creation of multiple CAs. The CA configuration specifies the
        name of the algorithm and key size to be used to create the CA private
        key, the type of signing algorithm that the CA uses, and X.500 subject
        information. The OCSP configuration can optionally specify a custom URL
        for the OCSP responder. The CRL configuration specifies the CRL
        expiration period in days (the validity period of the CRL), the Amazon
        S3 bucket that will contain the CRL, and a CNAME alias for the S3 bucket
        that is included in certificates issued by the CA. If successful, this
        action returns the Amazon Resource Name (ARN) of the CA.</p> <p>ACM
        Private CA assets that are stored in Amazon S3 can be protected with
        encryption. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaCreateCa.html#crl-encryption">Encrypting
        Your CRLs</a>.</p> <note> <p>Both PCA and the IAM principal must have
        permission to write to the S3 bucket that you specify. If the IAM
        principal making the call does not have permission to write to the
        bucket, then an exception is thrown. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaAuthAccess.html">Configure
        Access to ACM Private CA</a>.</p> </note>
      operationId: CreateCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.CreateCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCertificateAuthorityResponse'
        '480':
          description: InvalidArgsException
          schema:
            $ref: '#/definitions/InvalidArgsException'
        '481':
          description: InvalidPolicyException
          schema:
            $ref: '#/definitions/InvalidPolicyException'
        '482':
          description: InvalidTagException
          schema:
            $ref: '#/definitions/InvalidTagException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
  /#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthorityAuditReport:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates an audit report that lists every time that your CA private
        key is used. The report is saved in the Amazon S3 bucket that you
        specify on input. The <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_IssueCertificate.html">IssueCertificate</a>
        and <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_RevokeCertificate.html">RevokeCertificate</a>
        actions use the private key. </p> <note> <p>Both PCA and the IAM
        principal must have permission to write to the S3 bucket that you
        specify. If the IAM principal making the call does not have permission
        to write to the bucket, then an exception is thrown. For more
        information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaAuthAccess.html">Configure
        Access to ACM Private CA</a>.</p> </note> <p>ACM Private CA assets that
        are stored in Amazon S3 can be protected with encryption. For more
        information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaAuditReport.html#audit-report-encryption">Encrypting
        Your Audit Reports</a>.</p>
      operationId: CreateCertificateAuthorityAuditReport
      parameters:
        - enum:
            - ACMPrivateCA.CreateCertificateAuthorityAuditReport
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateCertificateAuthorityAuditReportRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCertificateAuthorityAuditReportResponse'
        '480':
          description: RequestInProgressException
          schema:
            $ref: '#/definitions/RequestInProgressException'
        '481':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '484':
          description: InvalidArgsException
          schema:
            $ref: '#/definitions/InvalidArgsException'
        '485':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
  /#X-Amz-Target=ACMPrivateCA.CreatePermission:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Grants one or more permissions on a private CA to the AWS Certificate
        Manager (ACM) service principal (<code>acm.amazonaws.com</code>). These
        permissions allow ACM to issue and renew ACM certificates that reside in
        the same AWS account as the CA.</p> <p>You can list current permissions
        with the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListPermissions.html">ListPermissions</a>
        action and revoke them with the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeletePermission.html">DeletePermission</a>
        action.</p> <p class="title"> <b>About Permissions</b> </p> <ul> <li>
        <p>If the private CA and the certificates it issues reside in the same
        account, you can use <code>CreatePermission</code> to grant permissions
        for ACM to carry out automatic certificate renewals.</p> </li> <li>
        <p>For automatic certificate renewal to succeed, the ACM service
        principal needs permissions to create, retrieve, and list
        certificates.</p> </li> <li> <p>If the private CA and the ACM
        certificates reside in different accounts, then permissions cannot be
        used to enable automatic renewals. Instead, the ACM certificate owner
        must set up a resource-based policy to enable cross-account issuance and
        renewals. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-rbp.html">Using
        a Resource Based Policy with ACM Private CA</a>.</p> </li> </ul>
      operationId: CreatePermission
      parameters:
        - enum:
            - ACMPrivateCA.CreatePermission
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreatePermissionRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: PermissionAlreadyExistsException
          schema:
            $ref: '#/definitions/PermissionAlreadyExistsException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '485':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
  /#X-Amz-Target=ACMPrivateCA.DeleteCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Deletes a private certificate authority (CA). You must provide the
        Amazon Resource Name (ARN) of the private CA that you want to delete.
        You can find the ARN by calling the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
        action. </p> <note> <p>Deleting a CA will invalidate other CAs and
        certificates below it in your CA hierarchy.</p> </note> <p>Before you
        can delete a CA that you have created and activated, you must disable
        it. To do this, call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UpdateCertificateAuthority.html">UpdateCertificateAuthority</a>
        action and set the <b>CertificateAuthorityStatus</b> parameter to
        <code>DISABLED</code>. </p> <p>Additionally, you can delete a CA if you
        are waiting for it to be created (that is, the status of the CA is
        <code>CREATING</code>). You can also delete it if the CA has been
        created but you haven't yet imported the signed certificate into ACM
        Private CA (that is, the status of the CA is
        <code>PENDING_CERTIFICATE</code>). </p> <p>When you successfully call <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeleteCertificateAuthority.html">DeleteCertificateAuthority</a>,
        the CA's status changes to <code>DELETED</code>. However, the CA won't
        be permanently deleted until the restoration period has passed. By
        default, if you do not set the <code>PermanentDeletionTimeInDays</code>
        parameter, the CA remains restorable for 30 days. You can set the
        parameter from 7 to 30 days. The <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DescribeCertificateAuthority.html">DescribeCertificateAuthority</a>
        action returns the time remaining in the restoration window of a private
        CA in the <code>DELETED</code> state. To restore an eligible CA, call
        the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_RestoreCertificateAuthority.html">RestoreCertificateAuthority</a>
        action.</p>
      operationId: DeleteCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.DeleteCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '483':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
  /#X-Amz-Target=ACMPrivateCA.DeletePermission:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Revokes permissions on a private CA granted to the AWS Certificate
        Manager (ACM) service principal (acm.amazonaws.com). </p> <p>These
        permissions allow ACM to issue and renew ACM certificates that reside in
        the same AWS account as the CA. If you revoke these permissions, ACM
        will no longer renew the affected certificates automatically.</p>
        <p>Permissions can be granted with the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreatePermission.html">CreatePermission</a>
        action and listed with the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListPermissions.html">ListPermissions</a>
        action. </p> <p class="title"> <b>About Permissions</b> </p> <ul> <li>
        <p>If the private CA and the certificates it issues reside in the same
        account, you can use <code>CreatePermission</code> to grant permissions
        for ACM to carry out automatic certificate renewals.</p> </li> <li>
        <p>For automatic certificate renewal to succeed, the ACM service
        principal needs permissions to create, retrieve, and list
        certificates.</p> </li> <li> <p>If the private CA and the ACM
        certificates reside in different accounts, then permissions cannot be
        used to enable automatic renewals. Instead, the ACM certificate owner
        must set up a resource-based policy to enable cross-account issuance and
        renewals. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-rbp.html">Using
        a Resource Based Policy with ACM Private CA</a>.</p> </li> </ul>
      operationId: DeletePermission
      parameters:
        - enum:
            - ACMPrivateCA.DeletePermission
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeletePermissionRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '483':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
  /#X-Amz-Target=ACMPrivateCA.DeletePolicy:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Deletes the resource-based policy attached to a private CA. Deletion
        will remove any access that the policy has granted. If there is no
        policy attached to the private CA, this action will return
        successful.</p> <p>If you delete a policy that was applied through AWS
        Resource Access Manager (RAM), the CA will be removed from all shares in
        which it was included. </p> <p>The AWS Certificate Manager Service
        Linked Role that the policy supports is not affected when you delete the
        policy. </p> <p>The current policy can be shown with <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetPolicy.html">GetPolicy</a>
        and updated with <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_PutPolicy.html">PutPolicy</a>.</p>
        <p class="title"> <b>About Policies</b> </p> <ul> <li> <p>A policy
        grants access on a private CA to an AWS customer account, to AWS
        Organizations, or to an AWS Organizations unit. Policies are under the
        control of a CA administrator. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-rbp.html">Using
        a Resource Based Policy with ACM Private CA</a>.</p> </li> <li> <p>A
        policy permits a user of AWS Certificate Manager (ACM) to issue ACM
        certificates signed by a CA in another account.</p> </li> <li> <p>For
        ACM to manage automatic renewal of these certificates, the ACM user must
        configure a Service Linked Role (SLR). The SLR allows the ACM service to
        assume the identity of the user, subject to confirmation against the ACM
        Private CA policy. For more information, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html">Using
        a Service Linked Role with ACM</a>.</p> </li> <li> <p>Updates made in
        AWS Resource Manager (RAM) are reflected in policies. For more
        information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-ram.html">Attach
        a Policy for Cross-Account Access</a>.</p> </li> </ul>
      operationId: DeletePolicy
      parameters:
        - enum:
            - ACMPrivateCA.DeletePolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeletePolicyRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '483':
          description: LockoutPreventedException
          schema:
            $ref: '#/definitions/LockoutPreventedException'
        '484':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Lists information about your private certificate authority (CA) or
        one that has been shared with you. You specify the private CA on input
        by its ARN (Amazon Resource Name). The output contains the status of
        your CA. This can be any of the following: </p> <ul> <li> <p>
        <code>CREATING</code> - ACM Private CA is creating your private
        certificate authority.</p> </li> <li> <p>
        <code>PENDING_CERTIFICATE</code> - The certificate is pending. You must
        use your ACM Private CA-hosted or on-premises root or subordinate CA to
        sign your private CA CSR and then import it into PCA. </p> </li> <li>
        <p> <code>ACTIVE</code> - Your private CA is active.</p> </li> <li> <p>
        <code>DISABLED</code> - Your private CA has been disabled.</p> </li>
        <li> <p> <code>EXPIRED</code> - Your private CA certificate has
        expired.</p> </li> <li> <p> <code>FAILED</code> - Your private CA has
        failed. Your CA can fail because of problems such a network outage or
        back-end AWS failure or other errors. A failed CA can never return to
        the pending state. You must create a new CA. </p> </li> <li> <p>
        <code>DELETED</code> - Your private CA is within the restoration period,
        after which it is permanently deleted. The length of time remaining in
        the CA's restoration period is also included in this action's
        output.</p> </li> </ul>
      operationId: DescribeCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.DescribeCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeCertificateAuthorityResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
  /#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthorityAuditReport:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Lists information about a specific audit report created by calling the
        <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html">CreateCertificateAuthorityAuditReport</a>
        action. Audit information is created every time the certificate
        authority (CA) private key is used. The private key is used when you
        call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_IssueCertificate.html">IssueCertificate</a>
        action or the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_RevokeCertificate.html">RevokeCertificate</a>
        action. 
      operationId: DescribeCertificateAuthorityAuditReport
      parameters:
        - enum:
            - ACMPrivateCA.DescribeCertificateAuthorityAuditReport
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeCertificateAuthorityAuditReportRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeCertificateAuthorityAuditReportResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidArgsException
          schema:
            $ref: '#/definitions/InvalidArgsException'
  /#X-Amz-Target=ACMPrivateCA.GetCertificate:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Retrieves a certificate from your private CA or one that has been shared
        with you. The ARN of the certificate is returned when you call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_IssueCertificate.html">IssueCertificate</a>
        action. You must specify both the ARN of your private CA and the ARN of
        the issued certificate when calling the <b>GetCertificate</b> action.
        You can retrieve the certificate if it is in the <b>ISSUED</b> state.
        You can call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html">CreateCertificateAuthorityAuditReport</a>
        action to create a report that contains information about all of the
        certificates issued and revoked by your private CA. 
      operationId: GetCertificate
      parameters:
        - enum:
            - ACMPrivateCA.GetCertificate
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCertificateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCertificateResponse'
        '480':
          description: RequestInProgressException
          schema:
            $ref: '#/definitions/RequestInProgressException'
        '481':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '484':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
  /#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCertificate:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Retrieves the certificate and certificate chain for your private
        certificate authority (CA) or one that has been shared with you. Both
        the certificate and the chain are base64 PEM-encoded. The chain does not
        include the CA certificate. Each certificate in the chain signs the one
        before it. 
      operationId: GetCertificateAuthorityCertificate
      parameters:
        - enum:
            - ACMPrivateCA.GetCertificateAuthorityCertificate
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCertificateAuthorityCertificateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCertificateAuthorityCertificateResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '482':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
  /#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCsr:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Retrieves the certificate signing request (CSR) for your private
        certificate authority (CA). The CSR is created when you call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
        action. Sign the CSR with your ACM Private CA-hosted or on-premises root
        or subordinate CA. Then import the signed certificate back into ACM
        Private CA by calling the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html">ImportCertificateAuthorityCertificate</a>
        action. The CSR is returned as a base64 PEM-encoded string. 
      operationId: GetCertificateAuthorityCsr
      parameters:
        - enum:
            - ACMPrivateCA.GetCertificateAuthorityCsr
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCertificateAuthorityCsrRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCertificateAuthorityCsrResponse'
        '480':
          description: RequestInProgressException
          schema:
            $ref: '#/definitions/RequestInProgressException'
        '481':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '484':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
  /#X-Amz-Target=ACMPrivateCA.GetPolicy:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Retrieves the resource-based policy attached to a private CA. If
        either the private CA resource or the policy cannot be found, this
        action returns a <code>ResourceNotFoundException</code>. </p> <p>The
        policy can be attached or updated with <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_PutPolicy.html">PutPolicy</a>
        and removed with <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeletePolicy.html">DeletePolicy</a>.</p>
        <p class="title"> <b>About Policies</b> </p> <ul> <li> <p>A policy
        grants access on a private CA to an AWS customer account, to AWS
        Organizations, or to an AWS Organizations unit. Policies are under the
        control of a CA administrator. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-rbp.html">Using
        a Resource Based Policy with ACM Private CA</a>.</p> </li> <li> <p>A
        policy permits a user of AWS Certificate Manager (ACM) to issue ACM
        certificates signed by a CA in another account.</p> </li> <li> <p>For
        ACM to manage automatic renewal of these certificates, the ACM user must
        configure a Service Linked Role (SLR). The SLR allows the ACM service to
        assume the identity of the user, subject to confirmation against the ACM
        Private CA policy. For more information, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html">Using
        a Service Linked Role with ACM</a>.</p> </li> <li> <p>Updates made in
        AWS Resource Manager (RAM) are reflected in policies. For more
        information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-ram.html">Attach
        a Policy for Cross-Account Access</a>.</p> </li> </ul>
      operationId: GetPolicy
      parameters:
        - enum:
            - ACMPrivateCA.GetPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetPolicyRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPolicyResponse'
        '480':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '481':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '482':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '483':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#X-Amz-Target=ACMPrivateCA.ImportCertificateAuthorityCertificate:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Imports a signed private CA certificate into ACM Private CA. This
        action is used when you are using a chain of trust whose root is located
        outside ACM Private CA. Before you can call this action, the following
        preparations must in place:</p> <ol> <li> <p>In ACM Private CA, call the
        <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
        action to create the private CA that you plan to back with the imported
        certificate.</p> </li> <li> <p>Call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetCertificateAuthorityCsr.html">GetCertificateAuthorityCsr</a>
        action to generate a certificate signing request (CSR).</p> </li> <li>
        <p>Sign the CSR using a root or intermediate CA hosted by either an
        on-premises PKI hierarchy or by a commercial CA.</p> </li> <li>
        <p>Create a certificate chain and copy the signed certificate and the
        certificate chain to your working directory.</p> </li> </ol> <p>ACM
        Private CA supports three scenarios for installing a CA certificate:</p>
        <ul> <li> <p>Installing a certificate for a root CA hosted by ACM
        Private CA.</p> </li> <li> <p>Installing a subordinate CA certificate
        whose parent authority is hosted by ACM Private CA.</p> </li> <li>
        <p>Installing a subordinate CA certificate whose parent authority is
        externally hosted.</p> </li> </ul> <p>The following additional
        requirements apply when you import a CA certificate.</p> <ul> <li>
        <p>Only a self-signed certificate can be imported as a root CA.</p>
        </li> <li> <p>A self-signed certificate cannot be imported as a
        subordinate CA.</p> </li> <li> <p>Your certificate chain must not
        include the private CA certificate that you are importing.</p> </li>
        <li> <p>Your root CA must be the last certificate in your chain. The
        subordinate certificate, if any, that your root CA signed must be next
        to last. The subordinate certificate signed by the preceding subordinate
        CA must come next, and so on until your chain is built. </p> </li> <li>
        <p>The chain must be PEM-encoded.</p> </li> <li> <p>The maximum allowed
        size of a certificate is 32 KB.</p> </li> <li> <p>The maximum allowed
        size of a certificate chain is 2 MB.</p> </li> </ul> <p> <i>Enforcement
        of Critical Constraints</i> </p> <p>ACM Private CA allows the following
        extensions to be marked critical in the imported CA certificate or
        chain.</p> <ul> <li> <p>Basic constraints (<i>must</i> be marked
        critical)</p> </li> <li> <p>Subject alternative names</p> </li> <li>
        <p>Key usage</p> </li> <li> <p>Extended key usage</p> </li> <li>
        <p>Authority key identifier</p> </li> <li> <p>Subject key identifier</p>
        </li> <li> <p>Issuer alternative name</p> </li> <li> <p>Subject
        directory attributes</p> </li> <li> <p>Subject information access</p>
        </li> <li> <p>Certificate policies</p> </li> <li> <p>Policy mappings</p>
        </li> <li> <p>Inhibit anyPolicy</p> </li> </ul> <p>ACM Private CA
        rejects the following extensions when they are marked critical in an
        imported CA certificate or chain.</p> <ul> <li> <p>Name constraints</p>
        </li> <li> <p>Policy constraints</p> </li> <li> <p>CRL distribution
        points</p> </li> <li> <p>Authority information access</p> </li> <li>
        <p>Freshest CRL</p> </li> <li> <p>Any other extension</p> </li> </ul>
      operationId: ImportCertificateAuthorityCertificate
      parameters:
        - enum:
            - ACMPrivateCA.ImportCertificateAuthorityCertificate
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ImportCertificateAuthorityCertificateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: RequestInProgressException
          schema:
            $ref: '#/definitions/RequestInProgressException'
        '482':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '483':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '484':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '485':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '486':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '487':
          description: MalformedCertificateException
          schema:
            $ref: '#/definitions/MalformedCertificateException'
        '488':
          description: CertificateMismatchException
          schema:
            $ref: '#/definitions/CertificateMismatchException'
  /#X-Amz-Target=ACMPrivateCA.IssueCertificate:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Uses your private certificate authority (CA), or one that has been
        shared with you, to issue a client certificate. This action returns the
        Amazon Resource Name (ARN) of the certificate. You can retrieve the
        certificate by calling the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetCertificate.html">GetCertificate</a>
        action and specifying the ARN. </p> <note> <p>You cannot use the ACM
        <b>ListCertificateAuthorities</b> action to retrieve the ARNs of the
        certificates that you issue by using ACM Private CA.</p> </note>
      operationId: IssueCertificate
      parameters:
        - enum:
            - ACMPrivateCA.IssueCertificate
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/IssueCertificateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IssueCertificateResponse'
        '480':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '483':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '484':
          description: InvalidArgsException
          schema:
            $ref: '#/definitions/InvalidArgsException'
        '485':
          description: MalformedCSRException
          schema:
            $ref: '#/definitions/MalformedCSRException'
  /#X-Amz-Target=ACMPrivateCA.ListCertificateAuthorities:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Lists the private certificate authorities that you created by using the
        <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a>
        action.
      operationId: ListCertificateAuthorities
      parameters:
        - description: Pagination limit
          in: query
          name: MaxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: NextToken
          required: false
          type: string
        - enum:
            - ACMPrivateCA.ListCertificateAuthorities
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListCertificateAuthoritiesRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListCertificateAuthoritiesResponse'
        '480':
          description: InvalidNextTokenException
          schema:
            $ref: '#/definitions/InvalidNextTokenException'
  /#X-Amz-Target=ACMPrivateCA.ListPermissions:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>List all permissions on a private CA, if any, granted to the AWS
        Certificate Manager (ACM) service principal (acm.amazonaws.com). </p>
        <p>These permissions allow ACM to issue and renew ACM certificates that
        reside in the same AWS account as the CA. </p> <p>Permissions can be
        granted with the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreatePermission.html">CreatePermission</a>
        action and revoked with the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeletePermission.html">DeletePermission</a>
        action.</p> <p class="title"> <b>About Permissions</b> </p> <ul> <li>
        <p>If the private CA and the certificates it issues reside in the same
        account, you can use <code>CreatePermission</code> to grant permissions
        for ACM to carry out automatic certificate renewals.</p> </li> <li>
        <p>For automatic certificate renewal to succeed, the ACM service
        principal needs permissions to create, retrieve, and list
        certificates.</p> </li> <li> <p>If the private CA and the ACM
        certificates reside in different accounts, then permissions cannot be
        used to enable automatic renewals. Instead, the ACM certificate owner
        must set up a resource-based policy to enable cross-account issuance and
        renewals. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-rbp.html">Using
        a Resource Based Policy with ACM Private CA</a>.</p> </li> </ul>
      operationId: ListPermissions
      parameters:
        - description: Pagination limit
          in: query
          name: MaxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: NextToken
          required: false
          type: string
        - enum:
            - ACMPrivateCA.ListPermissions
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListPermissionsRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListPermissionsResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidNextTokenException
          schema:
            $ref: '#/definitions/InvalidNextTokenException'
        '483':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '484':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
  /#X-Amz-Target=ACMPrivateCA.ListTags:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Lists the tags, if any, that are associated with your private CA or one
        that has been shared with you. Tags are labels that you can use to
        identify and organize your CAs. Each tag consists of a key and an
        optional value. Call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_TagCertificateAuthority.html">TagCertificateAuthority</a>
        action to add one or more tags to your CA. Call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UntagCertificateAuthority.html">UntagCertificateAuthority</a>
        action to remove tags. 
      operationId: ListTags
      parameters:
        - description: Pagination limit
          in: query
          name: MaxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: NextToken
          required: false
          type: string
        - enum:
            - ACMPrivateCA.ListTags
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListTagsRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
  /#X-Amz-Target=ACMPrivateCA.PutPolicy:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Attaches a resource-based policy to a private CA. </p> <p>A policy
        can also be applied by sharing a private CA through AWS Resource Access
        Manager (RAM). For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-ram.html">Attach
        a Policy for Cross-Account Access</a>.</p> <p>The policy can be
        displayed with <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetPolicy.html">GetPolicy</a>
        and removed with <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeletePolicy.html">DeletePolicy</a>.</p>
        <p class="title"> <b>About Policies</b> </p> <ul> <li> <p>A policy
        grants access on a private CA to an AWS customer account, to AWS
        Organizations, or to an AWS Organizations unit. Policies are under the
        control of a CA administrator. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-rbp.html">Using
        a Resource Based Policy with ACM Private CA</a>.</p> </li> <li> <p>A
        policy permits a user of AWS Certificate Manager (ACM) to issue ACM
        certificates signed by a CA in another account.</p> </li> <li> <p>For
        ACM to manage automatic renewal of these certificates, the ACM user must
        configure a Service Linked Role (SLR). The SLR allows the ACM service to
        assume the identity of the user, subject to confirmation against the ACM
        Private CA policy. For more information, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html">Using
        a Service Linked Role with ACM</a>.</p> </li> <li> <p>Updates made in
        AWS Resource Manager (RAM) are reflected in policies. For more
        information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/pca-ram.html">Attach
        a Policy for Cross-Account Access</a>.</p> </li> </ul>
      operationId: PutPolicy
      parameters:
        - enum:
            - ACMPrivateCA.PutPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutPolicyRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '483':
          description: InvalidPolicyException
          schema:
            $ref: '#/definitions/InvalidPolicyException'
        '484':
          description: LockoutPreventedException
          schema:
            $ref: '#/definitions/LockoutPreventedException'
        '485':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
        '486':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#X-Amz-Target=ACMPrivateCA.RestoreCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Restores a certificate authority (CA) that is in the
        <code>DELETED</code> state. You can restore a CA during the period that
        you defined in the <b>PermanentDeletionTimeInDays</b> parameter of the
        <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeleteCertificateAuthority.html">DeleteCertificateAuthority</a>
        action. Currently, you can specify 7 to 30 days. If you did not specify
        a <b>PermanentDeletionTimeInDays</b> value, by default you can restore
        the CA at any time in a 30 day period. You can check the time remaining
        in the restoration period of a private CA in the <code>DELETED</code>
        state by calling the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DescribeCertificateAuthority.html">DescribeCertificateAuthority</a>
        or <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListCertificateAuthorities.html">ListCertificateAuthorities</a>
        actions. The status of a restored CA is set to its pre-deletion status
        when the <b>RestoreCertificateAuthority</b> action returns. To change
        its status to <code>ACTIVE</code>, call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UpdateCertificateAuthority.html">UpdateCertificateAuthority</a>
        action. If the private CA was in the <code>PENDING_CERTIFICATE</code>
        state at deletion, you must use the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html">ImportCertificateAuthorityCertificate</a>
        action to import a certificate authority into the private CA before it
        can be activated. You cannot restore a CA after the restoration period
        has ended.
      operationId: RestoreCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.RestoreCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RestoreCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '482':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
  /#X-Amz-Target=ACMPrivateCA.RevokeCertificate:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Revokes a certificate that was issued inside ACM Private CA. If you
        enable a certificate revocation list (CRL) when you create or update
        your private CA, information about the revoked certificates will be
        included in the CRL. ACM Private CA writes the CRL to an S3 bucket that
        you specify. A CRL is typically updated approximately 30 minutes after a
        certificate is revoked. If for any reason the CRL update fails, ACM
        Private CA attempts makes further attempts every 15 minutes. With Amazon
        CloudWatch, you can create alarms for the metrics
        <code>CRLGenerated</code> and <code>MisconfiguredCRLBucket</code>. For
        more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaCloudWatch.html">Supported
        CloudWatch Metrics</a>.</p> <note> <p>Both PCA and the IAM principal
        must have permission to write to the S3 bucket that you specify. If the
        IAM principal making the call does not have permission to write to the
        bucket, then an exception is thrown. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaAuthAccess.html">Configure
        Access to ACM Private CA</a>.</p> </note> <p>ACM Private CA also writes
        revocation information to the audit report. For more information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html">CreateCertificateAuthorityAuditReport</a>.</p>
        <note> <p>You cannot revoke a root CA self-signed certificate.</p>
        </note>
      operationId: RevokeCertificate
      parameters:
        - enum:
            - ACMPrivateCA.RevokeCertificate
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RevokeCertificateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '483':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: RequestAlreadyProcessedException
          schema:
            $ref: '#/definitions/RequestAlreadyProcessedException'
        '487':
          description: RequestInProgressException
          schema:
            $ref: '#/definitions/RequestInProgressException'
        '488':
          description: RequestFailedException
          schema:
            $ref: '#/definitions/RequestFailedException'
  /#X-Amz-Target=ACMPrivateCA.TagCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Adds one or more tags to your private CA. Tags are labels that you can
        use to identify and organize your AWS resources. Each tag consists of a
        key and an optional value. You specify the private CA on input by its
        Amazon Resource Name (ARN). You specify the tag by using a key-value
        pair. You can apply a tag to just one private CA if you want to identify
        a specific characteristic of that CA, or you can apply the same tag to
        multiple private CAs if you want to filter for a common relationship
        among those CAs. To remove one or more tags, use the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_UntagCertificateAuthority.html">UntagCertificateAuthority</a>
        action. Call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListTags.html">ListTags</a>
        action to see what tags are associated with your CA. 
      operationId: TagCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.TagCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TagCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '483':
          description: InvalidTagException
          schema:
            $ref: '#/definitions/InvalidTagException'
        '484':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
  /#X-Amz-Target=ACMPrivateCA.UntagCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Remove one or more tags from your private CA. A tag consists of a
        key-value pair. If you do not specify the value portion of the tag when
        calling this action, the tag will be removed regardless of value. If you
        specify a value, the tag is removed only if it is associated with the
        specified value. To add tags to a private CA, use the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_TagCertificateAuthority.html">TagCertificateAuthority</a>.
        Call the <a
        href="https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ListTags.html">ListTags</a>
        action to see what tags are associated with your CA. 
      operationId: UntagCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.UntagCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UntagCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '482':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '483':
          description: InvalidTagException
          schema:
            $ref: '#/definitions/InvalidTagException'
  /#X-Amz-Target=ACMPrivateCA.UpdateCertificateAuthority:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Updates the status or configuration of a private certificate
        authority (CA). Your private CA must be in the <code>ACTIVE</code> or
        <code>DISABLED</code> state before you can update it. You can disable a
        private CA that is in the <code>ACTIVE</code> state or make a CA that is
        in the <code>DISABLED</code> state active again.</p> <note> <p>Both PCA
        and the IAM principal must have permission to write to the S3 bucket
        that you specify. If the IAM principal making the call does not have
        permission to write to the bucket, then an exception is thrown. For more
        information, see <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaAuthAccess.html">Configure
        Access to ACM Private CA</a>.</p> </note>
      operationId: UpdateCertificateAuthority
      parameters:
        - enum:
            - ACMPrivateCA.UpdateCertificateAuthority
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCertificateAuthorityRequest'
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidArgsException
          schema:
            $ref: '#/definitions/InvalidArgsException'
        '483':
          description: InvalidArnException
          schema:
            $ref: '#/definitions/InvalidArnException'
        '484':
          description: InvalidStateException
          schema:
            $ref: '#/definitions/InvalidStateException'
        '485':
          description: InvalidPolicyException
          schema:
            $ref: '#/definitions/InvalidPolicyException'
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string
x-hasEquivalentPaths: true

