basePath: /
definitions:
  AccessDeniedException: {}
  ActiveContext:
    description: >-
      <p>Contains information about the contexts that a user is using in a
      session. You can configure Amazon Lex V2 to set a context when an intent
      is fulfilled, or you can set a context using the , , or operations.</p>
      <p>Use a context to indicate to Amazon Lex V2 intents that should be used
      as follow-up intents. For example, if the active context is
      <code>order-fulfilled</code>, only intents that have
      <code>order-fulfilled</code> configured as a trigger are considered for
      follow up.</p>
    properties:
      contextAttributes:
        allOf:
          - $ref: '#/definitions/ActiveContextParametersMap'
          - description: >-
              <p>A lis tof contexts active for the request. A context can be
              activated when a previous intent is fulfilled, or by including the
              context in the request.</p> <p>If you don't specify a list of
              contexts, Amazon Lex will use the current list of contexts for the
              session. If you specify an empty list, all contexts for the
              session are cleared. </p>
      name:
        allOf:
          - $ref: '#/definitions/ActiveContextName'
          - description: The name of the context.
      timeToLive:
        allOf:
          - $ref: '#/definitions/ActiveContextTimeToLive'
          - description: >-
              Indicates the number of turns or seconds that the context is
              active. Once the time to live expires, the context is no longer
              returned in a response.
    required:
      - name
      - timeToLive
      - contextAttributes
    type: object
  ActiveContextName:
    maxLength: 100
    minLength: 1
    pattern: '^([A-Za-z]_?)+$'
    type: string
  ActiveContextParametersMap:
    additionalProperties:
      $ref: '#/definitions/Text'
    maxProperties: 10
    minProperties: 0
    type: object
  ActiveContextTimeToLive:
    description: >-
      The time that a context is active. You can specify the time to live in
      seconds or in conversation turns.
    properties:
      timeToLiveInSeconds:
        allOf:
          - $ref: '#/definitions/ActiveContextTimeToLiveInSeconds'
          - description: >-
              The number of seconds that the context is active. You can specify
              between 5 and 86400 seconds (24 hours).
      turnsToLive:
        allOf:
          - $ref: '#/definitions/ActiveContextTurnsToLive'
          - description: >-
              The number of turns that the context is active. You can specify up
              to 20 turns. Each request and response from the bot is a turn.
    required:
      - timeToLiveInSeconds
      - turnsToLive
    type: object
  ActiveContextTimeToLiveInSeconds:
    maximum: 86400
    minimum: 5
    type: integer
  ActiveContextTurnsToLive:
    maximum: 20
    minimum: 1
    type: integer
  ActiveContextsList:
    items:
      $ref: '#/definitions/ActiveContext'
    maxItems: 20
    minItems: 0
    type: array
  AttachmentTitle:
    maxLength: 250
    minLength: 1
    type: string
  AttachmentUrl:
    maxLength: 250
    minLength: 1
    type: string
  BadGatewayException: {}
  BlobStream:
    type: string
  BotAliasIdentifier:
    type: string
  BotIdentifier:
    maxLength: 10
    minLength: 10
    pattern: '^[0-9a-zA-Z]+$'
    type: string
  Button:
    description: A button that appears on a response card show to the user.
    properties:
      text:
        allOf:
          - $ref: '#/definitions/ButtonText'
          - description: The text that is displayed on the button.
      value:
        allOf:
          - $ref: '#/definitions/ButtonValue'
          - description: >-
              The value returned to Amazon Lex V2 when a user chooses the
              button.
    required:
      - text
      - value
    type: object
  ButtonText:
    maxLength: 50
    minLength: 1
    type: string
  ButtonValue:
    maxLength: 50
    minLength: 1
    type: string
  ButtonsList:
    items:
      $ref: '#/definitions/Button'
    maxItems: 5
    minItems: 0
    type: array
  ConfidenceScore:
    description: >-
      Provides a score that indicates the confidence that Amazon Lex V2 has that
      an intent is the one that satisfies the user's intent.
    properties:
      score:
        allOf:
          - $ref: '#/definitions/Double'
          - description: >-
              A score that indicates how confident Amazon Lex V2 is that an
              intent satisfies the user's intent. Ranges between 0.00 and 1.00.
              Higher scores indicate higher confidence.
    type: object
  ConfirmationState:
    enum:
      - Confirmed
      - Denied
      - None
    type: string
  ConflictException: {}
  DeleteSessionRequest:
    properties: {}
    title: DeleteSessionRequest
    type: object
  DeleteSessionResponse:
    properties:
      botAliasId:
        allOf:
          - $ref: '#/definitions/BotAliasIdentifier'
          - description: >-
              The alias identifier in use for the bot that contained the session
              data.
      botId:
        allOf:
          - $ref: '#/definitions/BotIdentifier'
          - description: The identifier of the bot that contained the session data.
      localeId:
        allOf:
          - $ref: '#/definitions/LocaleId'
          - description: The locale where the session was used.
      sessionId:
        allOf:
          - $ref: '#/definitions/SessionId'
          - description: The identifier of the deleted session.
    type: object
  DependencyFailedException: {}
  DialogAction:
    description: The next action that Amazon Lex V2 should take.
    properties:
      slotToElicit:
        allOf:
          - $ref: '#/definitions/NonEmptyString'
          - description: The name of the slot that should be elicited from the user.
      type:
        allOf:
          - $ref: '#/definitions/DialogActionType'
          - description: >-
              <p>The next action that the bot should take in its interaction
              with the user. The possible values are:</p> <ul> <li> <p>
              <code>Close</code> - Indicates that there will not be a response
              from the user. For example, the statement "Your order has been
              placed" does not require a response.</p> </li> <li> <p>
              <code>ConfirmIntent</code> - The next action is asking the user if
              the intent is complete and ready to be fulfilled. This is a yes/no
              question such as "Place the order?"</p> </li> <li> <p>
              <code>Delegate</code> - The next action is determined by Amazon
              Lex V2.</p> </li> <li> <p> <code>ElicitSlot</code> - The next
              action is to elicit a slot value from the user.</p> </li> </ul>
    required:
      - type
    type: object
  DialogActionType:
    enum:
      - Close
      - ConfirmIntent
      - Delegate
      - ElicitIntent
      - ElicitSlot
    type: string
  Double:
    format: double
    type: number
  GetSessionRequest:
    properties: {}
    title: GetSessionRequest
    type: object
  GetSessionResponse:
    properties:
      interpretations:
        allOf:
          - $ref: '#/definitions/Interpretations'
          - description: >-
              <p>A list of intents that Amazon Lex V2 determined might satisfy
              the user's utterance. </p> <p>Each interpretation includes the
              intent, a score that indicates how confident Amazon Lex V2 is that
              the interpretation is the correct one, and an optional sentiment
              response that indicates the sentiment expressed in the
              utterance.</p>
      messages:
        allOf:
          - $ref: '#/definitions/Messages'
          - description: >-
              A list of messages that were last sent to the user. The messages
              are ordered based on the order that your returned the messages
              from your Lambda function or the order that messages are defined
              in the bot. 
      sessionId:
        allOf:
          - $ref: '#/definitions/NonEmptyString'
          - description: The identifier of the returned session.
      sessionState:
        allOf:
          - $ref: '#/definitions/SessionState'
          - description: >-
              <p>Represents the current state of the dialog between the user and
              the bot.</p> <p>You can use this to determine the progress of the
              conversation and what the next action might be.</p>
    type: object
  ImageResponseCard:
    description: >-
      <p>A card that is shown to the user by a messaging platform. You define
      the contents of the card, the card is displayed by the platform. </p>
      <p>When you use a response card, the response from the user is constrained
      to the text associated with a button on the card.</p>
    properties:
      buttons:
        allOf:
          - $ref: '#/definitions/ButtonsList'
          - description: >-
              A list of buttons that should be displayed on the response card.
              The arrangement of the buttons is determined by the platform that
              displays the button.
      imageUrl:
        allOf:
          - $ref: '#/definitions/AttachmentUrl'
          - description: >-
              The URL of an image to display on the response card. The image URL
              must be publicly available so that the platform displaying the
              response card has access to the image.
      subtitle:
        allOf:
          - $ref: '#/definitions/AttachmentTitle'
          - description: >-
              The subtitle to display on the response card. The format of the
              subtitle is determined by the platform displaying the response
              card.
      title:
        allOf:
          - $ref: '#/definitions/AttachmentTitle'
          - description: >-
              The title to display on the response card. The format of the title
              is determined by the platform displaying the response card.
    required:
      - title
    type: object
  Intent:
    description: The current intent that Amazon Lex V2 is attempting to fulfill.
    properties:
      confirmationState:
        allOf:
          - $ref: '#/definitions/ConfirmationState'
          - description: >-
              Contains information about whether fulfillment of the intent has
              been confirmed.
      name:
        allOf:
          - $ref: '#/definitions/NonEmptyString'
          - description: The name of the intent.
      slots:
        allOf:
          - $ref: '#/definitions/Slots'
          - description: >-
              A map of all of the slots for the intent. The name of the slot
              maps to the value of the slot. If a slot has not been filled, the
              value is null.
      state:
        allOf:
          - $ref: '#/definitions/IntentState'
          - description: 'Contains fulfillment information for the intent. '
    required:
      - name
    type: object
  IntentState:
    enum:
      - Failed
      - Fulfilled
      - InProgress
      - ReadyForFulfillment
      - Waiting
    type: string
  InternalServerException: {}
  Interpretation:
    description: >-
      An intent that Amazon Lex V2 determined might satisfy the user's
      utterance. The intents are ordered by the confidence score. 
    properties:
      intent:
        allOf:
          - $ref: '#/definitions/Intent'
          - description: >-
              A list of intents that might satisfy the user's utterance. The
              intents are ordered by the confidence score.
      nluConfidence:
        allOf:
          - $ref: '#/definitions/ConfidenceScore'
          - description: >-
              Determines the threshold where Amazon Lex V2 will insert the
              <code>AMAZON.FallbackIntent</code>,
              <code>AMAZON.KendraSearchIntent</code>, or both when returning
              alternative intents in a response.
              <code>AMAZON.FallbackIntent</code> and
              <code>AMAZON.KendraSearchIntent</code> are only inserted if they
              are configured for the bot.
      sentimentResponse:
        allOf:
          - $ref: '#/definitions/SentimentResponse'
          - description: >-
              <p>The sentiment expressed in an utterance. </p> <p>When the bot
              is configured to send utterances to Amazon Comprehend for
              sentiment analysis, this field contains the result of the
              analysis.</p>
    type: object
  Interpretations:
    items:
      $ref: '#/definitions/Interpretation'
    maxItems: 5
    type: array
  LocaleId:
    minLength: 1
    type: string
  Message:
    description: Container for text that is returned to the customer..
    properties:
      content:
        allOf:
          - $ref: '#/definitions/Text'
          - description: The text of the message.
      contentType:
        allOf:
          - $ref: '#/definitions/MessageContentType'
          - description: Indicates the type of response.
      imageResponseCard:
        $ref: '#/definitions/ImageResponseCard'
    required:
      - contentType
    type: object
  MessageContentType:
    enum:
      - CustomPayload
      - ImageResponseCard
      - PlainText
      - SSML
    type: string
  Messages:
    items:
      $ref: '#/definitions/Message'
    maxItems: 10
    type: array
  NonEmptyString:
    minLength: 1
    type: string
  ParameterName:
    maxLength: 100
    minLength: 1
    type: string
  PutSessionRequest:
    properties:
      messages:
        allOf:
          - $ref: '#/definitions/Messages'
          - description: >-
              A list of messages to send to the user. Messages are sent in the
              order that they are defined in the list.
      requestAttributes:
        allOf:
          - $ref: '#/definitions/StringMap'
          - description: >-
              <p>Request-specific information passed between Amazon Lex V2 and
              the client application.</p> <p>The namespace
              <code>x-amz-lex:</code> is reserved for special attributes. Don't
              create any request attributes with the prefix
              <code>x-amz-lex:</code>.</p>
      sessionState:
        allOf:
          - $ref: '#/definitions/SessionState'
          - description: >-
              Sets the state of the session with the user. You can use this to
              set the current intent, attributes, context, and dialog action.
              Use the dialog action to determine the next step that Amazon Lex
              V2 should use in the conversation with the user.
    required:
      - sessionState
    title: PutSessionRequest
    type: object
  PutSessionResponse:
    properties:
      audioStream:
        allOf:
          - $ref: '#/definitions/BlobStream'
          - description: >-
              If the requested content type was audio, the audio version of the
              message to convey to the user.
    type: object
  RecognizeTextRequest:
    properties:
      requestAttributes:
        allOf:
          - $ref: '#/definitions/StringMap'
          - description: >-
              <p>Request-specific information passed between the client
              application and Amazon Lex V2 </p> <p>The namespace
              <code>x-amz-lex:</code> is reserved for special attributes. Don't
              create any request attributes with the prefix
              <code>x-amz-lex:</code>.</p>
      sessionState:
        allOf:
          - $ref: '#/definitions/SessionState'
          - description: The current state of the dialog between the user and the bot.
      text:
        allOf:
          - $ref: '#/definitions/Text'
          - description: >-
              The text that the user entered. Amazon Lex V2 interprets this
              text.
    required:
      - text
    title: RecognizeTextRequest
    type: object
  RecognizeTextResponse:
    properties:
      interpretations:
        allOf:
          - $ref: '#/definitions/Interpretations'
          - description: >-
              <p>A list of intents that Amazon Lex V2 determined might satisfy
              the user's utterance. </p> <p>Each interpretation includes the
              intent, a score that indicates now confident Amazon Lex V2 is that
              the interpretation is the correct one, and an optional sentiment
              response that indicates the sentiment expressed in the
              utterance.</p>
      messages:
        allOf:
          - $ref: '#/definitions/Messages'
          - description: >-
              A list of messages last sent to the user. The messages are ordered
              based on the order that you returned the messages from your Lambda
              function or the order that the messages are defined in the bot.
      requestAttributes:
        allOf:
          - $ref: '#/definitions/StringMap'
          - description: The attributes sent in the request.
      sessionId:
        allOf:
          - $ref: '#/definitions/SessionId'
          - description: The identifier of the session in use.
      sessionState:
        allOf:
          - $ref: '#/definitions/SessionState'
          - description: >-
              <p>Represents the current state of the dialog between the user and
              the bot. </p> <p>Use this to determine the progress of the
              conversation and what the next action may be.</p>
    type: object
  RecognizeUtteranceRequest:
    properties:
      inputStream:
        allOf:
          - $ref: '#/definitions/BlobStream'
          - description: >-
              User input in PCM or Opus audio format or text format as described
              in the <code>requestContentType</code> parameter.
    title: RecognizeUtteranceRequest
    type: object
  RecognizeUtteranceResponse:
    properties:
      audioStream:
        allOf:
          - $ref: '#/definitions/BlobStream'
          - description: >-
              The prompt or statement to send to the user. This is based on the
              bot configuration and context. For example, if Amazon Lex V2 did
              not understand the user intent, it sends the
              <code>clarificationPrompt</code> configured for the bot. If the
              intent requires confirmation before taking the fulfillment action,
              it sends the <code>confirmationPrompt</code>. Another example:
              Suppose that the Lambda function successfully fulfilled the
              intent, and sent a message to convey to the user. Then Amazon Lex
              V2 sends that message in the response.
    type: object
  ResourceNotFoundException: {}
  SensitiveNonEmptyString:
    format: password
    type: string
  SentimentResponse:
    description: >-
      <p>Provides information about the sentiment expressed in a user's response
      in a conversation. Sentiments are determined using Amazon Comprehend.
      Sentiments are only returned if they are enabled for the bot.</p> <p>For
      more information, see <a
      href="https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html">
      Determine Sentiment </a> in the <i>Amazon Comprehend developer
      guide</i>.</p>
    properties:
      sentiment:
        allOf:
          - $ref: '#/definitions/SentimentType'
          - description: >-
              The overall sentiment expressed in the user's response. This is
              the sentiment most likely expressed by the user based on the
              analysis by Amazon Comprehend.
      sentimentScore:
        $ref: '#/definitions/SentimentScore'
    type: object
  SentimentScore:
    description: The individual sentiment responses for the utterance.
    properties:
      mixed:
        allOf:
          - $ref: '#/definitions/Double'
          - description: >-
              The level of confidence that Amazon Comprehend has in the accuracy
              of its detection of the <code>MIXED</code> sentiment.
      negative:
        allOf:
          - $ref: '#/definitions/Double'
          - description: >-
              The level of confidence that Amazon Comprehend has in the accuracy
              of its detection of the <code>NEGATIVE</code> sentiment.
      neutral:
        allOf:
          - $ref: '#/definitions/Double'
          - description: >-
              The level of confidence that Amazon Comprehend has in the accuracy
              of its detection of the <code>NEUTRAL</code> sentiment.
      positive:
        allOf:
          - $ref: '#/definitions/Double'
          - description: >-
              The level of confidence that Amazon Comprehend has in the accuracy
              of its detection of the <code>POSITIVE</code> sentiment.
    type: object
  SentimentType:
    enum:
      - MIXED
      - NEGATIVE
      - NEUTRAL
      - POSITIVE
    type: string
  SessionId:
    maxLength: 100
    minLength: 2
    pattern: '[0-9a-zA-Z._:-]+'
    type: string
  SessionState:
    description: The state of the user's session with Amazon Lex V2.
    properties:
      activeContexts:
        allOf:
          - $ref: '#/definitions/ActiveContextsList'
          - description: >-
              One or more contexts that indicate to Amazon Lex V2 the context of
              a request. When a context is active, Amazon Lex V2 considers
              intents with the matching context as a trigger as the next intent
              in a session.
      dialogAction:
        allOf:
          - $ref: '#/definitions/DialogAction'
          - description: >-
              The next step that Amazon Lex V2 should take in the conversation
              with a user.
      intent:
        allOf:
          - $ref: '#/definitions/Intent'
          - description: The active intent that Amazon Lex V2 is processing.
      originatingRequestId:
        allOf:
          - $ref: '#/definitions/NonEmptyString'
          - description: <p/>
      sessionAttributes:
        allOf:
          - $ref: '#/definitions/StringMap'
          - description: >-
              Map of key/value pairs representing session-specific context
              information. It contains application information passed between
              Amazon Lex V2 and a client application.
    type: object
  Shape:
    enum:
      - Scalar
      - List
    type: string
  Slot:
    description: 'A value that Amazon Lex V2 uses to fulfill an intent. '
    properties:
      value:
        allOf:
          - $ref: '#/definitions/Value'
          - description: The current value of the slot.
      values:
        allOf:
          - $ref: '#/definitions/Values'
          - description: >-
              A list of one or more values that the user provided for the slot.
              For example, if a for a slot that elicits pizza toppings, the
              values might be "pepperoni" and "pineapple." 
    type: object
  Slots:
    additionalProperties:
      $ref: '#/definitions/Slot'
    type: object
  String:
    type: string
  StringList:
    items:
      $ref: '#/definitions/NonEmptyString'
    type: array
  StringMap:
    additionalProperties:
      $ref: '#/definitions/String'
    type: object
  Text:
    format: password
    maxLength: 1024
    minLength: 1
    type: string
  ThrottlingException: {}
  ValidationException: {}
  Value:
    description: The value of a slot.
    properties:
      interpretedValue:
        allOf:
          - $ref: '#/definitions/NonEmptyString'
          - description: >-
              The value that Amazon Lex V2 determines for the slot. The actual
              value depends on the setting of the value selection strategy for
              the bot. You can choose to use the value entered by the user, or
              you can have Amazon Lex V2 choose the first value in the
              <code>resolvedValues</code> list.
      originalValue:
        allOf:
          - $ref: '#/definitions/NonEmptyString'
          - description: >-
              The text of the utterance from the user that was entered for the
              slot.
      resolvedValues:
        allOf:
          - $ref: '#/definitions/StringList'
          - description: >-
              A list of additional values that have been recognized for the
              slot.
    required:
      - interpretedValue
    type: object
  Values:
    items:
      $ref: '#/definitions/Slot'
    type: array
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/runtime-v2-lex/'
host: runtime-v2-lex.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: <p/>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: Amazon Lex Runtime V2
  version: '2020-08-07'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-aws-signingName: lex
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex.v2-2020-08-07.normal.json
      x-apisguru-driver: external
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: runtime.lex.v2
paths:
  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}':
    delete:
      description: >-
        <p>Removes session information for a specified bot, alias, and user ID.
        </p> <p>You can use this operation to restart a conversation with a bot.
        When you remove a session, the entire history of the session is removed
        so that you can start again.</p> <p>You don't need to delete a session.
        Sessions have a time limit and will expire. Set the session time limit
        when you create the bot. The default is 5 minutes, but you can specify
        anything between 1 minute and 24 hours.</p> <p>If you specify a bot or
        alias ID that doesn't exist, you receive a
        <code>BadRequestException.</code> </p> <p>If the locale doesn't exist in
        the bot, or if the locale hasn't been enables for the alias, you receive
        a <code>BadRequestException</code>.</p>
      operationId: DeleteSession
      parameters:
        - description: The identifier of the bot that contains the session data.
          in: path
          maxLength: 10
          minLength: 10
          name: botId
          pattern: '^[0-9a-zA-Z]+$'
          required: true
          type: string
        - description: >-
            The alias identifier in use for the bot that contains the session
            data.
          in: path
          name: botAliasId
          required: true
          type: string
        - description: The locale where the session is in use.
          in: path
          minLength: 1
          name: localeId
          required: true
          type: string
        - description: The identifier of the session to delete.
          in: path
          maxLength: 100
          minLength: 2
          name: sessionId
          pattern: '[0-9a-zA-Z._:-]+'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteSessionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '485':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
    get:
      description: >-
        <p>Returns session information for a specified bot, alias, and user.</p>
        <p>For example, you can use this operation to retrieve session
        information for a user that has left a long-running session in use.</p>
        <p>If the bot, alias, or session identifier doesn't exist, Amazon Lex V2
        returns a <code>BadRequestException</code>. If the locale doesn't exist
        or is not enabled for the alias, you receive a
        <code>BadRequestException</code>.</p>
      operationId: GetSession
      parameters:
        - description: The identifier of the bot that contains the session data.
          in: path
          maxLength: 10
          minLength: 10
          name: botId
          pattern: '^[0-9a-zA-Z]+$'
          required: true
          type: string
        - description: >-
            The alias identifier in use for the bot that contains the session
            data.
          in: path
          name: botAliasId
          required: true
          type: string
        - description: The locale where the session is in use.
          in: path
          minLength: 1
          name: localeId
          required: true
          type: string
        - description: The identifier of the session to return.
          in: path
          maxLength: 100
          minLength: 2
          name: sessionId
          pattern: '[0-9a-zA-Z._:-]+'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetSessionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Creates a new session or modifies an existing session with an Amazon Lex
        V2 bot. Use this operation to enable your application to set the state
        of the bot.
      operationId: PutSession
      parameters:
        - description: The identifier of the bot that receives the session data.
          in: path
          maxLength: 10
          minLength: 10
          name: botId
          pattern: '^[0-9a-zA-Z]+$'
          required: true
          type: string
        - description: The alias identifier of the bot that receives the session data.
          in: path
          name: botAliasId
          required: true
          type: string
        - description: The locale where the session is in use.
          in: path
          minLength: 1
          name: localeId
          required: true
          type: string
        - description: The identifier of the session that receives the session data.
          in: path
          maxLength: 100
          minLength: 2
          name: sessionId
          pattern: '[0-9a-zA-Z._:-]+'
          required: true
          type: string
        - description: >-
            <p>The message that Amazon Lex V2 returns in the response can be
            either text or speech depending on the value of this parameter. </p>
            <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>,
            Amazon Lex V2 returns text in the response.</p> </li> </ul>
          in: header
          minLength: 1
          name: ResponseContentType
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              messages:
                description: >-
                  A list of messages to send to the user. Messages are sent in
                  the order that they are defined in the list.
                items:
                  $ref: '#/definitions/Message'
                maxItems: 10
                type: array
              requestAttributes:
                additionalProperties:
                  $ref: '#/definitions/String'
                description: >-
                  <p>Request-specific information passed between Amazon Lex V2
                  and the client application.</p> <p>The namespace
                  <code>x-amz-lex:</code> is reserved for special attributes.
                  Don't create any request attributes with the prefix
                  <code>x-amz-lex:</code>.</p>
                type: object
              sessionState:
                description: The state of the user's session with Amazon Lex V2.
                properties:
                  activeContexts:
                    allOf:
                      - $ref: '#/definitions/ActiveContextsList'
                      - description: >-
                          One or more contexts that indicate to Amazon Lex V2
                          the context of a request. When a context is active,
                          Amazon Lex V2 considers intents with the matching
                          context as a trigger as the next intent in a session.
                  dialogAction:
                    allOf:
                      - $ref: '#/definitions/DialogAction'
                      - description: >-
                          The next step that Amazon Lex V2 should take in the
                          conversation with a user.
                  intent:
                    allOf:
                      - $ref: '#/definitions/Intent'
                      - description: The active intent that Amazon Lex V2 is processing.
                  originatingRequestId:
                    allOf:
                      - $ref: '#/definitions/NonEmptyString'
                      - description: <p/>
                  sessionAttributes:
                    allOf:
                      - $ref: '#/definitions/StringMap'
                      - description: >-
                          Map of key/value pairs representing session-specific
                          context information. It contains application
                          information passed between Amazon Lex V2 and a client
                          application.
                type: object
            required:
              - sessionState
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutSessionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '485':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '486':
          description: DependencyFailedException
          schema:
            $ref: '#/definitions/DependencyFailedException'
        '487':
          description: BadGatewayException
          schema:
            $ref: '#/definitions/BadGatewayException'
  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Sends user input to Amazon Lex V2. Client applications use this API
        to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then
        interprets the user input using the machine learning model that it build
        for the bot.</p> <p>In response, Amazon Lex V2 returns the next message
        to convey to the user and an optional response card to display.</p>
      operationId: RecognizeText
      parameters:
        - description: The identifier of the bot that processes the request.
          in: path
          maxLength: 10
          minLength: 10
          name: botId
          pattern: '^[0-9a-zA-Z]+$'
          required: true
          type: string
        - description: The alias identifier in use for the bot that processes the request.
          in: path
          name: botAliasId
          required: true
          type: string
        - description: The locale where the session is in use.
          in: path
          minLength: 1
          name: localeId
          required: true
          type: string
        - description: The identifier of the user session that is having the conversation.
          in: path
          maxLength: 100
          minLength: 2
          name: sessionId
          pattern: '[0-9a-zA-Z._:-]+'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              requestAttributes:
                additionalProperties:
                  $ref: '#/definitions/String'
                description: >-
                  <p>Request-specific information passed between the client
                  application and Amazon Lex V2 </p> <p>The namespace
                  <code>x-amz-lex:</code> is reserved for special attributes.
                  Don't create any request attributes with the prefix
                  <code>x-amz-lex:</code>.</p>
                type: object
              sessionState:
                description: The state of the user's session with Amazon Lex V2.
                properties:
                  activeContexts:
                    allOf:
                      - $ref: '#/definitions/ActiveContextsList'
                      - description: >-
                          One or more contexts that indicate to Amazon Lex V2
                          the context of a request. When a context is active,
                          Amazon Lex V2 considers intents with the matching
                          context as a trigger as the next intent in a session.
                  dialogAction:
                    allOf:
                      - $ref: '#/definitions/DialogAction'
                      - description: >-
                          The next step that Amazon Lex V2 should take in the
                          conversation with a user.
                  intent:
                    allOf:
                      - $ref: '#/definitions/Intent'
                      - description: The active intent that Amazon Lex V2 is processing.
                  originatingRequestId:
                    allOf:
                      - $ref: '#/definitions/NonEmptyString'
                      - description: <p/>
                  sessionAttributes:
                    allOf:
                      - $ref: '#/definitions/StringMap'
                      - description: >-
                          Map of key/value pairs representing session-specific
                          context information. It contains application
                          information passed between Amazon Lex V2 and a client
                          application.
                type: object
              text:
                description: >-
                  The text that the user entered. Amazon Lex V2 interprets this
                  text.
                format: password
                maxLength: 1024
                minLength: 1
                type: string
            required:
              - text
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RecognizeTextResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '485':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '486':
          description: DependencyFailedException
          schema:
            $ref: '#/definitions/DependencyFailedException'
        '487':
          description: BadGatewayException
          schema:
            $ref: '#/definitions/BadGatewayException'
  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance#Content-Type':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Sends user input to Amazon Lex V2. You can send text or speech.
        Clients use this API to send text and audio requests to Amazon Lex V2 at
        runtime. Amazon Lex V2 interprets the user input using the machine
        learning model built for the bot.</p> <p>The following request fields
        must be compressed with gzip and then base64 encoded before you send
        them to Amazon Lex V2. </p> <ul> <li> <p>requestAttributes</p> </li>
        <li> <p>sessionState</p> </li> </ul> <p>The following response fields
        are compressed using gzip and then base64 encoded by Amazon Lex V2.
        Before you can use these fields, you must decode and decompress them.
        </p> <ul> <li> <p>inputTranscript</p> </li> <li> <p>interpretations</p>
        </li> <li> <p>messages</p> </li> <li> <p>requestAttributes</p> </li>
        <li> <p>sessionState</p> </li> </ul> <p>The example contains a Java
        application that compresses and encodes a Java object to send to Amazon
        Lex V2, and a second that decodes and decompresses a response from
        Amazon Lex V2.</p>
      operationId: RecognizeUtterance
      parameters:
        - description: The identifier of the bot that should receive the request.
          in: path
          maxLength: 10
          minLength: 10
          name: botId
          pattern: '^[0-9a-zA-Z]+$'
          required: true
          type: string
        - description: >-
            The alias identifier in use for the bot that should receive the
            request.
          in: path
          name: botAliasId
          required: true
          type: string
        - description: The locale where the session is in use.
          in: path
          minLength: 1
          name: localeId
          required: true
          type: string
        - description: The identifier of the session in use.
          in: path
          maxLength: 100
          minLength: 2
          name: sessionId
          pattern: '[0-9a-zA-Z._:-]+'
          required: true
          type: string
        - description: >-
            <p>Sets the state of the session with the user. You can use this to
            set the current intent, attributes, context, and dialog action. Use
            the dialog action to determine the next step that Amazon Lex V2
            should use in the conversation with the user.</p> <p>The
            <code>sessionState</code> field must be compressed using gzip and
            then base64 encoded before sending to Amazon Lex V2.</p>
          format: password
          in: header
          name: x-amz-lex-session-state
          required: false
          type: string
        - description: >-
            <p>Request-specific information passed between the client
            application and Amazon Lex V2 </p> <p>The namespace
            <code>x-amz-lex:</code> is reserved for special attributes. Don't
            create any request attributes for prefix
            <code>x-amz-lex:</code>.</p> <p>The <code>requestAttributes</code>
            field must be compressed using gzip and then base64 encoded before
            sending to Amazon Lex V2.</p>
          format: password
          in: header
          name: x-amz-lex-request-attributes
          required: false
          type: string
        - description: >-
            <p>Indicates the format for audio input or that the content is text.
            The header must start with one of the following prefixes:</p> <ul>
            <li> <p>PCM format, audio data must be in little-endian byte
            order.</p> <ul> <li> <p>audio/l16; rate=16000; channels=1</p> </li>
            <li> <p>audio/x-l16; sample-rate=16000; channel-count=1</p> </li>
            <li> <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;
            channel-count=1; is-big-endian=false</p> </li> </ul> </li> <li>
            <p>Opus format</p> <ul> <li>
            <p>audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4</p>
            </li> </ul> </li> <li> <p>Text format</p> <ul> <li> <p>text/plain;
            charset=utf-8</p> </li> </ul> </li> </ul>
          in: header
          minLength: 1
          name: Content-Type
          required: true
          type: string
        - description: >-
            <p>The message that Amazon Lex V2 returns in the response can be
            either text or speech based on the <code>responseContentType</code>
            value.</p> <ul> <li> <p>If the value is
            <code>text/plain;charset=utf-8</code>, Amazon Lex V2 returns text in
            the response.</p> </li> <li> <p>If the value begins with
            <code>audio/</code>, Amazon Lex V2 returns speech in the response.
            Amazon Lex V2 uses Amazon Polly to generate the speech using the
            configuration that you specified in the
            <code>requestContentType</code> parameter. For example, if you
            specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns
            speech in the MPEG format.</p> </li> <li> <p>If the value is
            <code>audio/pcm</code>, the speech returned is
            <code>audio/pcm</code> at 16 KHz in 16-bit, little-endian
            format.</p> </li> <li> <p>The following are the accepted values:</p>
            <ul> <li> <p>audio/mpeg</p> </li> <li> <p>audio/ogg</p> </li> <li>
            <p>audio/pcm (16 KHz)</p> </li> <li> <p>audio/* (defaults to
            mpeg)</p> </li> <li> <p>text/plain; charset=utf-8</p> </li> </ul>
            </li> </ul>
          in: header
          minLength: 1
          name: Response-Content-Type
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              inputStream:
                description: >-
                  User input in PCM or Opus audio format or text format as
                  described in the <code>requestContentType</code> parameter.
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RecognizeUtteranceResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '485':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '486':
          description: DependencyFailedException
          schema:
            $ref: '#/definitions/DependencyFailedException'
        '487':
          description: BadGatewayException
          schema:
            $ref: '#/definitions/BadGatewayException'
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string

