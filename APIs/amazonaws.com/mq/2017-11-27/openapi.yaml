basePath: /
definitions:
  AuthenticationStrategy:
    description: >-
      Optional. The authentication strategy used to secure the broker. The
      default is SIMPLE.
    enum:
      - SIMPLE
      - LDAP
    type: string
  AvailabilityZone:
    description: Name of the availability zone.
    properties:
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Id for the availability zone.
            xml:
              name: name
    type: object
  BadRequestException: {}
  BrokerEngineType:
    description: Types of broker engines.
    properties:
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: The broker's engine type.
            xml:
              name: engineType
      EngineVersions:
        allOf:
          - $ref: '#/definitions/__listOfEngineVersion'
          - description: The list of engine versions.
            xml:
              name: engineVersions
    type: object
  BrokerInstance:
    description: Returns information about all brokers.
    properties:
      ConsoleURL:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The brokers web console URL.
            xml:
              name: consoleURL
      Endpoints:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: The broker's wire-level protocol endpoints.
            xml:
              name: endpoints
      IpAddress:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The IP address of the Elastic Network Interface (ENI) attached to
              the broker. Does not apply to RabbitMQ brokers.
            xml:
              name: ipAddress
    type: object
  BrokerInstanceOption:
    description: Option for host instance type.
    properties:
      AvailabilityZones:
        allOf:
          - $ref: '#/definitions/__listOfAvailabilityZone'
          - description: The list of available az.
            xml:
              name: availabilityZones
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: The broker's engine type.
            xml:
              name: engineType
      HostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The broker's instance type.
            xml:
              name: hostInstanceType
      StorageType:
        allOf:
          - $ref: '#/definitions/BrokerStorageType'
          - description: The broker's storage type.
            xml:
              name: storageType
      SupportedDeploymentModes:
        allOf:
          - $ref: '#/definitions/__listOfDeploymentMode'
          - description: The list of supported deployment modes.
            xml:
              name: supportedDeploymentModes
      SupportedEngineVersions:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: The list of supported engine versions.
            xml:
              name: supportedEngineVersions
    type: object
  BrokerState:
    description: The broker's status.
    enum:
      - CREATION_IN_PROGRESS
      - CREATION_FAILED
      - DELETION_IN_PROGRESS
      - RUNNING
      - REBOOT_IN_PROGRESS
    type: string
  BrokerStorageType:
    description: >-
      <p>The broker's storage type.</p> <important><p>EFS is not supported for
      RabbitMQ engine type.</p></important>
    enum:
      - EBS
      - EFS
    type: string
  BrokerSummary:
    description: Returns information about all brokers.
    properties:
      BrokerArn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The broker's Amazon Resource Name (ARN).
            xml:
              name: brokerArn
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
      BrokerName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker's name. This value is unique in your AWS account, 1-50
              characters long, and containing only letters, numbers, dashes, and
              underscores, and must not contain white spaces, brackets, wildcard
              characters, or special characters.
            xml:
              name: brokerName
      BrokerState:
        allOf:
          - $ref: '#/definitions/BrokerState'
          - description: The broker's status.
            xml:
              name: brokerState
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: The time when the broker was created.
            xml:
              name: created
      DeploymentMode:
        allOf:
          - $ref: '#/definitions/DeploymentMode'
          - description: The broker's deployment mode.
            xml:
              name: deploymentMode
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: The type of broker engine.
            xml:
              name: engineType
      HostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The broker's instance type.
            xml:
              name: hostInstanceType
    required:
      - DeploymentMode
      - EngineType
    type: object
  ChangeType:
    description: The type of change pending for the ActiveMQ user.
    enum:
      - CREATE
      - UPDATE
      - DELETE
    type: string
  Configuration:
    description: Returns information about all configurations.
    properties:
      Arn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The ARN of the configuration.
            xml:
              name: arn
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: Required. The date and time of the configuration revision.
            xml:
              name: created
      Description:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The description of the configuration.
            xml:
              name: description
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: >-
              Required. The type of broker engine. Currently, Amazon MQ supports
              ACTIVEMQ and RABBITMQ.
            xml:
              name: engineType
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The broker engine's version. For a list of supported
              engine versions, see, <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      Id:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
      LatestRevision:
        allOf:
          - $ref: '#/definitions/ConfigurationRevision'
          - description: Required. The latest revision of the configuration.
            xml:
              name: latestRevision
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The name of the configuration. This value can contain
              only alphanumeric characters, dashes, periods, underscores, and
              tildes (- . _ ~). This value must be 1-150 characters long.
            xml:
              name: name
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: The list of all tags associated with this configuration.
            xml:
              name: tags
    required:
      - Description
      - EngineVersion
      - LatestRevision
      - AuthenticationStrategy
      - EngineType
      - Id
      - Arn
      - Name
      - Created
    type: object
  ConfigurationId:
    description: >-
      <p>A list of information about the configuration.</p> <important><p>Does
      not apply to RabbitMQ brokers.</p></important>
    properties:
      Id:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
      Revision:
        allOf:
          - $ref: '#/definitions/__integer'
          - description: The revision number of the configuration.
            xml:
              name: revision
    required:
      - Id
    type: object
  ConfigurationRevision:
    description: Returns information about the specified configuration revision.
    properties:
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: Required. The date and time of the configuration revision.
            xml:
              name: created
      Description:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The description of the configuration revision.
            xml:
              name: description
      Revision:
        allOf:
          - $ref: '#/definitions/__integer'
          - description: Required. The revision number of the configuration.
            xml:
              name: revision
    required:
      - Revision
      - Created
    type: object
  Configurations:
    description: Broker configuration information
    properties:
      Current:
        allOf:
          - $ref: '#/definitions/ConfigurationId'
          - description: The broker's current configuration.
            xml:
              name: current
      History:
        allOf:
          - $ref: '#/definitions/__listOfConfigurationId'
          - description: The history of configurations applied to the broker.
            xml:
              name: history
      Pending:
        allOf:
          - $ref: '#/definitions/ConfigurationId'
          - description: The broker's pending configuration.
            xml:
              name: pending
    type: object
  ConflictException: {}
  CreateBrokerRequest:
    description: Creates a broker using the specified properties.
    properties:
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy used to secure the broker.
              The default is SIMPLE.
            xml:
              name: authenticationStrategy
      AutoMinorVersionUpgrade:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables automatic upgrades to new minor versions for brokers, as
              new versions are released and supported by Amazon MQ. Automatic
              upgrades occur during the scheduled maintenance window of the
              broker or after a manual broker reboot. Set to true by default, if
              no value is specified.
            xml:
              name: autoMinorVersionUpgrade
      BrokerName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The broker's name. This value must be unique in your AWS
              account, 1-50 characters long, must contain only letters, numbers,
              dashes, and underscores, and must not contain white spaces,
              brackets, wildcard characters, or special characters.
            xml:
              name: brokerName
      Configuration:
        allOf:
          - $ref: '#/definitions/ConfigurationId'
          - description: A list of information about the configuration.
            xml:
              name: configuration
      CreatorRequestId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The unique ID that the requester receives for the created broker.
              Amazon MQ passes your ID with the API action. Note: We recommend
              using a Universally Unique Identifier (UUID) for the
              creatorRequestId. You may omit the creatorRequestId if your
              application doesn't require idempotency.
            xml:
              name: creatorRequestId
      DeploymentMode:
        allOf:
          - $ref: '#/definitions/DeploymentMode'
          - description: Required. The broker's deployment mode.
            xml:
              name: deploymentMode
      EncryptionOptions:
        allOf:
          - $ref: '#/definitions/EncryptionOptions'
          - description: >-
              Encryption options for the broker. Does not apply to RabbitMQ
              brokers.
            xml:
              name: encryptionOptions
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: >-
              Required. The type of broker engine. Currently, Amazon MQ supports
              ACTIVEMQ and RABBITMQ.
            xml:
              name: engineType
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The broker engine's version. For a list of supported
              engine versions, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      HostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The broker's instance type.
            xml:
              name: hostInstanceType
      LdapServerMetadata:
        allOf:
          - $ref: '#/definitions/LdapServerMetadataInput'
          - description: >-
              Optional. The metadata of the LDAP server used to authenticate and
              authorize connections to the broker. Does not apply to RabbitMQ
              brokers.
            xml:
              name: ldapServerMetadata
      Logs:
        allOf:
          - $ref: '#/definitions/Logs'
          - description: Enables Amazon CloudWatch logging for brokers.
            xml:
              name: logs
      MaintenanceWindowStartTime:
        allOf:
          - $ref: '#/definitions/WeeklyStartTime'
          - description: The parameters that determine the WeeklyStartTime.
            xml:
              name: maintenanceWindowStartTime
      PubliclyAccessible:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables connections from applications outside of the VPC that
              hosts the broker's subnets. Set to false by default, if no value
              is provided.
            xml:
              name: publiclyAccessible
      SecurityGroups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of rules (1 minimum, 125 maximum) that authorize
              connections to brokers.
            xml:
              name: securityGroups
      StorageType:
        allOf:
          - $ref: '#/definitions/BrokerStorageType'
          - description: The broker's storage type.
            xml:
              name: storageType
      SubnetIds:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              <p>The list of groups that define which subnets and IP ranges the
              broker can use from different Availability Zones. If you specify
              more than one subnet, the subnets must be in different
              Availability Zones. Amazon MQ will not be able to create VPC
              endpoints for your broker with multiple subnets in the same
              Availability Zone. A SINGLE_INSTANCE deployment requires one
              subnet (for example, the default subnet). An
              ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires
              two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment
              has no subnet requirements when deployed with public
              accessibility. Deployment without public accessibility requires at
              least one subnet.</p> <important><p>If you specify subnets in a <a
              href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared
              VPC</a> for a RabbitMQ broker, the associated VPC to which the
              specified subnets belong must be owned by your AWS account. Amazon
              MQ will not be able to create VPC endpoints in VPCs that are not
              owned by your AWS account.</p></important>
            xml:
              name: subnetIds
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: Create tags when creating the broker.
            xml:
              name: tags
      Users:
        allOf:
          - $ref: '#/definitions/__listOfUser'
          - description: >-
              <p>Required. The list of broker users (persons or applications)
              who can access queues and topics. This value can contain only
              alphanumeric characters, dashes, periods, underscores, and tildes
              (- . _ ~). This value must be 2-100 characters long.</p>
              <important><title>Amazon MQ for RabbitMQ</title> <p>When you
              create an Amazon MQ for RabbitMQ broker, one and only one
              administrative user is accepted and created when a broker is first
              provisioned. All subsequent broker users are created by making
              RabbitMQ API calls directly to brokers or via the RabbitMQ web
              console.</p></important>
            xml:
              name: users
    required:
      - EngineVersion
      - HostInstanceType
      - AutoMinorVersionUpgrade
      - Users
      - BrokerName
      - DeploymentMode
      - EngineType
      - PubliclyAccessible
    title: CreateBrokerRequest
    type: object
  CreateBrokerResponse:
    properties:
      BrokerArn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The broker's Amazon Resource Name (ARN).
            xml:
              name: brokerArn
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
    type: object
  CreateConfigurationRequest:
    description: >-
      Creates a new configuration for the specified configuration name. Amazon
      MQ uses the default configuration (the engine type and version).
    properties:
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: >-
              Required. The type of broker engine. Currently, Amazon MQ supports
              ACTIVEMQ and RABBITMQ.
            xml:
              name: engineType
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The broker engine's version. For a list of supported
              engine versions, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The name of the configuration. This value can contain
              only alphanumeric characters, dashes, periods, underscores, and
              tildes (- . _ ~). This value must be 1-150 characters long.
            xml:
              name: name
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: Create tags when creating the configuration.
            xml:
              name: tags
    required:
      - EngineVersion
      - EngineType
      - Name
    title: CreateConfigurationRequest
    type: object
  CreateConfigurationResponse:
    properties:
      Arn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The Amazon Resource Name (ARN) of the configuration.
            xml:
              name: arn
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: Required. The date and time of the configuration.
            xml:
              name: created
      Id:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
      LatestRevision:
        allOf:
          - $ref: '#/definitions/ConfigurationRevision'
          - description: The latest revision of the configuration.
            xml:
              name: latestRevision
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The name of the configuration. This value can contain
              only alphanumeric characters, dashes, periods, underscores, and
              tildes (- . _ ~). This value must be 1-150 characters long.
            xml:
              name: name
    type: object
  CreateTagsRequest:
    description: A map of the key-value pairs for the resource tag.
    properties:
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: The key-value pair for the resource tag.
            xml:
              name: tags
    title: CreateTagsRequest
    type: object
  CreateUserRequest:
    description: Creates a new ActiveMQ user.
    properties:
      ConsoleAccess:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: Enables access to the ActiveMQ Web Console for the ActiveMQ user.
            xml:
              name: consoleAccess
      Groups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of groups (20 maximum) to which the ActiveMQ user
              belongs. This value can contain only alphanumeric characters,
              dashes, periods, underscores, and tildes (- . _ ~). This value
              must be 2-100 characters long.
            xml:
              name: groups
      Password:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The password of the user. This value must be at least 12
              characters long, must contain at least 4 unique characters, and
              must not contain commas, colons, or equal signs (,:=).
            xml:
              name: password
    required:
      - Password
    title: CreateUserRequest
    type: object
  CreateUserResponse:
    properties: {}
    type: object
  DayOfWeek:
    enum:
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
      - SUNDAY
    type: string
  DeleteBrokerRequest:
    properties: {}
    title: DeleteBrokerRequest
    type: object
  DeleteBrokerResponse:
    properties:
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
    type: object
  DeleteTagsRequest:
    properties: {}
    title: DeleteTagsRequest
    type: object
  DeleteUserRequest:
    properties: {}
    title: DeleteUserRequest
    type: object
  DeleteUserResponse:
    properties: {}
    type: object
  DeploymentMode:
    description: The broker's deployment mode.
    enum:
      - SINGLE_INSTANCE
      - ACTIVE_STANDBY_MULTI_AZ
      - CLUSTER_MULTI_AZ
    type: string
  DescribeBrokerEngineTypesRequest:
    properties: {}
    title: DescribeBrokerEngineTypesRequest
    type: object
  DescribeBrokerEngineTypesResponse:
    properties:
      BrokerEngineTypes:
        allOf:
          - $ref: '#/definitions/__listOfBrokerEngineType'
          - description: List of available engine types and versions.
            xml:
              name: brokerEngineTypes
      MaxResults:
        allOf:
          - $ref: '#/definitions/__integerMin5Max100'
          - description: >-
              Required. The maximum number of engine types that can be returned
              per page (20 by default). This value must be an integer from 5 to
              100.
            xml:
              name: maxResults
      NextToken:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The token that specifies the next page of results Amazon MQ should
              return. To request the first page, leave nextToken empty.
            xml:
              name: nextToken
    type: object
  DescribeBrokerInstanceOptionsRequest:
    properties: {}
    title: DescribeBrokerInstanceOptionsRequest
    type: object
  DescribeBrokerInstanceOptionsResponse:
    properties:
      BrokerInstanceOptions:
        allOf:
          - $ref: '#/definitions/__listOfBrokerInstanceOption'
          - description: List of available broker instance options.
            xml:
              name: brokerInstanceOptions
      MaxResults:
        allOf:
          - $ref: '#/definitions/__integerMin5Max100'
          - description: >-
              Required. The maximum number of instance options that can be
              returned per page (20 by default). This value must be an integer
              from 5 to 100.
            xml:
              name: maxResults
      NextToken:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The token that specifies the next page of results Amazon MQ should
              return. To request the first page, leave nextToken empty.
            xml:
              name: nextToken
    type: object
  DescribeBrokerRequest:
    properties: {}
    title: DescribeBrokerRequest
    type: object
  DescribeBrokerResponse:
    properties:
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              The authentication strategy used to secure the broker. The default
              is SIMPLE.
            xml:
              name: authenticationStrategy
      AutoMinorVersionUpgrade:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables automatic upgrades to new minor versions for brokers, as
              new versions are released and supported by Amazon MQ. Automatic
              upgrades occur during the scheduled maintenance window of the
              broker or after a manual broker reboot.
            xml:
              name: autoMinorVersionUpgrade
      BrokerArn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The broker's Amazon Resource Name (ARN).
            xml:
              name: brokerArn
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
      BrokerInstances:
        allOf:
          - $ref: '#/definitions/__listOfBrokerInstance'
          - description: A list of information about allocated brokers.
            xml:
              name: brokerInstances
      BrokerName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker's name. This value must be unique in your AWS account,
              1-50 characters long, must contain only letters, numbers, dashes,
              and underscores, and must not contain white spaces, brackets,
              wildcard characters, or special characters.
            xml:
              name: brokerName
      BrokerState:
        allOf:
          - $ref: '#/definitions/BrokerState'
          - description: The broker's status.
            xml:
              name: brokerState
      Configurations:
        allOf:
          - $ref: '#/definitions/Configurations'
          - description: The list of all revisions for the specified configuration.
            xml:
              name: configurations
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: The time when the broker was created.
            xml:
              name: created
      DeploymentMode:
        allOf:
          - $ref: '#/definitions/DeploymentMode'
          - description: The broker's deployment mode.
            xml:
              name: deploymentMode
      EncryptionOptions:
        allOf:
          - $ref: '#/definitions/EncryptionOptions'
          - description: >-
              Encryption options for the broker. Does not apply to RabbitMQ
              brokers.
            xml:
              name: encryptionOptions
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: >-
              The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ
              and RABBITMQ.
            xml:
              name: engineType
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker engine's version. For a list of supported engine
              versions, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      HostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The broker's instance type.
            xml:
              name: hostInstanceType
      LdapServerMetadata:
        allOf:
          - $ref: '#/definitions/LdapServerMetadataOutput'
          - description: >-
              The metadata of the LDAP server used to authenticate and authorize
              connections to the broker.
            xml:
              name: ldapServerMetadata
      Logs:
        allOf:
          - $ref: '#/definitions/LogsSummary'
          - description: >-
              The list of information about logs currently enabled and pending
              to be deployed for the specified broker.
            xml:
              name: logs
      MaintenanceWindowStartTime:
        allOf:
          - $ref: '#/definitions/WeeklyStartTime'
          - description: The parameters that determine the WeeklyStartTime.
            xml:
              name: maintenanceWindowStartTime
      PendingAuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              The authentication strategy that will be applied when the broker
              is rebooted. The default is SIMPLE.
            xml:
              name: pendingAuthenticationStrategy
      PendingEngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker engine version to upgrade to. For a list of supported
              engine versions, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: pendingEngineVersion
      PendingHostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker's host instance type to upgrade to. For a list of
              supported instance types, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker
              instance types</a>.
            xml:
              name: pendingHostInstanceType
      PendingLdapServerMetadata:
        allOf:
          - $ref: '#/definitions/LdapServerMetadataOutput'
          - description: >-
              The metadata of the LDAP server that will be used to authenticate
              and authorize connections to the broker after it is rebooted.
            xml:
              name: pendingLdapServerMetadata
      PendingSecurityGroups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of pending security groups to authorize connections to
              brokers.
            xml:
              name: pendingSecurityGroups
      PubliclyAccessible:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables connections from applications outside of the VPC that
              hosts the broker's subnets.
            xml:
              name: publiclyAccessible
      SecurityGroups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of rules (1 minimum, 125 maximum) that authorize
              connections to brokers.
            xml:
              name: securityGroups
      StorageType:
        allOf:
          - $ref: '#/definitions/BrokerStorageType'
          - description: The broker's storage type.
            xml:
              name: storageType
      SubnetIds:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of groups that define which subnets and IP ranges the
              broker can use from different Availability Zones.
            xml:
              name: subnetIds
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: The list of all tags associated with this broker.
            xml:
              name: tags
      Users:
        allOf:
          - $ref: '#/definitions/__listOfUserSummary'
          - description: The list of all broker usernames for the specified broker.
            xml:
              name: users
    type: object
  DescribeConfigurationRequest:
    properties: {}
    title: DescribeConfigurationRequest
    type: object
  DescribeConfigurationResponse:
    properties:
      Arn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The ARN of the configuration.
            xml:
              name: arn
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: Required. The date and time of the configuration revision.
            xml:
              name: created
      Description:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The description of the configuration.
            xml:
              name: description
      EngineType:
        allOf:
          - $ref: '#/definitions/EngineType'
          - description: >-
              Required. The type of broker engine. Currently, Amazon MQ supports
              ACTIVEMQ and RABBITMQ.
            xml:
              name: engineType
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The broker engine's version. For a list of supported
              engine versions, see, <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      Id:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
      LatestRevision:
        allOf:
          - $ref: '#/definitions/ConfigurationRevision'
          - description: Required. The latest revision of the configuration.
            xml:
              name: latestRevision
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The name of the configuration. This value can contain
              only alphanumeric characters, dashes, periods, underscores, and
              tildes (- . _ ~). This value must be 1-150 characters long.
            xml:
              name: name
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: The list of all tags associated with this configuration.
            xml:
              name: tags
    type: object
  DescribeConfigurationRevisionRequest:
    properties: {}
    title: DescribeConfigurationRevisionRequest
    type: object
  DescribeConfigurationRevisionResponse:
    properties:
      ConfigurationId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: configurationId
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: Required. The date and time of the configuration.
            xml:
              name: created
      Data:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The base64-encoded XML configuration.
            xml:
              name: data
      Description:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The description of the configuration.
            xml:
              name: description
    type: object
  DescribeUserRequest:
    properties: {}
    title: DescribeUserRequest
    type: object
  DescribeUserResponse:
    properties:
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
      ConsoleAccess:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables access to the the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
      Groups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of groups (20 maximum) to which the ActiveMQ user
              belongs. This value can contain only alphanumeric characters,
              dashes, periods, underscores, and tildes (- . _ ~). This value
              must be 2-100 characters long.
            xml:
              name: groups
      Pending:
        allOf:
          - $ref: '#/definitions/UserPendingChanges'
          - description: The status of the changes pending for the ActiveMQ user.
            xml:
              name: pending
      Username:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The username of the ActiveMQ user. This value can
              contain only alphanumeric characters, dashes, periods,
              underscores, and tildes (- . _ ~). This value must be 2-100
              characters long.
            xml:
              name: username
    type: object
  EncryptionOptions:
    description: >-
      <important><p>Does not apply to RabbitMQ brokers.</p></important>
      <p>Encryption options for the broker.</p>
    properties:
      KmsKeyId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The customer master key (CMK) to use for the AWS Key Management
              Service (KMS). This key is used to encrypt your data at rest. If
              not provided, Amazon MQ will use a default CMK to encrypt your
              data.
            xml:
              name: kmsKeyId
      UseAwsOwnedKey:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables the use of an AWS owned CMK using AWS Key Management
              Service (KMS). Set to true by default, if no value is provided,
              for example, for RabbitMQ brokers.
            xml:
              name: useAwsOwnedKey
    required:
      - UseAwsOwnedKey
    type: object
  EngineType:
    description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
    enum:
      - ACTIVEMQ
      - RABBITMQ
    type: string
  EngineVersion:
    description: Id of the engine version.
    properties:
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Id for the version.
            xml:
              name: name
    type: object
  ForbiddenException: {}
  InternalServerErrorException: {}
  LdapServerMetadataInput:
    description: >-
      <p>Optional. The metadata of the LDAP server used to authenticate and
      authorize connections to the broker.</p> <important><p>Does not apply to
      RabbitMQ brokers.</p></important>
    properties:
      Hosts:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              Specifies the location of the LDAP server such as AWS Directory
              Service for Microsoft Active Directory . Optional failover server.
            xml:
              name: hosts
      RoleBase:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The distinguished name of the node in the directory information
              tree (DIT) to search for roles or groups. For example, ou=group,
              ou=corp, dc=corp,
                                dc=example, dc=com.
            xml:
              name: roleBase
      RoleName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Specifies the LDAP attribute that identifies the group name
              attribute in the object returned from the group membership query.
            xml:
              name: roleName
      RoleSearchMatching:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The LDAP search filter used to find roles within the roleBase. The
              distinguished name of the user matched by userSearchMatching is
              substituted into the {0} placeholder in the search filter. The
              client's username is substituted into the {1} placeholder. For
              example, if you set this option to (member=uid={1})for the user
              janedoe, the search filter becomes (member=uid=janedoe) after
              string substitution. It matches all role entries that have a
              member attribute equal to uid=janedoe under the subtree selected
              by the roleBase.
            xml:
              name: roleSearchMatching
      RoleSearchSubtree:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              The directory search scope for the role. If set to true, scope is
              to search the entire subtree.
            xml:
              name: roleSearchSubtree
      ServiceAccountPassword:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Service account password. A service account is an account in your
              LDAP server that has access to initiate a connection. For example,
              cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountPassword
      ServiceAccountUsername:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Service account username. A service account is an account in your
              LDAP server that has access to initiate a connection. For example,
              cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountUsername
      UserBase:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Select a particular subtree of the directory information tree
              (DIT) to search for user entries. The subtree is specified by a
              DN, which specifies the base node of the subtree. For example, by
              setting this option to ou=Users,ou=corp, dc=corp,
                                dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
            xml:
              name: userBase
      UserRoleName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Specifies the name of the LDAP attribute for the user group
              membership.
            xml:
              name: userRoleName
      UserSearchMatching:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The LDAP search filter used to find users within the userBase. The
              client's username is substituted into the {0} placeholder in the
              search filter. For example, if this option is set to (uid={0}) and
              the received username is janedoe, the search filter becomes
              (uid=janedoe) after string substitution. It will result in
              matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp,
              dc=example,
                                dc=com.
            xml:
              name: userSearchMatching
      UserSearchSubtree:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              The directory search scope for the user. If set to true, scope is
              to search the entire subtree.
            xml:
              name: userSearchSubtree
    required:
      - Hosts
      - UserSearchMatching
      - UserBase
      - RoleSearchMatching
      - ServiceAccountUsername
      - RoleBase
      - ServiceAccountPassword
    type: object
  LdapServerMetadataOutput:
    description: >-
      Optional. The metadata of the LDAP server used to authenticate and
      authorize connections to the broker.
    properties:
      Hosts:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              Specifies the location of the LDAP server such as AWS Directory
              Service for Microsoft Active Directory . Optional failover server.
            xml:
              name: hosts
      RoleBase:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The distinguished name of the node in the directory information
              tree (DIT) to search for roles or groups. For example, ou=group,
              ou=corp, dc=corp,
                                dc=example, dc=com.
            xml:
              name: roleBase
      RoleName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Specifies the LDAP attribute that identifies the group name
              attribute in the object returned from the group membership query.
            xml:
              name: roleName
      RoleSearchMatching:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The LDAP search filter used to find roles within the roleBase. The
              distinguished name of the user matched by userSearchMatching is
              substituted into the {0} placeholder in the search filter. The
              client's username is substituted into the {1} placeholder. For
              example, if you set this option to (member=uid={1})for the user
              janedoe, the search filter becomes (member=uid=janedoe) after
              string substitution. It matches all role entries that have a
              member attribute equal to uid=janedoe under the subtree selected
              by the roleBase.
            xml:
              name: roleSearchMatching
      RoleSearchSubtree:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              The directory search scope for the role. If set to true, scope is
              to search the entire subtree.
            xml:
              name: roleSearchSubtree
      ServiceAccountUsername:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Service account username. A service account is an account in your
              LDAP server that has access to initiate a connection. For example,
              cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountUsername
      UserBase:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Select a particular subtree of the directory information tree
              (DIT) to search for user entries. The subtree is specified by a
              DN, which specifies the base node of the subtree. For example, by
              setting this option to ou=Users,ou=corp, dc=corp,
                                dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
            xml:
              name: userBase
      UserRoleName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Specifies the name of the LDAP attribute for the user group
              membership.
            xml:
              name: userRoleName
      UserSearchMatching:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The LDAP search filter used to find users within the userBase. The
              client's username is substituted into the {0} placeholder in the
              search filter. For example, if this option is set to (uid={0}) and
              the received username is janedoe, the search filter becomes
              (uid=janedoe) after string substitution. It will result in
              matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp,
              dc=example,
                             dc=com.
            xml:
              name: userSearchMatching
      UserSearchSubtree:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              The directory search scope for the user. If set to true, scope is
              to search the entire subtree.
            xml:
              name: userSearchSubtree
    required:
      - Hosts
      - UserSearchMatching
      - UserBase
      - RoleSearchMatching
      - ServiceAccountUsername
      - RoleBase
    type: object
  ListBrokersRequest:
    properties: {}
    title: ListBrokersRequest
    type: object
  ListBrokersResponse:
    properties:
      BrokerSummaries:
        allOf:
          - $ref: '#/definitions/__listOfBrokerSummary'
          - description: A list of information about all brokers.
            xml:
              name: brokerSummaries
      NextToken:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The token that specifies the next page of results Amazon MQ should
              return. To request the first page, leave nextToken empty.
            xml:
              name: nextToken
    type: object
  ListConfigurationRevisionsRequest:
    properties: {}
    title: ListConfigurationRevisionsRequest
    type: object
  ListConfigurationRevisionsResponse:
    properties:
      ConfigurationId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The unique ID that Amazon MQ generates for the configuration.
            xml:
              name: configurationId
      MaxResults:
        allOf:
          - $ref: '#/definitions/__integer'
          - description: >-
              The maximum number of configuration revisions that can be returned
              per page (20 by default). This value must be an integer from 5 to
              100.
            xml:
              name: maxResults
      NextToken:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The token that specifies the next page of results Amazon MQ should
              return. To request the first page, leave nextToken empty.
            xml:
              name: nextToken
      Revisions:
        allOf:
          - $ref: '#/definitions/__listOfConfigurationRevision'
          - description: The list of all revisions for the specified configuration.
            xml:
              name: revisions
    type: object
  ListConfigurationsRequest:
    properties: {}
    title: ListConfigurationsRequest
    type: object
  ListConfigurationsResponse:
    properties:
      Configurations:
        allOf:
          - $ref: '#/definitions/__listOfConfiguration'
          - description: The list of all revisions for the specified configuration.
            xml:
              name: configurations
      MaxResults:
        allOf:
          - $ref: '#/definitions/__integer'
          - description: >-
              The maximum number of configurations that Amazon MQ can return per
              page (20 by default). This value must be an integer from 5 to 100.
            xml:
              name: maxResults
      NextToken:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The token that specifies the next page of results Amazon MQ should
              return. To request the first page, leave nextToken empty.
            xml:
              name: nextToken
    type: object
  ListTagsRequest:
    properties: {}
    title: ListTagsRequest
    type: object
  ListTagsResponse:
    properties:
      Tags:
        allOf:
          - $ref: '#/definitions/__mapOf__string'
          - description: The key-value pair for the resource tag.
            xml:
              name: tags
    type: object
  ListUsersRequest:
    properties: {}
    title: ListUsersRequest
    type: object
  ListUsersResponse:
    properties:
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
      MaxResults:
        allOf:
          - $ref: '#/definitions/__integerMin5Max100'
          - description: >-
              Required. The maximum number of ActiveMQ users that can be
              returned per page (20 by default). This value must be an integer
              from 5 to 100.
            xml:
              name: maxResults
      NextToken:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The token that specifies the next page of results Amazon MQ should
              return. To request the first page, leave nextToken empty.
            xml:
              name: nextToken
      Users:
        allOf:
          - $ref: '#/definitions/__listOfUserSummary'
          - description: >-
              Required. The list of all ActiveMQ usernames for the specified
              broker. Does not apply to RabbitMQ brokers.
            xml:
              name: users
    type: object
  Logs:
    description: The list of information about logs to be enabled for the specified broker.
    properties:
      Audit:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables audit logging. Every user management action made using JMX
              or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
              brokers.
            xml:
              name: audit
      General:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: Enables general logging.
            xml:
              name: general
    type: object
  LogsSummary:
    description: >-
      The list of information about logs currently enabled and pending to be
      deployed for the specified broker.
    properties:
      Audit:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables audit logging. Every user management action made using JMX
              or the ActiveMQ Web Console is logged.
            xml:
              name: audit
      AuditLogGroup:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The location of the CloudWatch Logs log group where audit logs are
              sent.
            xml:
              name: auditLogGroup
      General:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: Enables general logging.
            xml:
              name: general
      GeneralLogGroup:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The location of the CloudWatch Logs log group where general logs
              are sent.
            xml:
              name: generalLogGroup
      Pending:
        allOf:
          - $ref: '#/definitions/PendingLogs'
          - description: >-
              The list of information about logs pending to be deployed for the
              specified broker.
            xml:
              name: pending
    required:
      - GeneralLogGroup
      - General
    type: object
  MaxResults:
    maximum: 100
    minimum: 1
    type: integer
  NotFoundException: {}
  PendingLogs:
    description: The list of information about logs to be enabled for the specified broker.
    properties:
      Audit:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables audit logging. Every user management action made using JMX
              or the ActiveMQ Web Console is logged.
            xml:
              name: audit
      General:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: Enables general logging.
            xml:
              name: general
    type: object
  RebootBrokerRequest:
    properties: {}
    title: RebootBrokerRequest
    type: object
  RebootBrokerResponse:
    properties: {}
    type: object
  SanitizationWarning:
    description: >-
      Returns information about the XML element or attribute that was sanitized
      in the configuration.
    properties:
      AttributeName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The name of the XML attribute that has been sanitized.
            xml:
              name: attributeName
      ElementName:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The name of the XML element that has been sanitized.
            xml:
              name: elementName
      Reason:
        allOf:
          - $ref: '#/definitions/SanitizationWarningReason'
          - description: >-
              Required. The reason for which the XML elements or attributes were
              sanitized.
            xml:
              name: reason
    required:
      - Reason
    type: object
  SanitizationWarningReason:
    description: The reason for which the XML elements or attributes were sanitized.
    enum:
      - DISALLOWED_ELEMENT_REMOVED
      - DISALLOWED_ATTRIBUTE_REMOVED
      - INVALID_ATTRIBUTE_VALUE_REMOVED
    type: string
  UnauthorizedException: {}
  UpdateBrokerRequest:
    description: Updates the broker using the specified properties.
    properties:
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy used to secure the broker.
              The default is SIMPLE.
            xml:
              name: authenticationStrategy
      AutoMinorVersionUpgrade:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables automatic upgrades to new minor versions for brokers, as
              new versions are released and supported by Amazon MQ. Automatic
              upgrades occur during the scheduled maintenance window of the
              broker or after a manual broker reboot.
            xml:
              name: autoMinorVersionUpgrade
      Configuration:
        allOf:
          - $ref: '#/definitions/ConfigurationId'
          - description: A list of information about the configuration.
            xml:
              name: configuration
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker engine version. For a list of supported engine
              versions, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      HostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker's host instance type to upgrade to. For a list of
              supported instance types, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker
              instance types</a>.
            xml:
              name: hostInstanceType
      LdapServerMetadata:
        allOf:
          - $ref: '#/definitions/LdapServerMetadataInput'
          - description: >-
              Optional. The metadata of the LDAP server used to authenticate and
              authorize connections to the broker. Does not apply to RabbitMQ
              brokers.
            xml:
              name: ldapServerMetadata
      Logs:
        allOf:
          - $ref: '#/definitions/Logs'
          - description: Enables Amazon CloudWatch logging for brokers.
            xml:
              name: logs
      MaintenanceWindowStartTime:
        allOf:
          - $ref: '#/definitions/WeeklyStartTime'
          - description: The parameters that determine the WeeklyStartTime.
            xml:
              name: maintenanceWindowStartTime
      SecurityGroups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of security groups (1 minimum, 5 maximum) that authorizes
              connections to brokers.
            xml:
              name: securityGroups
    title: UpdateBrokerRequest
    type: object
  UpdateBrokerResponse:
    properties:
      AuthenticationStrategy:
        allOf:
          - $ref: '#/definitions/AuthenticationStrategy'
          - description: >-
              Optional. The authentication strategy used to secure the broker.
              The default is SIMPLE.
            xml:
              name: authenticationStrategy
      AutoMinorVersionUpgrade:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              The new boolean value that specifies whether broker engines
              automatically upgrade to new minor versions as new versions are
              released and supported by Amazon MQ.
            xml:
              name: autoMinorVersionUpgrade
      BrokerId:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
      Configuration:
        allOf:
          - $ref: '#/definitions/ConfigurationId'
          - description: The ID of the updated configuration.
            xml:
              name: configuration
      EngineVersion:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker engine version to upgrade to. For a list of supported
              engine versions, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
              engines</a>.
            xml:
              name: engineVersion
      HostInstanceType:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The broker's host instance type to upgrade to. For a list of
              supported instance types, see <a
              href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker
              instance types</a>.
            xml:
              name: hostInstanceType
      LdapServerMetadata:
        allOf:
          - $ref: '#/definitions/LdapServerMetadataOutput'
          - description: >-
              Optional. The metadata of the LDAP server used to authenticate and
              authorize connections to the broker. Does not apply to RabbitMQ
              brokers.
            xml:
              name: ldapServerMetadata
      Logs:
        allOf:
          - $ref: '#/definitions/Logs'
          - description: >-
              The list of information about logs to be enabled for the specified
              broker.
            xml:
              name: logs
      MaintenanceWindowStartTime:
        allOf:
          - $ref: '#/definitions/WeeklyStartTime'
          - description: The parameters that determine the WeeklyStartTime.
            xml:
              name: maintenanceWindowStartTime
      SecurityGroups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of security groups (1 minimum, 5 maximum) that authorizes
              connections to brokers.
            xml:
              name: securityGroups
    type: object
  UpdateConfigurationRequest:
    description: Updates the specified configuration.
    properties:
      Data:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The base64-encoded XML configuration.
            xml:
              name: data
      Description:
        allOf:
          - $ref: '#/definitions/__string'
          - description: The description of the configuration.
            xml:
              name: description
    required:
      - Data
    title: UpdateConfigurationRequest
    type: object
  UpdateConfigurationResponse:
    properties:
      Arn:
        allOf:
          - $ref: '#/definitions/__string'
          - description: Required. The Amazon Resource Name (ARN) of the configuration.
            xml:
              name: arn
      Created:
        allOf:
          - $ref: '#/definitions/__timestampIso8601'
          - description: Required. The date and time of the configuration.
            xml:
              name: created
      Id:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
      LatestRevision:
        allOf:
          - $ref: '#/definitions/ConfigurationRevision'
          - description: The latest revision of the configuration.
            xml:
              name: latestRevision
      Name:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The name of the configuration. This value can contain
              only alphanumeric characters, dashes, periods, underscores, and
              tildes (- . _ ~). This value must be 1-150 characters long.
            xml:
              name: name
      Warnings:
        allOf:
          - $ref: '#/definitions/__listOfSanitizationWarning'
          - description: >-
              The list of the first 20 warnings about the configuration XML
              elements or attributes that were sanitized.
            xml:
              name: warnings
    type: object
  UpdateUserRequest:
    description: Updates the information for an ActiveMQ user.
    properties:
      ConsoleAccess:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables access to the the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
      Groups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of groups (20 maximum) to which the ActiveMQ user
              belongs. This value can contain only alphanumeric characters,
              dashes, periods, underscores, and tildes (- . _ ~). This value
              must be 2-100 characters long.
            xml:
              name: groups
      Password:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The password of the user. This value must be at least 12
              characters long, must contain at least 4 unique characters, and
              must not contain commas, colons, or equal signs (,:=).
            xml:
              name: password
    title: UpdateUserRequest
    type: object
  UpdateUserResponse:
    properties: {}
    type: object
  User:
    description: >-
      A user associated with the broker. For RabbitMQ brokers, one and only one
      administrative user is accepted and created when a broker is first
      provisioned. All subsequent broker users are created by making RabbitMQ
      API calls directly to brokers or via the RabbitMQ web console.
    properties:
      ConsoleAccess:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables access to the ActiveMQ Web Console for the ActiveMQ user.
              Does not apply to RabbitMQ brokers.
            xml:
              name: consoleAccess
      Groups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of groups (20 maximum) to which the ActiveMQ user
              belongs. This value can contain only alphanumeric characters,
              dashes, periods, underscores, and tildes (- . _ ~). This value
              must be 2-100 characters long. Does not apply to RabbitMQ brokers.
            xml:
              name: groups
      Password:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The password of the user. This value must be at least 12
              characters long, must contain at least 4 unique characters, and
              must not contain commas, colons, or equal signs (,:=).
            xml:
              name: password
      Username:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              <p>important><title>Amazon MQ for ActiveMQ</title> <para>For
              ActiveMQ brokers, this value can contain only alphanumeric
              characters, dashes, periods, underscores, and tildes (- . _ ~).
              This value must be 2-100 characters long.</p>/important>
              <important><title>Amazon MQ for RabbitMQ</title> <p>For RabbitMQ
              brokers, this value can contain only alphanumeric characters,
              dashes, periods, underscores (- . _). This value must not contain
              a tilde (~) character. Amazon MQ prohibts using guest as a valid
              usename. This value must be 2-100 characters
              long.</p></important></para>
            xml:
              name: username
    required:
      - Username
      - Password
    type: object
  UserPendingChanges:
    description: >-
      Returns information about the status of the changes pending for the
      ActiveMQ user.
    properties:
      ConsoleAccess:
        allOf:
          - $ref: '#/definitions/__boolean'
          - description: >-
              Enables access to the the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
      Groups:
        allOf:
          - $ref: '#/definitions/__listOf__string'
          - description: >-
              The list of groups (20 maximum) to which the ActiveMQ user
              belongs. This value can contain only alphanumeric characters,
              dashes, periods, underscores, and tildes (- . _ ~). This value
              must be 2-100 characters long.
            xml:
              name: groups
      PendingChange:
        allOf:
          - $ref: '#/definitions/ChangeType'
          - description: Required. The type of change pending for the ActiveMQ user.
            xml:
              name: pendingChange
    required:
      - PendingChange
    type: object
  UserSummary:
    description: Returns a list of all broker users. Does not apply to RabbitMQ brokers.
    properties:
      PendingChange:
        allOf:
          - $ref: '#/definitions/ChangeType'
          - description: The type of change pending for the broker user.
            xml:
              name: pendingChange
      Username:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              Required. The username of the broker user. This value can contain
              only alphanumeric characters, dashes, periods, underscores, and
              tildes (- . _ ~). This value must be 2-100 characters long.
            xml:
              name: username
    required:
      - Username
    type: object
  WeeklyStartTime:
    description: >-
      The scheduled time period relative to UTC during which Amazon MQ begins to
      apply pending updates or patches to the broker.
    properties:
      DayOfWeek:
        allOf:
          - $ref: '#/definitions/DayOfWeek'
          - description: Required. The day of the week.
            xml:
              name: dayOfWeek
      TimeOfDay:
        allOf:
          - $ref: '#/definitions/__string'
          - description: 'Required. The time, in 24-hour format.'
            xml:
              name: timeOfDay
      TimeZone:
        allOf:
          - $ref: '#/definitions/__string'
          - description: >-
              The time zone, UTC by default, in either the Country/City format,
              or the UTC offset format.
            xml:
              name: timeZone
    required:
      - TimeOfDay
      - DayOfWeek
    type: object
  __boolean:
    type: boolean
  __integer:
    type: integer
  __integerMin5Max100:
    maximum: 100
    minimum: 5
    type: integer
  __listOfAvailabilityZone:
    items:
      $ref: '#/definitions/AvailabilityZone'
    type: array
  __listOfBrokerEngineType:
    items:
      $ref: '#/definitions/BrokerEngineType'
    type: array
  __listOfBrokerInstance:
    items:
      $ref: '#/definitions/BrokerInstance'
    type: array
  __listOfBrokerInstanceOption:
    items:
      $ref: '#/definitions/BrokerInstanceOption'
    type: array
  __listOfBrokerSummary:
    items:
      $ref: '#/definitions/BrokerSummary'
    type: array
  __listOfConfiguration:
    items:
      $ref: '#/definitions/Configuration'
    type: array
  __listOfConfigurationId:
    items:
      $ref: '#/definitions/ConfigurationId'
    type: array
  __listOfConfigurationRevision:
    items:
      $ref: '#/definitions/ConfigurationRevision'
    type: array
  __listOfDeploymentMode:
    items:
      $ref: '#/definitions/DeploymentMode'
    type: array
  __listOfEngineVersion:
    items:
      $ref: '#/definitions/EngineVersion'
    type: array
  __listOfSanitizationWarning:
    items:
      $ref: '#/definitions/SanitizationWarning'
    type: array
  __listOfUser:
    items:
      $ref: '#/definitions/User'
    type: array
  __listOfUserSummary:
    items:
      $ref: '#/definitions/UserSummary'
    type: array
  __listOf__string:
    items:
      $ref: '#/definitions/__string'
    type: array
  __mapOf__string:
    additionalProperties:
      $ref: '#/definitions/__string'
    type: object
  __string:
    type: string
  __timestampIso8601:
    format: date-time
    type: string
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/mq/'
host: mq.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    Amazon MQ is a managed message broker service for Apache ActiveMQ and
    RabbitMQ that makes it easy to set up and operate message brokers in the
    cloud. A message broker allows software applications and components to
    communicate using various programming languages, operating systems, and
    formal messaging protocols.
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AmazonMQ
  version: '2017-11-27'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-aws-signingName: mq
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mq-2017-11-27.normal.json
      x-apisguru-driver: external
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: mq
paths:
  /v1/broker-engine-types:
    get:
      description: Describe available engine types and versions.
      operationId: DescribeBrokerEngineTypes
      parameters:
        - description: Filter response by engine type.
          in: query
          name: engineType
          required: false
          type: string
        - description: >-
            The maximum number of brokers that Amazon MQ can return per page (20
            by default). This value must be an integer from 5 to 100.
          in: query
          maximum: 100
          minimum: 1
          name: maxResults
          required: false
          type: integer
        - description: >-
            The token that specifies the next page of results Amazon MQ should
            return. To request the first page, leave nextToken empty.
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeBrokerEngineTypesResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  /v1/broker-instance-options:
    get:
      description: Describe available broker instance options.
      operationId: DescribeBrokerInstanceOptions
      parameters:
        - description: Filter response by engine type.
          in: query
          name: engineType
          required: false
          type: string
        - description: Filter response by host instance type.
          in: query
          name: hostInstanceType
          required: false
          type: string
        - description: >-
            The maximum number of brokers that Amazon MQ can return per page (20
            by default). This value must be an integer from 5 to 100.
          in: query
          maximum: 100
          minimum: 1
          name: maxResults
          required: false
          type: integer
        - description: >-
            The token that specifies the next page of results Amazon MQ should
            return. To request the first page, leave nextToken empty.
          in: query
          name: nextToken
          required: false
          type: string
        - description: Filter response by storage type.
          in: query
          name: storageType
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeBrokerInstanceOptionsResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  /v1/brokers:
    get:
      description: Returns a list of all brokers.
      operationId: ListBrokers
      parameters:
        - description: >-
            The maximum number of brokers that Amazon MQ can return per page (20
            by default). This value must be an integer from 5 to 100.
          in: query
          maximum: 100
          minimum: 1
          name: maxResults
          required: false
          type: integer
        - description: >-
            The token that specifies the next page of results Amazon MQ should
            return. To request the first page, leave nextToken empty.
          in: query
          name: nextToken
          required: false
          type: string
        - description: Pagination limit
          in: query
          name: MaxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: NextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListBrokersResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a
        broker, you must either use the AmazonMQFullAccess IAM policy or include
        the following EC2 permissions in your IAM policy.</p>
        <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required
        to allow Amazon MQ to create an elastic network interface (ENI) on
        behalf of your account.</p></li>
        <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is
        required to attach the ENI to the broker instance.</p></li>
        <li><p>ec2:DeleteNetworkInterface</p></li>
        <li><p>ec2:DeleteNetworkInterfacePermission</p></li>
        <li><p>ec2:DetachNetworkInterface</p></li>
        <li><p>ec2:DescribeInternetGateways</p></li>
        <li><p>ec2:DescribeNetworkInterfaces</p></li>
        <li><p>ec2:DescribeNetworkInterfacePermissions</p></li>
        <li><p>ec2:DescribeRouteTables</p></li>
        <li><p>ec2:DescribeSecurityGroups</p></li>
        <li><p>ec2:DescribeSubnets</p></li>
        <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a
        href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user">Create
        an IAM User and Get Your AWS Credentials</a> and <a
        href="https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface">Never
        Modify or Delete the Amazon MQ Elastic Network Interface</a> in the
        <i>Amazon MQ Developer Guide</i>.</p>
      operationId: CreateBroker
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              authenticationStrategy:
                description: >-
                  Optional. The authentication strategy used to secure the
                  broker. The default is SIMPLE.
                enum:
                  - SIMPLE
                  - LDAP
                type: string
              autoMinorVersionUpgrade:
                description: >-
                  Enables automatic upgrades to new minor versions for brokers,
                  as new versions are released and supported by Amazon MQ.
                  Automatic upgrades occur during the scheduled maintenance
                  window of the broker or after a manual broker reboot. Set to
                  true by default, if no value is specified.
                type: boolean
              brokerName:
                description: >-
                  Required. The broker's name. This value must be unique in your
                  AWS account, 1-50 characters long, must contain only letters,
                  numbers, dashes, and underscores, and must not contain white
                  spaces, brackets, wildcard characters, or special characters.
                type: string
              configuration:
                description: >-
                  <p>A list of information about the configuration.</p>
                  <important><p>Does not apply to RabbitMQ
                  brokers.</p></important>
                properties:
                  Id:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Required. The unique ID that Amazon MQ generates for
                          the configuration.
                        xml:
                          name: id
                  Revision:
                    allOf:
                      - $ref: '#/definitions/__integer'
                      - description: The revision number of the configuration.
                        xml:
                          name: revision
                type: object
              creatorRequestId:
                description: >-
                  The unique ID that the requester receives for the created
                  broker. Amazon MQ passes your ID with the API action. Note: We
                  recommend using a Universally Unique Identifier (UUID) for the
                  creatorRequestId. You may omit the creatorRequestId if your
                  application doesn't require idempotency.
                type: string
              deploymentMode:
                description: The broker's deployment mode.
                enum:
                  - SINGLE_INSTANCE
                  - ACTIVE_STANDBY_MULTI_AZ
                  - CLUSTER_MULTI_AZ
                type: string
              encryptionOptions:
                description: >-
                  <important><p>Does not apply to RabbitMQ
                  brokers.</p></important> <p>Encryption options for the
                  broker.</p>
                properties:
                  KmsKeyId:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The customer master key (CMK) to use for the AWS Key
                          Management Service (KMS). This key is used to encrypt
                          your data at rest. If not provided, Amazon MQ will use
                          a default CMK to encrypt your data.
                        xml:
                          name: kmsKeyId
                  UseAwsOwnedKey:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          Enables the use of an AWS owned CMK using AWS Key
                          Management Service (KMS). Set to true by default, if
                          no value is provided, for example, for RabbitMQ
                          brokers.
                        xml:
                          name: useAwsOwnedKey
                type: object
              engineType:
                description: >-
                  The type of broker engine. Amazon MQ supports ActiveMQ and
                  RabbitMQ.
                enum:
                  - ACTIVEMQ
                  - RABBITMQ
                type: string
              engineVersion:
                description: >-
                  Required. The broker engine's version. For a list of supported
                  engine versions, see <a
                  href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
                  engines</a>.
                type: string
              hostInstanceType:
                description: Required. The broker's instance type.
                type: string
              ldapServerMetadata:
                description: >-
                  <p>Optional. The metadata of the LDAP server used to
                  authenticate and authorize connections to the broker.</p>
                  <important><p>Does not apply to RabbitMQ
                  brokers.</p></important>
                properties:
                  Hosts:
                    allOf:
                      - $ref: '#/definitions/__listOf__string'
                      - description: >-
                          Specifies the location of the LDAP server such as AWS
                          Directory Service for Microsoft Active Directory .
                          Optional failover server.
                        xml:
                          name: hosts
                  RoleBase:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The distinguished name of the node in the directory
                          information tree (DIT) to search for roles or groups.
                          For example, ou=group, ou=corp, dc=corp,
                                            dc=example, dc=com.
                        xml:
                          name: roleBase
                  RoleName:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Specifies the LDAP attribute that identifies the group
                          name attribute in the object returned from the group
                          membership query.
                        xml:
                          name: roleName
                  RoleSearchMatching:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The LDAP search filter used to find roles within the
                          roleBase. The distinguished name of the user matched
                          by userSearchMatching is substituted into the {0}
                          placeholder in the search filter. The client's
                          username is substituted into the {1} placeholder. For
                          example, if you set this option to (member=uid={1})for
                          the user janedoe, the search filter becomes
                          (member=uid=janedoe) after string substitution. It
                          matches all role entries that have a member attribute
                          equal to uid=janedoe under the subtree selected by the
                          roleBase.
                        xml:
                          name: roleSearchMatching
                  RoleSearchSubtree:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          The directory search scope for the role. If set to
                          true, scope is to search the entire subtree.
                        xml:
                          name: roleSearchSubtree
                  ServiceAccountPassword:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Service account password. A service account is an
                          account in your LDAP server that has access to
                          initiate a connection. For example, cn=admin,dc=corp,
                          dc=example,
                                            dc=com.
                        xml:
                          name: serviceAccountPassword
                  ServiceAccountUsername:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Service account username. A service account is an
                          account in your LDAP server that has access to
                          initiate a connection. For example, cn=admin,dc=corp,
                          dc=example,
                                            dc=com.
                        xml:
                          name: serviceAccountUsername
                  UserBase:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Select a particular subtree of the directory
                          information tree (DIT) to search for user entries. The
                          subtree is specified by a DN, which specifies the base
                          node of the subtree. For example, by setting this
                          option to ou=Users,ou=corp, dc=corp,
                                            dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
                        xml:
                          name: userBase
                  UserRoleName:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Specifies the name of the LDAP attribute for the user
                          group membership.
                        xml:
                          name: userRoleName
                  UserSearchMatching:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The LDAP search filter used to find users within the
                          userBase. The client's username is substituted into
                          the {0} placeholder in the search filter. For example,
                          if this option is set to (uid={0}) and the received
                          username is janedoe, the search filter becomes
                          (uid=janedoe) after string substitution. It will
                          result in matching an entry like uid=janedoe,
                          ou=Users,ou=corp, dc=corp, dc=example,
                                            dc=com.
                        xml:
                          name: userSearchMatching
                  UserSearchSubtree:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          The directory search scope for the user. If set to
                          true, scope is to search the entire subtree.
                        xml:
                          name: userSearchSubtree
                type: object
              logs:
                description: >-
                  The list of information about logs to be enabled for the
                  specified broker.
                properties:
                  Audit:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          Enables audit logging. Every user management action
                          made using JMX or the ActiveMQ Web Console is logged.
                          Does not apply to RabbitMQ brokers.
                        xml:
                          name: audit
                  General:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: Enables general logging.
                        xml:
                          name: general
                type: object
              maintenanceWindowStartTime:
                description: >-
                  The scheduled time period relative to UTC during which Amazon
                  MQ begins to apply pending updates or patches to the broker.
                properties:
                  DayOfWeek:
                    allOf:
                      - $ref: '#/definitions/DayOfWeek'
                      - description: Required. The day of the week.
                        xml:
                          name: dayOfWeek
                  TimeOfDay:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: 'Required. The time, in 24-hour format.'
                        xml:
                          name: timeOfDay
                  TimeZone:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The time zone, UTC by default, in either the
                          Country/City format, or the UTC offset format.
                        xml:
                          name: timeZone
                type: object
              publiclyAccessible:
                description: >-
                  Enables connections from applications outside of the VPC that
                  hosts the broker's subnets. Set to false by default, if no
                  value is provided.
                type: boolean
              securityGroups:
                description: >-
                  The list of rules (1 minimum, 125 maximum) that authorize
                  connections to brokers.
                items:
                  $ref: '#/definitions/__string'
                type: array
              storageType:
                description: >-
                  <p>The broker's storage type.</p> <important><p>EFS is not
                  supported for RabbitMQ engine type.</p></important>
                enum:
                  - EBS
                  - EFS
                type: string
              subnetIds:
                description: >-
                  <p>The list of groups that define which subnets and IP ranges
                  the broker can use from different Availability Zones. If you
                  specify more than one subnet, the subnets must be in different
                  Availability Zones. Amazon MQ will not be able to create VPC
                  endpoints for your broker with multiple subnets in the same
                  Availability Zone. A SINGLE_INSTANCE deployment requires one
                  subnet (for example, the default subnet). An
                  ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment
                  requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for
                  RabbitMQ deployment has no subnet requirements when deployed
                  with public accessibility. Deployment without public
                  accessibility requires at least one subnet.</p>
                  <important><p>If you specify subnets in a <a
                  href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared
                  VPC</a> for a RabbitMQ broker, the associated VPC to which the
                  specified subnets belong must be owned by your AWS account.
                  Amazon MQ will not be able to create VPC endpoints in VPCs
                  that are not owned by your AWS account.</p></important>
                items:
                  $ref: '#/definitions/__string'
                type: array
              tags:
                additionalProperties:
                  $ref: '#/definitions/__string'
                description: Create tags when creating the broker.
                type: object
              users:
                description: >-
                  <p>Required. The list of broker users (persons or
                  applications) who can access queues and topics. This value can
                  contain only alphanumeric characters, dashes, periods,
                  underscores, and tildes (- . _ ~). This value must be 2-100
                  characters long.</p> <important><title>Amazon MQ for
                  RabbitMQ</title> <p>When you create an Amazon MQ for RabbitMQ
                  broker, one and only one administrative user is accepted and
                  created when a broker is first provisioned. All subsequent
                  broker users are created by making RabbitMQ API calls directly
                  to brokers or via the RabbitMQ web console.</p></important>
                items:
                  $ref: '#/definitions/User'
                type: array
            required:
              - autoMinorVersionUpgrade
              - brokerName
              - deploymentMode
              - engineType
              - engineVersion
              - hostInstanceType
              - publiclyAccessible
              - users
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateBrokerResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  '/v1/brokers/{broker-id}':
    delete:
      description: 'Deletes a broker. Note: This API is asynchronous.'
      operationId: DeleteBroker
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteBrokerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    get:
      description: Returns information about the specified broker.
      operationId: DescribeBroker
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeBrokerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: Adds a pending configuration change to a broker.
      operationId: UpdateBroker
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              authenticationStrategy:
                description: >-
                  Optional. The authentication strategy used to secure the
                  broker. The default is SIMPLE.
                enum:
                  - SIMPLE
                  - LDAP
                type: string
              autoMinorVersionUpgrade:
                description: >-
                  Enables automatic upgrades to new minor versions for brokers,
                  as new versions are released and supported by Amazon MQ.
                  Automatic upgrades occur during the scheduled maintenance
                  window of the broker or after a manual broker reboot.
                type: boolean
              configuration:
                description: >-
                  <p>A list of information about the configuration.</p>
                  <important><p>Does not apply to RabbitMQ
                  brokers.</p></important>
                properties:
                  Id:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Required. The unique ID that Amazon MQ generates for
                          the configuration.
                        xml:
                          name: id
                  Revision:
                    allOf:
                      - $ref: '#/definitions/__integer'
                      - description: The revision number of the configuration.
                        xml:
                          name: revision
                type: object
              engineVersion:
                description: >-
                  The broker engine version. For a list of supported engine
                  versions, see <a
                  href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
                  engines</a>.
                type: string
              hostInstanceType:
                description: >-
                  The broker's host instance type to upgrade to. For a list of
                  supported instance types, see <a
                  href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker
                  instance types</a>.
                type: string
              ldapServerMetadata:
                description: >-
                  <p>Optional. The metadata of the LDAP server used to
                  authenticate and authorize connections to the broker.</p>
                  <important><p>Does not apply to RabbitMQ
                  brokers.</p></important>
                properties:
                  Hosts:
                    allOf:
                      - $ref: '#/definitions/__listOf__string'
                      - description: >-
                          Specifies the location of the LDAP server such as AWS
                          Directory Service for Microsoft Active Directory .
                          Optional failover server.
                        xml:
                          name: hosts
                  RoleBase:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The distinguished name of the node in the directory
                          information tree (DIT) to search for roles or groups.
                          For example, ou=group, ou=corp, dc=corp,
                                            dc=example, dc=com.
                        xml:
                          name: roleBase
                  RoleName:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Specifies the LDAP attribute that identifies the group
                          name attribute in the object returned from the group
                          membership query.
                        xml:
                          name: roleName
                  RoleSearchMatching:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The LDAP search filter used to find roles within the
                          roleBase. The distinguished name of the user matched
                          by userSearchMatching is substituted into the {0}
                          placeholder in the search filter. The client's
                          username is substituted into the {1} placeholder. For
                          example, if you set this option to (member=uid={1})for
                          the user janedoe, the search filter becomes
                          (member=uid=janedoe) after string substitution. It
                          matches all role entries that have a member attribute
                          equal to uid=janedoe under the subtree selected by the
                          roleBase.
                        xml:
                          name: roleSearchMatching
                  RoleSearchSubtree:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          The directory search scope for the role. If set to
                          true, scope is to search the entire subtree.
                        xml:
                          name: roleSearchSubtree
                  ServiceAccountPassword:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Service account password. A service account is an
                          account in your LDAP server that has access to
                          initiate a connection. For example, cn=admin,dc=corp,
                          dc=example,
                                            dc=com.
                        xml:
                          name: serviceAccountPassword
                  ServiceAccountUsername:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Service account username. A service account is an
                          account in your LDAP server that has access to
                          initiate a connection. For example, cn=admin,dc=corp,
                          dc=example,
                                            dc=com.
                        xml:
                          name: serviceAccountUsername
                  UserBase:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Select a particular subtree of the directory
                          information tree (DIT) to search for user entries. The
                          subtree is specified by a DN, which specifies the base
                          node of the subtree. For example, by setting this
                          option to ou=Users,ou=corp, dc=corp,
                                            dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
                        xml:
                          name: userBase
                  UserRoleName:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          Specifies the name of the LDAP attribute for the user
                          group membership.
                        xml:
                          name: userRoleName
                  UserSearchMatching:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The LDAP search filter used to find users within the
                          userBase. The client's username is substituted into
                          the {0} placeholder in the search filter. For example,
                          if this option is set to (uid={0}) and the received
                          username is janedoe, the search filter becomes
                          (uid=janedoe) after string substitution. It will
                          result in matching an entry like uid=janedoe,
                          ou=Users,ou=corp, dc=corp, dc=example,
                                            dc=com.
                        xml:
                          name: userSearchMatching
                  UserSearchSubtree:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          The directory search scope for the user. If set to
                          true, scope is to search the entire subtree.
                        xml:
                          name: userSearchSubtree
                type: object
              logs:
                description: >-
                  The list of information about logs to be enabled for the
                  specified broker.
                properties:
                  Audit:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: >-
                          Enables audit logging. Every user management action
                          made using JMX or the ActiveMQ Web Console is logged.
                          Does not apply to RabbitMQ brokers.
                        xml:
                          name: audit
                  General:
                    allOf:
                      - $ref: '#/definitions/__boolean'
                      - description: Enables general logging.
                        xml:
                          name: general
                type: object
              maintenanceWindowStartTime:
                description: >-
                  The scheduled time period relative to UTC during which Amazon
                  MQ begins to apply pending updates or patches to the broker.
                properties:
                  DayOfWeek:
                    allOf:
                      - $ref: '#/definitions/DayOfWeek'
                      - description: Required. The day of the week.
                        xml:
                          name: dayOfWeek
                  TimeOfDay:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: 'Required. The time, in 24-hour format.'
                        xml:
                          name: timeOfDay
                  TimeZone:
                    allOf:
                      - $ref: '#/definitions/__string'
                      - description: >-
                          The time zone, UTC by default, in either the
                          Country/City format, or the UTC offset format.
                        xml:
                          name: timeZone
                type: object
              securityGroups:
                description: >-
                  The list of security groups (1 minimum, 5 maximum) that
                  authorizes connections to brokers.
                items:
                  $ref: '#/definitions/__string'
                type: array
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateBrokerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  '/v1/brokers/{broker-id}/reboot':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      description: 'Reboots a broker. Note: This API is asynchronous.'
      operationId: RebootBroker
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RebootBrokerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  '/v1/brokers/{broker-id}/users':
    get:
      description: Returns a list of all ActiveMQ users.
      operationId: ListUsers
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
        - description: >-
            The maximum number of brokers that Amazon MQ can return per page (20
            by default). This value must be an integer from 5 to 100.
          in: query
          maximum: 100
          minimum: 1
          name: maxResults
          required: false
          type: integer
        - description: >-
            The token that specifies the next page of results Amazon MQ should
            return. To request the first page, leave nextToken empty.
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListUsersResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/brokers/{broker-id}/users/{username}':
    delete:
      description: Deletes an ActiveMQ user.
      operationId: DeleteUser
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
        - description: >-
            The username of the ActiveMQ user. This value can contain only
            alphanumeric characters, dashes, periods, underscores, and tildes (-
            . _ ~). This value must be 2-100 characters long.
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteUserResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    get:
      description: Returns information about an ActiveMQ user.
      operationId: DescribeUser
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
        - description: >-
            The username of the ActiveMQ user. This value can contain only
            alphanumeric characters, dashes, periods, underscores, and tildes (-
            . _ ~). This value must be 2-100 characters long.
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUserResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Creates an ActiveMQ user.
      operationId: CreateUser
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
        - description: >-
            The username of the ActiveMQ user. This value can contain only
            alphanumeric characters, dashes, periods, underscores, and tildes (-
            . _ ~). This value must be 2-100 characters long.
          in: path
          name: username
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              consoleAccess:
                description: >-
                  Enables access to the ActiveMQ Web Console for the ActiveMQ
                  user.
                type: boolean
              groups:
                description: >-
                  The list of groups (20 maximum) to which the ActiveMQ user
                  belongs. This value can contain only alphanumeric characters,
                  dashes, periods, underscores, and tildes (- . _ ~). This value
                  must be 2-100 characters long.
                items:
                  $ref: '#/definitions/__string'
                type: array
              password:
                description: >-
                  Required. The password of the user. This value must be at
                  least 12 characters long, must contain at least 4 unique
                  characters, and must not contain commas, colons, or equal
                  signs (,:=).
                type: string
            required:
              - password
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    put:
      consumes:
        - application/json
      description: Updates the information for an ActiveMQ user.
      operationId: UpdateUser
      parameters:
        - description: The unique ID that Amazon MQ generates for the broker.
          in: path
          name: broker-id
          required: true
          type: string
        - description: >-
            The username of the ActiveMQ user. This value can contain only
            alphanumeric characters, dashes, periods, underscores, and tildes (-
            . _ ~). This value must be 2-100 characters long.
          in: path
          name: username
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              consoleAccess:
                description: >-
                  Enables access to the the ActiveMQ Web Console for the
                  ActiveMQ user.
                type: boolean
              groups:
                description: >-
                  The list of groups (20 maximum) to which the ActiveMQ user
                  belongs. This value can contain only alphanumeric characters,
                  dashes, periods, underscores, and tildes (- . _ ~). This value
                  must be 2-100 characters long.
                items:
                  $ref: '#/definitions/__string'
                type: array
              password:
                description: >-
                  The password of the user. This value must be at least 12
                  characters long, must contain at least 4 unique characters,
                  and must not contain commas, colons, or equal signs (,:=).
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  /v1/configurations:
    get:
      description: Returns a list of all configurations.
      operationId: ListConfigurations
      parameters:
        - description: >-
            The maximum number of brokers that Amazon MQ can return per page (20
            by default). This value must be an integer from 5 to 100.
          in: query
          maximum: 100
          minimum: 1
          name: maxResults
          required: false
          type: integer
        - description: >-
            The token that specifies the next page of results Amazon MQ should
            return. To request the first page, leave nextToken empty.
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListConfigurationsResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Creates a new configuration for the specified configuration name. Amazon
        MQ uses the default configuration (the engine type and version).
      operationId: CreateConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              authenticationStrategy:
                description: >-
                  Optional. The authentication strategy used to secure the
                  broker. The default is SIMPLE.
                enum:
                  - SIMPLE
                  - LDAP
                type: string
              engineType:
                description: >-
                  The type of broker engine. Amazon MQ supports ActiveMQ and
                  RabbitMQ.
                enum:
                  - ACTIVEMQ
                  - RABBITMQ
                type: string
              engineVersion:
                description: >-
                  Required. The broker engine's version. For a list of supported
                  engine versions, see <a
                  href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported
                  engines</a>.
                type: string
              name:
                description: >-
                  Required. The name of the configuration. This value can
                  contain only alphanumeric characters, dashes, periods,
                  underscores, and tildes (- . _ ~). This value must be 1-150
                  characters long.
                type: string
              tags:
                additionalProperties:
                  $ref: '#/definitions/__string'
                description: Create tags when creating the configuration.
                type: object
            required:
              - engineType
              - engineVersion
              - name
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateConfigurationResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '482':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  '/v1/configurations/{configuration-id}':
    get:
      description: Returns information about the specified configuration.
      operationId: DescribeConfiguration
      parameters:
        - description: The unique ID that Amazon MQ generates for the configuration.
          in: path
          name: configuration-id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeConfigurationResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: Updates the specified configuration.
      operationId: UpdateConfiguration
      parameters:
        - description: The unique ID that Amazon MQ generates for the configuration.
          in: path
          name: configuration-id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              data:
                description: Required. The base64-encoded XML configuration.
                type: string
              description:
                description: The description of the configuration.
                type: string
            required:
              - data
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateConfigurationResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  '/v1/configurations/{configuration-id}/revisions':
    get:
      description: Returns a list of all revisions for the specified configuration.
      operationId: ListConfigurationRevisions
      parameters:
        - description: The unique ID that Amazon MQ generates for the configuration.
          in: path
          name: configuration-id
          required: true
          type: string
        - description: >-
            The maximum number of brokers that Amazon MQ can return per page (20
            by default). This value must be an integer from 5 to 100.
          in: query
          maximum: 100
          minimum: 1
          name: maxResults
          required: false
          type: integer
        - description: >-
            The token that specifies the next page of results Amazon MQ should
            return. To request the first page, leave nextToken empty.
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListConfigurationRevisionsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/configurations/{configuration-id}/revisions/{configuration-revision}':
    get:
      description: >-
        Returns the specified configuration revision for the specified
        configuration.
      operationId: DescribeConfigurationRevision
      parameters:
        - description: The unique ID that Amazon MQ generates for the configuration.
          in: path
          name: configuration-id
          required: true
          type: string
        - description: The revision of the configuration.
          in: path
          name: configuration-revision
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeConfigurationRevisionResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/tags/{resource-arn}':
    get:
      description: Lists tags for a resource.
      operationId: ListTags
      parameters:
        - description: The Amazon Resource Name (ARN) of the resource tag.
          in: path
          name: resource-arn
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Add a tag to a resource.
      operationId: CreateTags
      parameters:
        - description: The Amazon Resource Name (ARN) of the resource tag.
          in: path
          name: resource-arn
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tags:
                additionalProperties:
                  $ref: '#/definitions/__string'
                description: The key-value pair for the resource tag.
                type: object
            type: object
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
  '/v1/tags/{resource-arn}#tagKeys':
    delete:
      description: Removes a tag from a resource.
      operationId: DeleteTags
      parameters:
        - description: The Amazon Resource Name (ARN) of the resource tag.
          in: path
          name: resource-arn
          required: true
          type: string
        - collectionFormat: multi
          description: An array of tag keys to delete
          in: query
          items:
            $ref: '#/definitions/__string'
          name: tagKeys
          required: true
          type: array
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string
x-hasEquivalentPaths: true

