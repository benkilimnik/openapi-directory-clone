basePath: /
definitions:
  AddEventSourceRequest:
    properties:
      BatchSize:
        allOf:
          - $ref: '#/definitions/Integer'
          - description: >-
              The largest number of records that AWS Lambda will give to your
              function in a single event. The default is 100 records.
      EventSource:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The Amazon Resource Name (ARN) of the Amazon Kinesis stream that
              is the event source. Any record added to this stream causes AWS
              Lambda to invoke your Lambda function. AWS Lambda POSTs the Amazon
              Kinesis event, containing records, to your Lambda function as
              JSON.
      FunctionName:
        allOf:
          - $ref: '#/definitions/FunctionName'
          - description: >-
              The Lambda function to invoke when AWS Lambda detects an event on
              the stream.
      Parameters:
        allOf:
          - $ref: '#/definitions/Map'
          - description: >-
              A map (key-value pairs) defining the configuration for AWS Lambda
              to use when reading the event source. Currently, AWS Lambda
              supports only the <code>InitialPositionInStream</code> key. The
              valid values are: "TRIM_HORIZON" and "LATEST". The default value
              is "TRIM_HORIZON". For more information, go to <a
              href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">ShardIteratorType</a>
              in the Amazon Kinesis Service API Reference. 
      Role:
        allOf:
          - $ref: '#/definitions/RoleArn'
          - description: >-
              The ARN of the IAM role (invocation role) that AWS Lambda can
              assume to read from the stream and invoke the function.
    required:
      - EventSource
      - FunctionName
      - Role
    title: AddEventSourceRequest
    type: object
  Blob:
    type: string
  Boolean:
    type: boolean
  DeleteFunctionRequest:
    properties: {}
    title: DeleteFunctionRequest
    type: object
  Description:
    maxLength: 256
    minLength: 0
    type: string
  EventSourceConfiguration:
    description: Describes mapping between an Amazon Kinesis stream and a Lambda function.
    properties:
      BatchSize:
        allOf:
          - $ref: '#/definitions/Integer'
          - description: >-
              The largest number of records that AWS Lambda will POST in the
              invocation request to your function.
      EventSource:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The Amazon Resource Name (ARN) of the Amazon Kinesis stream that
              is the source of events.
      FunctionName:
        allOf:
          - $ref: '#/definitions/FunctionName'
          - description: >-
              The Lambda function to invoke when AWS Lambda detects an event on
              the stream.
      IsActive:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Indicates whether the event source mapping is currently honored.
              Events are only processes if IsActive is true.
      LastModified:
        allOf:
          - $ref: '#/definitions/Timestamp'
          - description: >-
              The UTC time string indicating the last time the event mapping was
              updated.
      Parameters:
        allOf:
          - $ref: '#/definitions/Map'
          - description: >-
              The map (key-value pairs) defining the configuration for AWS
              Lambda to use when reading the event source.
      Role:
        allOf:
          - $ref: '#/definitions/RoleArn'
          - description: >-
              The ARN of the IAM role (invocation role) that AWS Lambda can
              assume to read from the stream and invoke the function.
      Status:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The description of the health of the event source mapping. Valid
              values are: "PENDING", "OK", and "PROBLEM:<i>message</i>".
              Initially this staus is "PENDING". When AWS Lambda begins
              processing events, it changes the status to "OK".
      UUID:
        allOf:
          - $ref: '#/definitions/String'
          - description: The AWS Lambda assigned opaque identifier for the mapping.
    type: object
  EventSourceList:
    items:
      $ref: '#/definitions/EventSourceConfiguration'
    type: array
  FunctionArn:
    pattern: >-
      arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?
    type: string
  FunctionCodeLocation:
    description: The object for the Lambda function location.
    properties:
      Location:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The presigned URL you can use to download the function's .zip file
              that you previously uploaded. The URL is valid for up to 10
              minutes.
      RepositoryType:
        allOf:
          - $ref: '#/definitions/String'
          - description: The repository from which you can download the function.
    type: object
  FunctionConfiguration:
    description: A complex type that describes function metadata.
    properties:
      CodeSize:
        allOf:
          - $ref: '#/definitions/Long'
          - description: 'The size, in bytes, of the function .zip file you uploaded.'
      ConfigurationId:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              A Lambda-assigned unique identifier for the current function code
              and related configuration.
      Description:
        allOf:
          - $ref: '#/definitions/Description'
          - description: The user-provided description.
      FunctionARN:
        allOf:
          - $ref: '#/definitions/FunctionArn'
          - description: The Amazon Resource Name (ARN) assigned to the function.
      FunctionName:
        allOf:
          - $ref: '#/definitions/FunctionName'
          - description: The name of the function.
      Handler:
        allOf:
          - $ref: '#/definitions/Handler'
          - description: The function Lambda calls to begin executing your function.
      LastModified:
        allOf:
          - $ref: '#/definitions/Timestamp'
          - description: The timestamp of the last time you updated the function.
      MemorySize:
        allOf:
          - $ref: '#/definitions/MemorySize'
          - description: >-
              The memory size, in MB, you configured for the function. Must be a
              multiple of 64 MB.
      Mode:
        allOf:
          - $ref: '#/definitions/Mode'
          - description: 'The type of the Lambda function you uploaded. '
      Role:
        allOf:
          - $ref: '#/definitions/RoleArn'
          - description: >-
              The Amazon Resource Name (ARN) of the IAM role that Lambda assumes
              when it executes your function to access any other Amazon Web
              Services (AWS) resources.
      Runtime:
        allOf:
          - $ref: '#/definitions/Runtime'
          - description: The runtime environment for the Lambda function.
      Timeout:
        allOf:
          - $ref: '#/definitions/Timeout'
          - description: >-
              The function execution time at which Lambda should terminate the
              function. Because the execution time has cost implications, we
              recommend you set this value based on your expected execution
              time. The default is 3 seconds. 
    type: object
  FunctionList:
    items:
      $ref: '#/definitions/FunctionConfiguration'
    type: array
  FunctionName:
    maxLength: 64
    minLength: 1
    pattern: '[a-zA-Z0-9-_]+'
    type: string
  GetEventSourceRequest:
    properties: {}
    title: GetEventSourceRequest
    type: object
  GetFunctionConfigurationRequest:
    properties: {}
    title: GetFunctionConfigurationRequest
    type: object
  GetFunctionRequest:
    properties: {}
    title: GetFunctionRequest
    type: object
  GetFunctionResponse:
    description: >-
      This response contains the object for AWS Lambda function location (see
      <a>API_FunctionCodeLocation</a>
    properties:
      Code:
        $ref: '#/definitions/FunctionCodeLocation'
      Configuration:
        $ref: '#/definitions/FunctionConfiguration'
    type: object
  Handler:
    pattern: '[a-zA-Z0-9./\-_]+'
    type: string
  HttpStatus:
    type: integer
  Integer:
    type: integer
  InvalidParameterValueException:
    description: >-
      One of the parameters in the request is invalid. For example, if you
      provided an IAM role for AWS Lambda to assume in the
      <code>UploadFunction</code> or the
      <code>UpdateFunctionConfiguration</code> API, that AWS Lambda is unable to
      assume you will get this exception. 
    properties:
      Type:
        $ref: '#/definitions/String'
      message:
        $ref: '#/definitions/String'
    type: object
  InvalidRequestContentException:
    description: The request body could not be parsed as JSON.
    properties:
      Type:
        $ref: '#/definitions/String'
      message:
        $ref: '#/definitions/String'
    type: object
  InvokeAsyncRequest:
    properties:
      InvokeArgs:
        allOf:
          - $ref: '#/definitions/Blob'
          - description: JSON that you want to provide to your Lambda function as input.
    required:
      - InvokeArgs
    title: InvokeAsyncRequest
    type: object
  InvokeAsyncResponse:
    description: 'Upon success, it returns empty response. Otherwise, throws an exception.'
    properties:
      Status:
        allOf:
          - $ref: '#/definitions/HttpStatus'
          - description: It will be 202 upon success.
    type: object
  ListEventSourcesRequest:
    properties: {}
    title: ListEventSourcesRequest
    type: object
  ListEventSourcesResponse:
    description: Contains a list of event sources (see <a>API_EventSourceConfiguration</a>)
    properties:
      EventSources:
        allOf:
          - $ref: '#/definitions/EventSourceList'
          - description: An arrary of <code>EventSourceConfiguration</code> objects.
      NextMarker:
        allOf:
          - $ref: '#/definitions/String'
          - description: 'A string, present if there are more event source mappings.'
    type: object
  ListFunctionsRequest:
    properties: {}
    title: ListFunctionsRequest
    type: object
  ListFunctionsResponse:
    description: >-
      Contains a list of AWS Lambda function configurations (see
      <a>API_FunctionConfiguration</a>.
    properties:
      Functions:
        allOf:
          - $ref: '#/definitions/FunctionList'
          - description: A list of Lambda functions.
      NextMarker:
        allOf:
          - $ref: '#/definitions/String'
          - description: 'A string, present if there are more functions.'
    type: object
  Long:
    type: integer
  Map:
    additionalProperties:
      $ref: '#/definitions/String'
    type: object
  MaxListItems:
    maximum: 10000
    minimum: 1
    type: integer
  MemorySize:
    maximum: 1024
    minimum: 128
    type: integer
  Mode:
    enum:
      - event
    type: string
  RemoveEventSourceRequest:
    properties: {}
    title: RemoveEventSourceRequest
    type: object
  ResourceNotFoundException:
    description: The function or the event source specified in the request does not exist.
    properties:
      Message:
        $ref: '#/definitions/String'
      Type:
        $ref: '#/definitions/String'
    type: object
  RoleArn:
    pattern: 'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
    type: string
  Runtime:
    enum:
      - nodejs
    type: string
  ServiceException:
    description: The AWS Lambda service encountered an internal error.
    properties:
      Message:
        $ref: '#/definitions/String'
      Type:
        $ref: '#/definitions/String'
    type: object
  String:
    type: string
  Timeout:
    maximum: 60
    minimum: 1
    type: integer
  Timestamp:
    format: date-time
    type: string
  UpdateFunctionConfigurationRequest:
    properties: {}
    title: UpdateFunctionConfigurationRequest
    type: object
  UploadFunctionRequest:
    properties:
      FunctionZip:
        allOf:
          - $ref: '#/definitions/Blob'
          - description: >-
              A .zip file containing your packaged source code. For more
              information about creating a .zip file, go to <a
              href="http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events.html">AWS
              LambdaL How it Works</a> in the AWS Lambda Developer Guide. 
    required:
      - FunctionZip
    title: UploadFunctionRequest
    type: object
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/lambda/'
host: lambda.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    <fullname>AWS Lambda</fullname> <p><b>Overview</b></p> <p>This is the AWS
    Lambda API Reference. The AWS Lambda Developer Guide provides additional
    information. For the service overview, go to <a
    href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is AWS
    Lambda</a>, and for information about how the service works, go to <a
    href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
    LambdaL How it Works</a> in the AWS Lambda Developer Guide.</p>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS Lambda
  version: '2014-11-11'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2014-11-11.normal.json
      x-apisguru-driver: external
  x-preferred: false
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: lambda
paths:
  /2014-11-13/event-source-mappings/:
    get:
      description: >-
        <p>Returns a list of event source mappings you created using the
        <code>AddEventSource</code> (see <a>AddEventSource</a>), where you
        identify a stream as event source. This list does not include Amazon S3
        event sources. </p> <p>For each mapping, the API returns configuration
        information. You can optionally specify filters to retrieve specific
        event source mappings.</p> <p>This operation requires permission for the
        <code>lambda:ListEventSources</code> action.</p>
      operationId: ListEventSources
      parameters:
        - description: The Amazon Resource Name (ARN) of the Amazon Kinesis stream.
          in: query
          name: EventSource
          required: false
          type: string
        - description: The name of the AWS Lambda function.
          in: query
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: false
          type: string
        - description: >-
            Optional string. An opaque pagination token returned from a previous
            <code>ListEventSources</code> operation. If present, specifies to
            continue the list from where the returning call left off. 
          in: query
          name: Marker
          required: false
          type: string
        - description: >-
            Optional integer. Specifies the maximum number of event sources to
            return in response. This value must be greater than 0.
          in: query
          maximum: 10000
          minimum: 1
          name: MaxItems
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListEventSourcesResponse'
        '400':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
          x-aws-exception: true
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Identifies a stream as an event source for an AWS Lambda function. It
        can be either an Amazon Kinesis stream or a Amazon DynamoDB stream. AWS
        Lambda invokes the specified function when records are posted to the
        stream.</p> <p>This is the pull model, where AWS Lambda invokes the
        function. For more information, go to <a
        href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
        Lambda: How it Works</a> in the AWS Lambda Developer Guide.</p> <p>This
        association between an Amazon Kinesis stream and an AWS Lambda function
        is called the event source mapping. You provide the configuration
        information (for example, which stream to read from and which AWS Lambda
        function to invoke) for the event source mapping in the request
        body.</p> <p> Each event source, such as a Kinesis stream, can only be
        associated with one AWS Lambda function. If you call
        <a>AddEventSource</a> for an event source that is already mapped to
        another AWS Lambda function, the existing mapping is updated to call the
        new function instead of the old one. </p> <p>This operation requires
        permission for the <code>iam:PassRole</code> action for the IAM role. It
        also requires permission for the <code>lambda:AddEventSource</code>
        action.</p>
      operationId: AddEventSource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              BatchSize:
                description: >-
                  The largest number of records that AWS Lambda will give to
                  your function in a single event. The default is 100 records.
                type: integer
              EventSource:
                description: >-
                  The Amazon Resource Name (ARN) of the Amazon Kinesis stream
                  that is the event source. Any record added to this stream
                  causes AWS Lambda to invoke your Lambda function. AWS Lambda
                  POSTs the Amazon Kinesis event, containing records, to your
                  Lambda function as JSON.
                type: string
              FunctionName:
                description: >-
                  The Lambda function to invoke when AWS Lambda detects an event
                  on the stream.
                maxLength: 64
                minLength: 1
                pattern: '[a-zA-Z0-9-_]+'
                type: string
              Parameters:
                additionalProperties:
                  $ref: '#/definitions/String'
                description: >-
                  A map (key-value pairs) defining the configuration for AWS
                  Lambda to use when reading the event source. Currently, AWS
                  Lambda supports only the <code>InitialPositionInStream</code>
                  key. The valid values are: "TRIM_HORIZON" and "LATEST". The
                  default value is "TRIM_HORIZON". For more information, go to
                  <a
                  href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">ShardIteratorType</a>
                  in the Amazon Kinesis Service API Reference. 
                type: object
              Role:
                description: >-
                  The ARN of the IAM role (invocation role) that AWS Lambda can
                  assume to read from the stream and invoke the function.
                pattern: 'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
                type: string
            required:
              - EventSource
              - FunctionName
              - Role
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EventSourceConfiguration'
        '400':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
  '/2014-11-13/event-source-mappings/{UUID}':
    delete:
      description: >-
        <p>Removes an event source mapping. This means AWS Lambda will no longer
        invoke the function for events in the associated source.</p> <p>This
        operation requires permission for the
        <code>lambda:RemoveEventSource</code> action.</p>
      operationId: RemoveEventSource
      parameters:
        - description: The event source mapping ID.
          in: path
          name: UUID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '400':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
          x-aws-exception: true
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    get:
      description: >-
        <p>Returns configuration information for the specified event source
        mapping (see <a>AddEventSource</a>).</p> <p>This operation requires
        permission for the <code>lambda:GetEventSource</code> action.</p>
      operationId: GetEventSource
      parameters:
        - description: The AWS Lambda assigned ID of the event source mapping.
          in: path
          name: UUID
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EventSourceConfiguration'
        '400':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
          x-aws-exception: true
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  /2014-11-13/functions/:
    get:
      description: >-
        <p>Returns a list of your Lambda functions. For each function, the
        response includes the function configuration information. You must use
        <a>GetFunction</a> to retrieve the code for your function.</p> <p>This
        operation requires permission for the <code>lambda:ListFunctions</code>
        action.</p>
      operationId: ListFunctions
      parameters:
        - description: >-
            Optional string. An opaque pagination token returned from a previous
            <code>ListFunctions</code> operation. If present, indicates where to
            continue the listing. 
          in: query
          name: Marker
          required: false
          type: string
        - description: >-
            Optional integer. Specifies the maximum number of AWS Lambda
            functions to return in response. This parameter value must be
            greater than 0.
          in: query
          maximum: 10000
          minimum: 1
          name: MaxItems
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListFunctionsResponse'
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/2014-11-13/functions/{FunctionName}':
    delete:
      description: >-
        <p>Deletes the specified Lambda function code and configuration.</p>
        <p>This operation requires permission for the
        <code>lambda:DeleteFunction</code> action.</p>
      operationId: DeleteFunction
      parameters:
        - description: The Lambda function to delete.
          in: path
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    get:
      description: >-
        <p>Returns the configuration information of the Lambda function and a
        presigned URL link to the .zip file you uploaded with
        <a>UploadFunction</a> so you can download the .zip file. Note that the
        URL is valid for up to 10 minutes. The configuration information is the
        same information you provided as parameters when uploading the
        function.</p> <p>This operation requires permission for the
        <code>lambda:GetFunction</code> action.</p>
      operationId: GetFunction
      parameters:
        - description: The Lambda function name.
          in: path
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFunctionResponse'
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/2014-11-13/functions/{FunctionName}#Runtime&Role&Handler&Mode':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: >-
        <p>Creates a new Lambda function or updates an existing function. The
        function metadata is created from the request parameters, and the code
        for the function is provided by a .zip file in the request body. If the
        function name already exists, the existing Lambda function is updated
        with the new code and metadata. </p> <p>This operation requires
        permission for the <code>lambda:UploadFunction</code> action.</p>
      operationId: UploadFunction
      parameters:
        - description: >-
            The name you want to assign to the function you are uploading. The
            function names appear in the console and are returned in the
            <a>ListFunctions</a> API. Function names are used to specify
            functions to other AWS Lambda APIs, such as <a>InvokeAsync</a>. 
          in: path
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: true
          type: string
        - description: >-
            The runtime environment for the Lambda function you are uploading.
            Currently, Lambda supports only "nodejs" as the runtime.
          enum:
            - nodejs
          in: query
          name: Runtime
          required: true
          type: string
        - description: >-
            The Amazon Resource Name (ARN) of the IAM role that Lambda assumes
            when it executes your function to access any other Amazon Web
            Services (AWS) resources. 
          in: query
          name: Role
          pattern: 'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
          required: true
          type: string
        - description: >-
            The function that Lambda calls to begin execution. For Node.js, it
            is the <i>module-name</i>.<i>export</i> value in your function. 
          in: query
          name: Handler
          pattern: '[a-zA-Z0-9./\-_]+'
          required: true
          type: string
        - description: >-
            How the Lambda function will be invoked. Lambda supports only the
            "event" mode. 
          enum:
            - event
          in: query
          name: Mode
          required: true
          type: string
        - description: >-
            A short, user-defined function description. Lambda does not use this
            value. Assign a meaningful description as you see fit.
          in: query
          maxLength: 256
          minLength: 0
          name: Description
          required: false
          type: string
        - description: >-
            The function execution time at which Lambda should terminate the
            function. Because the execution time has cost implications, we
            recommend you set this value based on your expected execution time.
            The default is 3 seconds. 
          in: query
          maximum: 60
          minimum: 1
          name: Timeout
          required: false
          type: integer
        - description: >-
            The amount of memory, in MB, your Lambda function is given. Lambda
            uses this memory size to infer the amount of CPU allocated to your
            function. Your function use-case determines your CPU and memory
            requirements. For example, database operation might need less memory
            compared to image processing function. The default value is 128 MB.
            The value must be a multiple of 64 MB.
          in: query
          maximum: 1024
          minimum: 128
          name: MemorySize
          required: false
          type: integer
        - in: body
          name: body
          required: true
          schema:
            properties:
              FunctionZip:
                description: >-
                  A .zip file containing your packaged source code. For more
                  information about creating a .zip file, go to <a
                  href="http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events.html">AWS
                  LambdaL How it Works</a> in the AWS Lambda Developer Guide. 
                type: string
            required:
              - FunctionZip
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '400':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
          x-aws-exception: true
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
  '/2014-11-13/functions/{FunctionName}/configuration':
    get:
      description: >-
        <p>Returns the configuration information of the Lambda function. This
        the same information you provided as parameters when uploading the
        function by using <a>UploadFunction</a>.</p> <p>This operation requires
        permission for the <code>lambda:GetFunctionConfiguration</code>
        operation.</p>
      operationId: GetFunctionConfiguration
      parameters:
        - description: >-
            The name of the Lambda function for which you want to retrieve the
            configuration information.
          in: path
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      description: >-
        <p>Updates the configuration parameters for the specified Lambda
        function by using the values provided in the request. You provide only
        the parameters you want to change. This operation must only be used on
        an existing Lambda function and cannot be used to update the function's
        code. </p> <p>This operation requires permission for the
        <code>lambda:UpdateFunctionConfiguration</code> action.</p>
      operationId: UpdateFunctionConfiguration
      parameters:
        - description: The name of the Lambda function.
          in: path
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: true
          type: string
        - description: >-
            The Amazon Resource Name (ARN) of the IAM role that Lambda will
            assume when it executes your function. 
          in: query
          name: Role
          pattern: 'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
          required: false
          type: string
        - description: >-
            The function that Lambda calls to begin executing your function. For
            Node.js, it is the <i>module-name.export</i> value in your
            function. 
          in: query
          name: Handler
          pattern: '[a-zA-Z0-9./\-_]+'
          required: false
          type: string
        - description: >-
            A short user-defined function description. Lambda does not use this
            value. Assign a meaningful description as you see fit.
          in: query
          maxLength: 256
          minLength: 0
          name: Description
          required: false
          type: string
        - description: >-
            The function execution time at which Lambda should terminate the
            function. Because the execution time has cost implications, we
            recommend you set this value based on your expected execution time.
            The default is 3 seconds. 
          in: query
          maximum: 60
          minimum: 1
          name: Timeout
          required: false
          type: integer
        - description: >-
            The amount of memory, in MB, your Lambda function is given. Lambda
            uses this memory size to infer the amount of CPU allocated to your
            function. Your function use-case determines your CPU and memory
            requirements. For example, a database operation might need less
            memory compared to an image processing function. The default value
            is 128 MB. The value must be a multiple of 64 MB.
          in: query
          maximum: 1024
          minimum: 128
          name: MemorySize
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '400':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
          x-aws-exception: true
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
  '/2014-11-13/functions/{FunctionName}/invoke-async/':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Submits an invocation request to AWS Lambda. Upon receiving the
        request, Lambda executes the specified function asynchronously. To see
        the logs generated by the Lambda function execution, see the CloudWatch
        logs console.</p> <p>This operation requires permission for the
        <code>lambda:InvokeAsync</code> action.</p>
      operationId: InvokeAsync
      parameters:
        - description: The Lambda function name.
          in: path
          maxLength: 64
          minLength: 1
          name: FunctionName
          pattern: '[a-zA-Z0-9-_]+'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              InvokeArgs:
                description: >-
                  JSON that you want to provide to your Lambda function as
                  input.
                type: string
            required:
              - InvokeArgs
            type: object
      produces:
        - application/json
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/InvokeAsyncResponse'
        '400':
          description: InvalidRequestContentException
          schema:
            $ref: '#/definitions/InvalidRequestContentException'
          x-aws-exception: true
        '404':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
          x-aws-exception: true
        '500':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
          x-aws-exception: true
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string
x-hasEquivalentPaths: true

