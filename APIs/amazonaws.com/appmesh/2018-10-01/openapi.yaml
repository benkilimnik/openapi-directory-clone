basePath: /
definitions:
  Arn:
    type: string
  Backends:
    items:
      $ref: '#/definitions/ServiceName'
    type: array
  BadRequestException: {}
  ConflictException: {}
  CreateMeshInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name to use for the service mesh.
    required:
      - meshName
    title: CreateMeshInput
    type: object
  CreateMeshOutput:
    description: ''
    properties:
      mesh:
        allOf:
          - $ref: '#/definitions/MeshData'
          - description: >-
              The full description of your service mesh following the create
              call.
    type: object
  CreateRouteInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      routeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name to use for the route.
      spec:
        allOf:
          - $ref: '#/definitions/RouteSpec'
          - description: The route specification to apply.
    required:
      - routeName
      - spec
    title: CreateRouteInput
    type: object
  CreateRouteOutput:
    description: ''
    properties:
      route:
        allOf:
          - $ref: '#/definitions/RouteData'
          - description: The full description of your mesh following the create call.
    type: object
  CreateVirtualNodeInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      spec:
        allOf:
          - $ref: '#/definitions/VirtualNodeSpec'
          - description: The virtual node specification to apply.
      virtualNodeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name to use for the virtual node.
    required:
      - spec
      - virtualNodeName
    title: CreateVirtualNodeInput
    type: object
  CreateVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        allOf:
          - $ref: '#/definitions/VirtualNodeData'
          - description: >-
              The full description of your virtual node following the create
              call.
    type: object
  CreateVirtualRouterInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      spec:
        allOf:
          - $ref: '#/definitions/VirtualRouterSpec'
          - description: The virtual router specification to apply.
      virtualRouterName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name to use for the virtual router.
    required:
      - spec
      - virtualRouterName
    title: CreateVirtualRouterInput
    type: object
  CreateVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        allOf:
          - $ref: '#/definitions/VirtualRouterData'
          - description: >-
              The full description of your virtual router following the create
              call.
    type: object
  DeleteMeshInput:
    description: ''
    properties: {}
    title: DeleteMeshInput
    type: object
  DeleteMeshOutput:
    description: ''
    properties:
      mesh:
        allOf:
          - $ref: '#/definitions/MeshData'
          - description: The service mesh that was deleted.
    type: object
  DeleteRouteInput:
    description: ''
    properties: {}
    title: DeleteRouteInput
    type: object
  DeleteRouteOutput:
    description: ''
    properties:
      route:
        allOf:
          - $ref: '#/definitions/RouteData'
          - description: The route that was deleted.
    type: object
  DeleteVirtualNodeInput:
    description: ''
    properties: {}
    title: DeleteVirtualNodeInput
    type: object
  DeleteVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        allOf:
          - $ref: '#/definitions/VirtualNodeData'
          - description: The virtual node that was deleted.
    type: object
  DeleteVirtualRouterInput:
    description: ''
    properties: {}
    title: DeleteVirtualRouterInput
    type: object
  DeleteVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        allOf:
          - $ref: '#/definitions/VirtualRouterData'
          - description: The virtual router that was deleted.
    type: object
  DescribeMeshInput:
    description: ''
    properties: {}
    title: DescribeMeshInput
    type: object
  DescribeMeshOutput:
    description: ''
    properties:
      mesh:
        allOf:
          - $ref: '#/definitions/MeshData'
          - description: The full description of your service mesh.
    type: object
  DescribeRouteInput:
    description: ''
    properties: {}
    title: DescribeRouteInput
    type: object
  DescribeRouteOutput:
    description: ''
    properties:
      route:
        allOf:
          - $ref: '#/definitions/RouteData'
          - description: The full description of your route.
    type: object
  DescribeVirtualNodeInput:
    description: ''
    properties: {}
    title: DescribeVirtualNodeInput
    type: object
  DescribeVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        allOf:
          - $ref: '#/definitions/VirtualNodeData'
          - description: The full description of your virtual node.
    type: object
  DescribeVirtualRouterInput:
    description: ''
    properties: {}
    title: DescribeVirtualRouterInput
    type: object
  DescribeVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        allOf:
          - $ref: '#/definitions/VirtualRouterData'
          - description: The full description of your virtual router.
    type: object
  DnsServiceDiscovery:
    description: The DNS service discovery information for your virtual node.
    properties:
      serviceName:
        allOf:
          - $ref: '#/definitions/ServiceName'
          - description: The DNS service name for your virtual node.
    type: object
  ForbiddenException: {}
  HealthCheckIntervalMillis:
    maximum: 300000
    minimum: 5000
    type: integer
  HealthCheckPolicy:
    description: >-
      An object representing the health check policy for a virtual node's
      listener.
    properties:
      healthyThreshold:
        allOf:
          - $ref: '#/definitions/HealthCheckThreshold'
          - description: >-
              The number of consecutive successful health checks that must occur
              before declaring
                       listener healthy.
      intervalMillis:
        allOf:
          - $ref: '#/definitions/HealthCheckIntervalMillis'
          - description: >-
              The time period in milliseconds between each health check
              execution.
      path:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The destination path for the health check request. This is only
              required if the
                       specified protocol is HTTP; if the protocol is TCP, then this parameter is ignored.
      port:
        allOf:
          - $ref: '#/definitions/PortNumber'
          - description: >-
              The destination port for the health check request. This port must
              match the port defined
                       in the <a>PortMapping</a> for the listener.
      protocol:
        allOf:
          - $ref: '#/definitions/PortProtocol'
          - description: The protocol for the health check request.
      timeoutMillis:
        allOf:
          - $ref: '#/definitions/HealthCheckTimeoutMillis'
          - description: >-
              The amount of time to wait when receiving a response from the
              health check, in
                       milliseconds.
      unhealthyThreshold:
        allOf:
          - $ref: '#/definitions/HealthCheckThreshold'
          - description: >-
              The number of consecutive failed health checks that must occur
              before declaring a
                       virtual node unhealthy. 
    required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
    type: object
  HealthCheckThreshold:
    maximum: 10
    minimum: 2
    type: integer
  HealthCheckTimeoutMillis:
    maximum: 60000
    minimum: 2000
    type: integer
  HttpRoute:
    description: An object representing the HTTP routing specification for a route.
    properties:
      action:
        allOf:
          - $ref: '#/definitions/HttpRouteAction'
          - description: The action to take if a match is determined.
      match:
        allOf:
          - $ref: '#/definitions/HttpRouteMatch'
          - description: The criteria for determining an HTTP request match.
    type: object
  HttpRouteAction:
    description: >-
      An object representing the traffic distribution requirements for matched
      HTTP
               requests.
    properties:
      weightedTargets:
        allOf:
          - $ref: '#/definitions/WeightedTargets'
          - description: >-
              The targets that traffic is routed to when a request matches the
              route. You can specify
                       one or more targets and their relative weights with which to distribute traffic.
    type: object
  HttpRouteMatch:
    description: >-
      An object representing the requirements for a route to match HTTP requests
      for a virtual
               router.
    properties:
      prefix:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Specifies the path with which to match requests. This parameter
              must always start with
                          <code>/</code>, which by itself matches all requests to the virtual router service name.
                       You can also match for path-based routing of requests. For example, if your virtual router
                       service name is <code>my-service.local</code>, and you want the route to match requests to
                          <code>my-service.local/metrics</code>, then your prefix should be
                       <code>/metrics</code>.
    type: object
  InternalServerErrorException: {}
  LimitExceededException: {}
  ListMeshesInput:
    description: ''
    properties: {}
    title: ListMeshesInput
    type: object
  ListMeshesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListMeshesOutput:
    description: ''
    properties:
      meshes:
        allOf:
          - $ref: '#/definitions/MeshList'
          - description: The list of existing service meshes.
      nextToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The <code>nextToken</code> value to include in a future
              <code>ListMeshes</code>
                       request. When the results of a <code>ListMeshes</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
    required:
      - meshes
    type: object
  ListRoutesInput:
    description: ''
    properties: {}
    title: ListRoutesInput
    type: object
  ListRoutesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListRoutesOutput:
    description: ''
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The <code>nextToken</code> value to include in a future
              <code>ListRoutes</code>
                       request. When the results of a <code>ListRoutes</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
      routes:
        allOf:
          - $ref: '#/definitions/RouteList'
          - description: >-
              The list of existing routes for the specified service mesh and
              virtual router.
    required:
      - routes
    type: object
  ListVirtualNodesInput:
    description: ''
    properties: {}
    title: ListVirtualNodesInput
    type: object
  ListVirtualNodesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListVirtualNodesOutput:
    description: ''
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The <code>nextToken</code> value to include in a future
              <code>ListVirtualNodes</code>
                       request. When the results of a <code>ListVirtualNodes</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
      virtualNodes:
        allOf:
          - $ref: '#/definitions/VirtualNodeList'
          - description: The list of existing virtual nodes for the specified service mesh.
    required:
      - virtualNodes
    type: object
  ListVirtualRoutersInput:
    description: ''
    properties: {}
    title: ListVirtualRoutersInput
    type: object
  ListVirtualRoutersLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListVirtualRoutersOutput:
    description: ''
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The <code>nextToken</code> value to include in a future
              <code>ListVirtualRouters</code>
                       request. When the results of a <code>ListVirtualRouters</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
      virtualRouters:
        allOf:
          - $ref: '#/definitions/VirtualRouterList'
          - description: >-
              The list of existing virtual routers for the specified service
              mesh.
    required:
      - virtualRouters
    type: object
  Listener:
    description: An object representing a listener for a virtual node.
    properties:
      healthCheck:
        allOf:
          - $ref: '#/definitions/HealthCheckPolicy'
          - description: The health check information for the listener.
      portMapping:
        allOf:
          - $ref: '#/definitions/PortMapping'
          - description: The port mapping information for the listener.
    type: object
  Listeners:
    items:
      $ref: '#/definitions/Listener'
    type: array
  Long:
    type: integer
  MeshData:
    description: An object representing a service mesh returned by a describe operation.
    properties:
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh.
      metadata:
        allOf:
          - $ref: '#/definitions/ResourceMetadata'
          - description: The associated metadata for the service mesh.
      status:
        allOf:
          - $ref: '#/definitions/MeshStatus'
          - description: The status of the service mesh.
    required:
      - meshName
      - metadata
    type: object
  MeshList:
    items:
      $ref: '#/definitions/MeshRef'
    type: array
  MeshRef:
    description: An object representing a service mesh returned by a list operation.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: The full Amazon Resource Name (ARN) of the service mesh.
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh.
    type: object
  MeshStatus:
    description: An object representing the status of a service mesh.
    properties:
      status:
        allOf:
          - $ref: '#/definitions/MeshStatusCode'
          - description: The current mesh status.
    type: object
  MeshStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  NotFoundException: {}
  PercentInt:
    maximum: 100
    minimum: 0
    type: integer
  PortMapping:
    description: An object representing a virtual node listener port mapping.
    properties:
      port:
        allOf:
          - $ref: '#/definitions/PortNumber'
          - description: The port used for the port mapping.
      protocol:
        allOf:
          - $ref: '#/definitions/PortProtocol'
          - description: The protocol used for the port mapping.
    type: object
  PortNumber:
    maximum: 65535
    minimum: 1
    type: integer
  PortProtocol:
    enum:
      - http
      - tcp
    type: string
  ResourceInUseException: {}
  ResourceMetadata:
    description: An object representing metadata for a resource.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: |-
              <p>The full Amazon Resource Name (ARN) for the resource.</p>
                       <note>
                          <p>After you create a virtual node, set this value (either the full ARN or the
                          truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,
                          as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's
                          Envoy proxy container in your task definition or pod spec. This is then mapped to the
                             <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                          <p>If you require your Envoy stats or tracing to use a different name, you can override
                          the <code>node.cluster</code> value that is set by
                             <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                             <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                       </note>
      createdAt:
        allOf:
          - $ref: '#/definitions/Timestamp'
          - description: >-
              The Unix epoch timestamp in seconds for when the resource was
              created.
      lastUpdatedAt:
        allOf:
          - $ref: '#/definitions/Timestamp'
          - description: >-
              The Unix epoch timestamp in seconds for when the resource was last
              updated.
      uid:
        allOf:
          - $ref: '#/definitions/String'
          - description: The unique identifier for the resource.
      version:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The version of the resource. Resources are created at version 1,
              and this version is
                       incremented each time they are updated.
    type: object
  ResourceName:
    maxLength: 255
    minLength: 1
    type: string
  RouteData:
    description: An object representing a route returned by a describe operation.
    properties:
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh in which the route resides.
      metadata:
        allOf:
          - $ref: '#/definitions/ResourceMetadata'
          - description: The associated metadata for the route.
      routeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the route.
      spec:
        allOf:
          - $ref: '#/definitions/RouteSpec'
          - description: The specifications of the route.
      status:
        allOf:
          - $ref: '#/definitions/RouteStatus'
          - description: The status of the route.
      virtualRouterName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The virtual router with which the route is associated.
    required:
      - meshName
      - routeName
      - virtualRouterName
    type: object
  RouteList:
    items:
      $ref: '#/definitions/RouteRef'
    type: array
  RouteRef:
    description: An object representing a route returned by a list operation.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: The full Amazon Resource Name (ARN) for the route.
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh in which the route resides.
      routeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the route.
      virtualRouterName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The virtual router with which the route is associated.
    type: object
  RouteSpec:
    description: An object representing the specification of a route.
    properties:
      httpRoute:
        allOf:
          - $ref: '#/definitions/HttpRoute'
          - description: The HTTP routing information for the route.
    type: object
  RouteStatus:
    description: An object representing the current status of a route.
    properties:
      status:
        allOf:
          - $ref: '#/definitions/RouteStatusCode'
          - description: The current status for the route.
    type: object
  RouteStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  ServiceDiscovery:
    description: >-
      An object representing the service discovery information for a virtual
      node.
    properties:
      dns:
        allOf:
          - $ref: '#/definitions/DnsServiceDiscovery'
          - description: Specifies the DNS service name for the virtual node.
    type: object
  ServiceName:
    type: string
  ServiceNames:
    items:
      $ref: '#/definitions/ServiceName'
    maxItems: 10
    type: array
  ServiceUnavailableException: {}
  String:
    type: string
  Timestamp:
    format: date-time
    type: string
  TooManyRequestsException: {}
  UpdateRouteInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      spec:
        allOf:
          - $ref: '#/definitions/RouteSpec'
          - description: >-
              The new route specification to apply. This overwrites the existing
              data.
    required:
      - spec
    title: UpdateRouteInput
    type: object
  UpdateRouteOutput:
    description: ''
    properties:
      route:
        allOf:
          - $ref: '#/definitions/RouteData'
          - description: A full description of the route that was updated.
    type: object
  UpdateVirtualNodeInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      spec:
        allOf:
          - $ref: '#/definitions/VirtualNodeSpec'
          - description: >-
              The new virtual node specification to apply. This overwrites the
              existing data.
    required:
      - spec
    title: UpdateVirtualNodeInput
    type: object
  UpdateVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        allOf:
          - $ref: '#/definitions/VirtualNodeData'
          - description: A full description of the virtual node that was updated.
    type: object
  UpdateVirtualRouterInput:
    description: ''
    properties:
      clientToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Unique, case-sensitive identifier that you provide to ensure the
              idempotency of the

              request. Up to 36 letters, numbers, hyphens, and underscores are
              allowed.
      spec:
        allOf:
          - $ref: '#/definitions/VirtualRouterSpec'
          - description: >-
              The new virtual router specification to apply. This overwrites the
              existing data.
    required:
      - spec
    title: UpdateVirtualRouterInput
    type: object
  UpdateVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        allOf:
          - $ref: '#/definitions/VirtualRouterData'
          - description: A full description of the virtual router that was updated.
    type: object
  VirtualNodeData:
    description: An object representing a virtual node returned by a describe operation.
    properties:
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh in which the virtual node resides.
      metadata:
        allOf:
          - $ref: '#/definitions/ResourceMetadata'
          - description: The associated metadata for the virtual node.
      spec:
        allOf:
          - $ref: '#/definitions/VirtualNodeSpec'
          - description: The specifications of the virtual node.
      status:
        allOf:
          - $ref: '#/definitions/VirtualNodeStatus'
          - description: The current status for the virtual node.
      virtualNodeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the virtual node.
    required:
      - meshName
      - virtualNodeName
    type: object
  VirtualNodeList:
    items:
      $ref: '#/definitions/VirtualNodeRef'
    type: array
  VirtualNodeRef:
    description: An object representing a virtual node returned by a list operation.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual node.
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh in which the virtual node resides.
      virtualNodeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the virtual node.
    type: object
  VirtualNodeSpec:
    description: An object representing the specification of a virtual node.
    properties:
      backends:
        allOf:
          - $ref: '#/definitions/Backends'
          - description: >-
              The backends to which the virtual node is expected to send
              outbound traffic.
      listeners:
        allOf:
          - $ref: '#/definitions/Listeners'
          - description: >-
              The listeners from which the virtual node is expected to receive
              inbound traffic.
      serviceDiscovery:
        allOf:
          - $ref: '#/definitions/ServiceDiscovery'
          - description: The service discovery information for the virtual node.
    type: object
  VirtualNodeStatus:
    description: An object representing the current status of the virtual node.
    properties:
      status:
        allOf:
          - $ref: '#/definitions/VirtualNodeStatusCode'
          - description: The current status of the virtual node.
    type: object
  VirtualNodeStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  VirtualRouterData:
    description: An object representing a virtual router returned by a describe operation.
    properties:
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh in which the virtual router resides.
      metadata:
        allOf:
          - $ref: '#/definitions/ResourceMetadata'
          - description: The associated metadata for the virtual router.
      spec:
        allOf:
          - $ref: '#/definitions/VirtualRouterSpec'
          - description: The specifications of the virtual router.
      status:
        allOf:
          - $ref: '#/definitions/VirtualRouterStatus'
          - description: The current status of the virtual router.
      virtualRouterName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the virtual router.
    required:
      - meshName
      - virtualRouterName
    type: object
  VirtualRouterList:
    items:
      $ref: '#/definitions/VirtualRouterRef'
    type: array
  VirtualRouterRef:
    description: An object representing a virtual router returned by a list operation.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual router.
      meshName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the service mesh in which the virtual router resides.
      virtualRouterName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the virtual router.
    type: object
  VirtualRouterSpec:
    description: An object representing the specification of a virtual router.
    properties:
      serviceNames:
        allOf:
          - $ref: '#/definitions/ServiceNames'
          - description: >-
              The service mesh service names to associate with the virtual
              router.
    type: object
  VirtualRouterStatus:
    description: 'An object representing the status of a virtual router. '
    properties:
      status:
        allOf:
          - $ref: '#/definitions/VirtualRouterStatusCode'
          - description: The current status of the virtual router.
    type: object
  VirtualRouterStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  WeightedTarget:
    description: >-
      An object representing a target and its relative weight. Traffic is
      distributed across
               targets according to their relative weight. For example, a weighted target with a relative
               weight of 50 receives five times as much traffic as one with a relative weight of
               10.
    properties:
      virtualNode:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The virtual node to associate with the weighted target.
      weight:
        allOf:
          - $ref: '#/definitions/PercentInt'
          - description: The relative weight of the weighted target.
    type: object
  WeightedTargets:
    items:
      $ref: '#/definitions/WeightedTarget'
    type: array
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appmesh/'
host: appmesh.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it
    easy to monitor and
             control containerized microservices. App Mesh standardizes how your microservices
             communicate, giving you end-to-end visibility and helping to ensure high-availability for
             your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with Amazon ECS
             (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>
             <note>
                <p>App Mesh supports containerized microservice applications that use service discovery
                naming for their components. To use App Mesh, you must have a containerized application
                running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For
                more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.
                For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS App Mesh
  version: '2018-10-01'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-aws-signingName: appmesh
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2018-10-01.normal.json
      x-apisguru-driver: external
  x-preferred: false
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: appmesh
paths:
  /meshes:
    get:
      description: Returns a list of existing service meshes.
      operationId: ListMeshes
      parameters:
        - description: >-
            The maximum number of mesh results returned by
            <code>ListMeshes</code> in paginated
                     output. When this parameter is used, <code>ListMeshes</code> only returns
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. The remaining results of the initial request can be seen by sending another
                        <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This
                     value can be between 1 and 100. If this parameter is not
                     used, then <code>ListMeshes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: >-
            <p>The <code>nextToken</code> value returned from a previous
            paginated
                     <code>ListMeshes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.</p>
                     <note>
                        <p>This token should be treated as an opaque identifier that is only used to
                            retrieve the next items in a list and not for other programmatic purposes.</p>
                    </note>
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListMeshesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: >-
        <p>Creates a new service mesh. A service mesh is a logical boundary for
        network traffic
                 between the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual nodes, virtual routers, and
                 routes to distribute traffic between the applications in your mesh.</p>
      operationId: CreateMesh
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              meshName:
                description: The name to use for the service mesh.
                maxLength: 255
                minLength: 1
                type: string
            required:
              - meshName
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/meshes/{meshName}':
    delete:
      description: |-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (routes, virtual routers, virtual nodes) in the service
                 mesh before you can delete the mesh itself.</p>
      operationId: DeleteMesh
      parameters:
        - description: The name of the service mesh to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing service mesh.
      operationId: DescribeMesh
      parameters:
        - description: The name of the service mesh to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/meshes/{meshName}/virtualNodes':
    get:
      description: Returns a list of existing virtual nodes.
      operationId: ListVirtualNodes
      parameters:
        - description: >-
            The maximum number of mesh results returned by
            <code>ListVirtualNodes</code> in
                     paginated output. When this parameter is used, <code>ListVirtualNodes</code> only returns
                     <code>limit</code> results in a single page along with a <code>nextToken</code>
                     response element. The remaining results of the initial request can be seen by sending
                     another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code>
                     value. This value can be between 1 and 100. If this
                     parameter is not used, then <code>ListVirtualNodes</code> returns up to
                     100 results and a <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh in which to list virtual nodes.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListVirtualNodes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualNodesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: |-
        <p>Creates a new virtual node within a service mesh.</p>
                 <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you must specify the
                 DNS service discovery name for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
      operationId: CreateVirtualNode
      parameters:
        - description: The name of the service mesh in which to create the virtual node.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual node.
                properties:
                  backends:
                    allOf:
                      - $ref: '#/definitions/Backends'
                      - description: >-
                          The backends to which the virtual node is expected to
                          send outbound traffic.
                  listeners:
                    allOf:
                      - $ref: '#/definitions/Listeners'
                      - description: >-
                          The listeners from which the virtual node is expected
                          to receive inbound traffic.
                  serviceDiscovery:
                    allOf:
                      - $ref: '#/definitions/ServiceDiscovery'
                      - description: >-
                          The service discovery information for the virtual
                          node.
                type: object
              virtualNodeName:
                description: The name to use for the virtual node.
                maxLength: 255
                minLength: 1
                type: string
            required:
              - spec
              - virtualNodeName
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/meshes/{meshName}/virtualNodes/{virtualNodeName}':
    delete:
      description: Deletes an existing virtual node.
      operationId: DeleteVirtualNode
      parameters:
        - description: The name of the service mesh in which to delete the virtual node.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual node to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualNodeName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing virtual node.
      operationId: DescribeVirtualNode
      parameters:
        - description: The name of the service mesh in which the virtual node resides.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual node to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualNodeName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: Updates an existing virtual node in a specified service mesh.
      operationId: UpdateVirtualNode
      parameters:
        - description: The name of the service mesh in which the virtual node resides.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual node to update.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualNodeName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual node.
                properties:
                  backends:
                    allOf:
                      - $ref: '#/definitions/Backends'
                      - description: >-
                          The backends to which the virtual node is expected to
                          send outbound traffic.
                  listeners:
                    allOf:
                      - $ref: '#/definitions/Listeners'
                      - description: >-
                          The listeners from which the virtual node is expected
                          to receive inbound traffic.
                  serviceDiscovery:
                    allOf:
                      - $ref: '#/definitions/ServiceDiscovery'
                      - description: >-
                          The service discovery information for the virtual
                          node.
                type: object
            required:
              - spec
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':
    get:
      description: Returns a list of existing routes in a service mesh.
      operationId: ListRoutes
      parameters:
        - description: >-
            The maximum number of mesh results returned by
            <code>ListRoutes</code> in paginated
                     output. When this parameter is used, <code>ListRoutes</code> only returns
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. The remaining results of the initial request can be seen by sending another
                        <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This
                     value can be between 1 and 100. If this parameter is not
                     used, then <code>ListRoutes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh in which to list routes.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListRoutes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The name of the virtual router in which to list routes.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRoutesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: |-
        <p>Creates a new route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual router service name is
                    <code>my-service.local</code>, and you want the route to match requests to
                    <code>my-service.local/metrics</code>, then your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
      operationId: CreateRoute
      parameters:
        - description: The name of the service mesh in which to create the route.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router in which to create the route.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              routeName:
                description: The name to use for the route.
                maxLength: 255
                minLength: 1
                type: string
              spec:
                description: An object representing the specification of a route.
                properties:
                  httpRoute:
                    allOf:
                      - $ref: '#/definitions/HttpRoute'
                      - description: The HTTP routing information for the route.
                type: object
            required:
              - routeName
              - spec
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':
    delete:
      description: Deletes an existing route.
      operationId: DeleteRoute
      parameters:
        - description: The name of the service mesh in which to delete the route.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the route to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: routeName
          required: true
          type: string
        - description: The name of the virtual router in which to delete the route.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing route.
      operationId: DescribeRoute
      parameters:
        - description: The name of the service mesh in which the route resides.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the route to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: routeName
          required: true
          type: string
        - description: The name of the virtual router with which the route is associated.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: >-
        Updates an existing route for a specified service mesh and virtual
        router.
      operationId: UpdateRoute
      parameters:
        - description: The name of the service mesh in which the route resides.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the route to update.
          in: path
          maxLength: 255
          minLength: 1
          name: routeName
          required: true
          type: string
        - description: The name of the virtual router with which the route is associated.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              spec:
                description: An object representing the specification of a route.
                properties:
                  httpRoute:
                    allOf:
                      - $ref: '#/definitions/HttpRoute'
                      - description: The HTTP routing information for the route.
                type: object
            required:
              - spec
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/meshes/{meshName}/virtualRouters':
    get:
      description: Returns a list of existing virtual routers in a service mesh.
      operationId: ListVirtualRouters
      parameters:
        - description: >-
            The maximum number of mesh results returned by
            <code>ListVirtualRouters</code> in
                     paginated output. When this parameter is used, <code>ListVirtualRouters</code> only returns
                     <code>limit</code> results in a single page along with a <code>nextToken</code>
                     response element. The remaining results of the initial request can be seen by sending
                     another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code>
                     value. This value can be between 1 and 100. If this
                     parameter is not used, then <code>ListVirtualRouters</code> returns up to
                     100 results and a <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh in which to list virtual routers.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualRoutersOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: |-
        <p>Creates a new virtual router within a service mesh.</p>
                 <p>Virtual routers handle traffic for one or more service names within your mesh. After you
                 create your virtual router, create and associate routes for your virtual router that direct
                 incoming requests to different virtual nodes.</p>
      operationId: CreateVirtualRouter
      parameters:
        - description: The name of the service mesh in which to create the virtual router.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual router.
                properties:
                  serviceNames:
                    allOf:
                      - $ref: '#/definitions/ServiceNames'
                      - description: >-
                          The service mesh service names to associate with the
                          virtual router.
                type: object
              virtualRouterName:
                description: The name to use for the virtual router.
                maxLength: 255
                minLength: 1
                type: string
            required:
              - spec
              - virtualRouterName
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/meshes/{meshName}/virtualRouters/{virtualRouterName}':
    delete:
      description: |-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      operationId: DeleteVirtualRouter
      parameters:
        - description: The name of the service mesh in which to delete the virtual router.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing virtual router.
      operationId: DescribeVirtualRouter
      parameters:
        - description: The name of the service mesh in which the virtual router resides.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    put:
      consumes:
        - application/json
      description: Updates an existing virtual router in a specified service mesh.
      operationId: UpdateVirtualRouter
      parameters:
        - description: The name of the service mesh in which the virtual router resides.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router to update.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: >-
                  Unique, case-sensitive identifier that you provide to ensure
                  the idempotency of the

                  request. Up to 36 letters, numbers, hyphens, and underscores
                  are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual router.
                properties:
                  serviceNames:
                    allOf:
                      - $ref: '#/definitions/ServiceNames'
                      - description: >-
                          The service mesh service names to associate with the
                          virtual router.
                type: object
            required:
              - spec
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string

