basePath: /
definitions:
  AttributeAction:
    description: >-
      The type of action for an item update operation. Only use the add action
      for numbers or sets; the specified value is added to the existing value.
      If a set of values is specified, the values are added to the existing set.
      Adds the specified attribute. If the attribute exists, it is replaced by
      the new value. If no value is specified, this removes the attribute and
      its value. If a set of values is specified, then the values in the
      specified set are removed from the old set.
    enum:
      - ADD
      - PUT
      - DELETE
    type: string
  AttributeMap:
    additionalProperties:
      $ref: '#/definitions/AttributeValue'
    type: object
  AttributeName:
    maxLength: 65535
    type: string
  AttributeNameList:
    description: >-
      List of <code>Attribute</code> names. If attribute names are not specified
      then all attributes will be returned. If some attributes are not found,
      they will not appear in the result.
    items:
      $ref: '#/definitions/AttributeName'
    minItems: 1
    type: array
  AttributeUpdates:
    additionalProperties:
      $ref: '#/definitions/AttributeValueUpdate'
    description: >-
      Map of attribute name to the new value and action for the update. The
      attribute names specify the attributes to modify, and cannot contain any
      primary key attributes.
    type: object
  AttributeValue:
    description: >-
      AttributeValue can be <code>String</code>, <code>Number</code>,
      <code>Binary</code>, <code>StringSet</code>, <code>NumberSet</code>,
      <code>BinarySet</code>.
    properties:
      B:
        allOf:
          - $ref: '#/definitions/BinaryAttributeValue'
          - description: Binary attributes are sequences of unsigned bytes.
      BS:
        allOf:
          - $ref: '#/definitions/BinarySetAttributeValue'
          - description: A set of binary attributes.
      'N':
        allOf:
          - $ref: '#/definitions/NumberAttributeValue'
          - description: >-
              Numbers are positive or negative exact-value decimals and
              integers. A number can have up to 38 digits precision and can be
              between 10^-128 to 10^+126.
      NS:
        allOf:
          - $ref: '#/definitions/NumberSetAttributeValue'
          - description: A set of numbers.
      S:
        allOf:
          - $ref: '#/definitions/StringAttributeValue'
          - description: >-
              Strings are Unicode with UTF-8 binary encoding. The maximum size
              is limited by the size of the primary key (1024 bytes as a range
              part of a key or 2048 bytes as a single part hash key) or the item
              size (64k).
      SS:
        allOf:
          - $ref: '#/definitions/StringSetAttributeValue'
          - description: A set of strings.
    type: object
  AttributeValueList:
    description: >-
      A list of attribute values to be used with a comparison operator for a
      scan or query operation. For comparisons that require more than one value,
      such as a <code>BETWEEN</code> comparison, the AttributeValueList contains
      two attribute values and the comparison operator.
    items:
      $ref: '#/definitions/AttributeValue'
    type: array
  AttributeValueUpdate:
    description: >-
      Specifies the attribute to update and how to perform the update. Possible
      values: <code>PUT</code> (default), <code>ADD</code> or
      <code>DELETE</code>.
    properties:
      Action:
        $ref: '#/definitions/AttributeAction'
      Value:
        $ref: '#/definitions/AttributeValue'
    type: object
  BatchGetItemInput:
    properties:
      RequestItems:
        $ref: '#/definitions/BatchGetRequestMap'
    required:
      - RequestItems
    title: BatchGetItemInput
    type: object
  BatchGetItemOutput:
    properties:
      Responses:
        $ref: '#/definitions/BatchGetResponseMap'
      UnprocessedKeys:
        allOf:
          - $ref: '#/definitions/BatchGetRequestMap'
          - description: >-
              Contains a map of tables and their respective keys that were not
              processed with the current response, possibly due to reaching a
              limit on the response size. The <code>UnprocessedKeys</code> value
              is in the same form as a <code>RequestItems</code> parameter (so
              the value can be provided directly to a subsequent
              <code>BatchGetItem</code> operation). For more information, see
              the above <code>RequestItems</code> parameter.
    type: object
  BatchGetRequestMap:
    additionalProperties:
      $ref: '#/definitions/KeysAndAttributes'
    description: >-
      A map of the table name and corresponding items to get by primary key.
      While requesting items, each table name can be invoked only once per
      operation.
    maxProperties: 100
    minProperties: 1
    type: object
  BatchGetResponseMap:
    additionalProperties:
      $ref: '#/definitions/BatchResponse'
    description: Table names and the respective item attributes from the tables.
    type: object
  BatchResponse:
    description: >-
      The item attributes from a response in a specific table, along with the
      read resources consumed on the table during the request.
    properties:
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
      Items:
        $ref: '#/definitions/ItemList'
    type: object
  BatchWriteItemInput:
    properties:
      RequestItems:
        allOf:
          - $ref: '#/definitions/BatchWriteItemRequestMap'
          - description: >-
              A map of table name to list-of-write-requests. Used as input to
              the <code>BatchWriteItem</code> API call
    required:
      - RequestItems
    title: BatchWriteItemInput
    type: object
  BatchWriteItemOutput:
    description: A container for <code>BatchWriteItem</code> response
    properties:
      Responses:
        allOf:
          - $ref: '#/definitions/BatchWriteResponseMap'
          - description: >-
              The response object as a result of <code>BatchWriteItem</code>
              call. This is essentially a map of table name to
              <code>ConsumedCapacityUnits</code>.
      UnprocessedItems:
        allOf:
          - $ref: '#/definitions/BatchWriteItemRequestMap'
          - description: >-
              The Items which we could not successfully process in a
              <code>BatchWriteItem</code> call is returned as
              <code>UnprocessedItems</code>
    type: object
  BatchWriteItemRequestMap:
    additionalProperties:
      $ref: '#/definitions/WriteRequests'
    description: >-
      <p>A map of table name to list-of-write-requests.</p> <p>Key: The table
      name corresponding to the list of requests</p> <p>Value: Essentially a
      list of request items. Each request item could contain either a
      <code>PutRequest</code> or <code>DeleteRequest</code>. Never both.</p>
    maxProperties: 25
    minProperties: 1
    type: object
  BatchWriteResponse:
    properties:
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
    type: object
  BatchWriteResponseMap:
    additionalProperties:
      $ref: '#/definitions/BatchWriteResponse'
    type: object
  BinaryAttributeValue:
    type: string
  BinarySetAttributeValue:
    items:
      $ref: '#/definitions/BinaryAttributeValue'
    type: array
  BooleanObject:
    type: boolean
  ComparisonOperator:
    description: >-
      <p>A comparison operator is an enumeration of several operations:</p> <ul>
      <li><code>EQ</code> for <em>equal</em>.</li> <li><code>NE</code> for
      <em>not equal</em>.</li> <li><code>IN</code> checks for exact
      matches.</li> <li><code>LE</code> for <em>less than or equal to</em>.</li>
      <li><code>LT</code> for <em>less than</em>.</li> <li><code>GE</code> for
      <em>greater than or equal to</em>.</li> <li><code>GT</code> for
      <em>greater than</em>.</li> <li><code>BETWEEN</code> for
      <em>between</em>.</li> <li><code>NOT_NULL</code> for <em>exists</em>.</li>
      <li><code>NULL</code> for <em>not exists</em>.</li>
      <li><code>CONTAINS</code> for substring or value in a set.</li>
      <li><code>NOT_CONTAINS</code> for absence of a substring or absence of a
      value in a set.</li> <li><code>BEGINS_WITH</code> for a substring
      prefix.</li> </ul> <p>Scan operations support all available comparison
      operators.</p> <p>Query operations support a subset of the available
      comparison operators: EQ, LE, LT, GE, GT, BETWEEN, and BEGINS_WITH.</p>
    enum:
      - EQ
      - NE
      - IN
      - LE
      - LT
      - GE
      - GT
      - BETWEEN
      - NOT_NULL
      - 'NULL'
      - CONTAINS
      - NOT_CONTAINS
      - BEGINS_WITH
    type: string
  Condition:
    properties:
      AttributeValueList:
        $ref: '#/definitions/AttributeValueList'
      ComparisonOperator:
        $ref: '#/definitions/ComparisonOperator'
    required:
      - ComparisonOperator
    type: object
  ConditionalCheckFailedException: {}
  ConsistentRead:
    description: >-
      If set to <code>true</code>, then a consistent read is issued. Otherwise
      eventually-consistent is used.
    type: boolean
  ConsumedCapacityUnits:
    description: >-
      The number of Capacity Units of the provisioned throughput of the table
      consumed during the operation. <code>GetItem</code>,
      <code>BatchGetItem</code>, <code>BatchWriteItem</code>,
      <code>Query</code>, and <code>Scan</code> operations consume
      <code>ReadCapacityUnits</code>, while <code>PutItem</code>,
      <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume
      <code>WriteCapacityUnits</code>.
    format: double
    type: number
  CreateTableInput:
    properties:
      KeySchema:
        $ref: '#/definitions/KeySchema'
      ProvisionedThroughput:
        $ref: '#/definitions/ProvisionedThroughput'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table you want to create. Allowed characters are
              <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,
              <code>_</code> (underscore), <code>-</code> (hyphen) and
              <code>.</code> (period).
    required:
      - TableName
      - KeySchema
      - ProvisionedThroughput
    title: CreateTableInput
    type: object
  CreateTableOutput:
    properties:
      TableDescription:
        $ref: '#/definitions/TableDescription'
    type: object
  Date:
    format: date-time
    type: string
  DeleteItemInput:
    properties:
      Expected:
        $ref: '#/definitions/ExpectedAttributeMap'
      Key:
        $ref: '#/definitions/Key'
      ReturnValues:
        $ref: '#/definitions/ReturnValue'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table in which you want to delete an item. Allowed
              characters are <code>a-z</code>, <code>A-Z</code>,
              <code>0-9</code>, <code>_</code> (underscore), <code>-</code>
              (hyphen) and <code>.</code> (period).
    required:
      - TableName
      - Key
    title: DeleteItemInput
    type: object
  DeleteItemOutput:
    properties:
      Attributes:
        allOf:
          - $ref: '#/definitions/AttributeMap'
          - description: >-
              If the <code>ReturnValues</code> parameter is provided as
              <code>ALL_OLD</code> in the request, Amazon DynamoDB returns an
              array of attribute name-value pairs (essentially, the deleted
              item). Otherwise, the response contains an empty set.
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
    type: object
  DeleteRequest:
    description: A container for a Delete BatchWrite request
    properties:
      Key:
        allOf:
          - $ref: '#/definitions/Key'
          - description: The item's key to be delete
    required:
      - Key
    type: object
  DeleteTableInput:
    properties:
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table you want to delete. Allowed characters are
              <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,
              <code>_</code> (underscore), <code>-</code> (hyphen) and
              <code>.</code> (period).
    required:
      - TableName
    title: DeleteTableInput
    type: object
  DeleteTableOutput:
    properties:
      TableDescription:
        $ref: '#/definitions/TableDescription'
    type: object
  DescribeTableInput:
    properties:
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table you want to describe. Allowed characters are
              <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,
              <code>_</code> (underscore), <code>-</code> (hyphen) and
              <code>.</code> (period).
    required:
      - TableName
    title: DescribeTableInput
    type: object
  DescribeTableOutput:
    properties:
      Table:
        $ref: '#/definitions/TableDescription'
    type: object
  ExpectedAttributeMap:
    additionalProperties:
      $ref: '#/definitions/ExpectedAttributeValue'
    description: >-
      Designates an attribute for a conditional modification. The
      <code>Expected</code> parameter allows you to provide an attribute name,
      and whether or not Amazon DynamoDB should check to see if the attribute
      has a particular value before modifying it.
    type: object
  ExpectedAttributeValue:
    description: >-
      Allows you to provide an attribute name, and whether or not Amazon
      DynamoDB should check to see if the attribute value already exists; or if
      the attribute value exists and has a particular value before changing it.
    properties:
      Exists:
        allOf:
          - $ref: '#/definitions/BooleanObject'
          - description: >-
              Specify whether or not a value already exists for the attribute
              name-value pair.
      Value:
        allOf:
          - $ref: '#/definitions/AttributeValue'
          - description: >-
              Specify whether or not a value already exists and has a specific
              content for the attribute name-value pair.
    type: object
  FilterConditionMap:
    additionalProperties:
      $ref: '#/definitions/Condition'
    type: object
  GetItemInput:
    properties:
      AttributesToGet:
        $ref: '#/definitions/AttributeNameList'
      ConsistentRead:
        $ref: '#/definitions/ConsistentRead'
      Key:
        $ref: '#/definitions/Key'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table in which you want to get an item. Allowed
              characters are <code>a-z</code>, <code>A-Z</code>,
              <code>0-9</code>, <code>_</code> (underscore), <code>-</code>
              (hyphen) and <code>.</code> (period).
    required:
      - TableName
      - Key
    title: GetItemInput
    type: object
  GetItemOutput:
    properties:
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
      Item:
        allOf:
          - $ref: '#/definitions/AttributeMap'
          - description: Contains the requested attributes.
    type: object
  Integer:
    type: integer
  InternalServerError: {}
  ItemList:
    items:
      $ref: '#/definitions/AttributeMap'
    type: array
  Key:
    description: >-
      The primary key that uniquely identifies each item in a table. A primary
      key can be a one attribute (hash) primary key or a two attribute
      (hash-and-range) primary key.
    properties:
      HashKeyElement:
        allOf:
          - $ref: '#/definitions/AttributeValue'
          - description: >-
              A hash key element is treated as the primary key, and can be a
              string or a number. Single attribute primary keys have one index
              value. The value can be <code>String</code>, <code>Number</code>,
              <code>StringSet</code>, <code>NumberSet</code>.
      RangeKeyElement:
        allOf:
          - $ref: '#/definitions/AttributeValue'
          - description: >-
              A range key element is treated as a secondary key (used in
              conjunction with the primary key), and can be a string or a
              number, and is only used for hash-and-range primary keys. The
              value can be <code>String</code>, <code>Number</code>,
              <code>StringSet</code>, <code>NumberSet</code>.
    required:
      - HashKeyElement
    type: object
  KeyList:
    items:
      $ref: '#/definitions/Key'
    maxItems: 100
    minItems: 1
    type: array
  KeySchema:
    description: >-
      The KeySchema identifies the primary key as a one attribute primary key
      (hash) or a composite two attribute (hash-and-range) primary key. Single
      attribute primary keys have one index value: a
      <code>HashKeyElement</code>. A composite hash-and-range primary key
      contains two attribute values: a <code>HashKeyElement</code> and a
      <code>RangeKeyElement</code>.
    properties:
      HashKeyElement:
        allOf:
          - $ref: '#/definitions/KeySchemaElement'
          - description: >-
              A hash key element is treated as the primary key, and can be a
              string or a number. Single attribute primary keys have one index
              value. The value can be <code>String</code>, <code>Number</code>,
              <code>StringSet</code>, <code>NumberSet</code>.
      RangeKeyElement:
        allOf:
          - $ref: '#/definitions/KeySchemaElement'
          - description: >-
              A range key element is treated as a secondary key (used in
              conjunction with the primary key), and can be a string or a
              number, and is only used for hash-and-range primary keys. The
              value can be <code>String</code>, <code>Number</code>,
              <code>StringSet</code>, <code>NumberSet</code>.
    required:
      - HashKeyElement
    type: object
  KeySchemaAttributeName:
    maxLength: 255
    minLength: 1
    type: string
  KeySchemaElement:
    description: >-
      <code>KeySchemaElement</code> is the primary key (hash or hash-and-range)
      structure for the table.
    properties:
      AttributeName:
        allOf:
          - $ref: '#/definitions/KeySchemaAttributeName'
          - description: >-
              The <code>AttributeName</code> of the
              <code>KeySchemaElement</code>.
      AttributeType:
        allOf:
          - $ref: '#/definitions/ScalarAttributeType'
          - description: >-
              The <code>AttributeType</code> of the
              <code>KeySchemaElement</code> which can be a <code>String</code>
              or a <code>Number</code>.
    required:
      - AttributeName
      - AttributeType
    type: object
  KeysAndAttributes:
    properties:
      AttributesToGet:
        $ref: '#/definitions/AttributeNameList'
      ConsistentRead:
        $ref: '#/definitions/ConsistentRead'
      Keys:
        $ref: '#/definitions/KeyList'
    required:
      - Keys
    type: object
  LimitExceededException: {}
  ListTablesInput:
    properties:
      ExclusiveStartTableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table that starts the list. If you already ran a
              <code>ListTables</code> operation and received a
              <code>LastEvaluatedTableName</code> value in the response, use
              that value here to continue the list.
      Limit:
        $ref: '#/definitions/ListTablesInputLimit'
    title: ListTablesInput
    type: object
  ListTablesInputLimit:
    description: A number of maximum table names to return.
    maximum: 100
    minimum: 1
    type: integer
  ListTablesOutput:
    properties:
      LastEvaluatedTableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the last table in the current list. Use this value as
              the <code>ExclusiveStartTableName</code> in a new request to
              continue the list until all the table names are returned. If this
              value is null, all table names have been returned.
      TableNames:
        $ref: '#/definitions/TableNameList'
    type: object
  Long:
    type: integer
  NumberAttributeValue:
    type: string
  NumberSetAttributeValue:
    items:
      $ref: '#/definitions/NumberAttributeValue'
    type: array
  PositiveIntegerObject:
    minimum: 1
    type: integer
  PositiveLongObject:
    minimum: 1
    type: integer
  ProvisionedThroughput:
    description: >-
      Provisioned throughput reserves the required read and write resources for
      your table in terms of <code>ReadCapacityUnits</code> and
      <code>WriteCapacityUnits</code>. Values for provisioned throughput depend
      upon your expected read/write rates, item size, and consistency. Provide
      the expected number of read and write operations, assuming an item size of
      1k and strictly consistent reads. For 2k item size, double the value. For
      3k, triple the value, etc. Eventually-consistent reads consume half the
      resources of strictly consistent reads.
    properties:
      ReadCapacityUnits:
        allOf:
          - $ref: '#/definitions/PositiveLongObject'
          - description: >-
              <code>ReadCapacityUnits</code> are in terms of strictly consistent
              reads, assuming items of 1k. 2k items require twice the
              <code>ReadCapacityUnits</code>. Eventually-consistent reads only
              require half the <code>ReadCapacityUnits</code> of stirctly
              consistent reads.
      WriteCapacityUnits:
        allOf:
          - $ref: '#/definitions/PositiveLongObject'
          - description: >-
              <code>WriteCapacityUnits</code> are in terms of strictly
              consistent reads, assuming items of 1k. 2k items require twice the
              <code>WriteCapacityUnits</code>.
    required:
      - ReadCapacityUnits
      - WriteCapacityUnits
    type: object
  ProvisionedThroughputDescription:
    properties:
      LastDecreaseDateTime:
        $ref: '#/definitions/Date'
      LastIncreaseDateTime:
        $ref: '#/definitions/Date'
      NumberOfDecreasesToday:
        $ref: '#/definitions/PositiveLongObject'
      ReadCapacityUnits:
        $ref: '#/definitions/PositiveLongObject'
      WriteCapacityUnits:
        $ref: '#/definitions/PositiveLongObject'
    type: object
  ProvisionedThroughputExceededException: {}
  PutItemInput:
    properties:
      Expected:
        $ref: '#/definitions/ExpectedAttributeMap'
      Item:
        $ref: '#/definitions/PutItemInputAttributeMap'
      ReturnValues:
        $ref: '#/definitions/ReturnValue'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table in which you want to put an item. Allowed
              characters are <code>a-z</code>, <code>A-Z</code>,
              <code>0-9</code>, <code>_</code> (underscore), <code>-</code>
              (hyphen) and <code>.</code> (period).
    required:
      - TableName
      - Item
    title: PutItemInput
    type: object
  PutItemInputAttributeMap:
    additionalProperties:
      $ref: '#/definitions/AttributeValue'
    description: >-
      A map of the attributes for the item, and must include the primary key
      values that define the item. Other attribute name-value pairs can be
      provided for the item.
    type: object
  PutItemOutput:
    properties:
      Attributes:
        allOf:
          - $ref: '#/definitions/AttributeMap'
          - description: >-
              Attribute values before the put operation, but only if the
              <code>ReturnValues</code> parameter is specified as
              <code>ALL_OLD</code> in the request.
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
    type: object
  PutRequest:
    description: A container for a Put BatchWrite request
    properties:
      Item:
        allOf:
          - $ref: '#/definitions/PutItemInputAttributeMap'
          - description: The item to put
    required:
      - Item
    type: object
  QueryInput:
    properties:
      AttributesToGet:
        $ref: '#/definitions/AttributeNameList'
      ConsistentRead:
        $ref: '#/definitions/ConsistentRead'
      Count:
        allOf:
          - $ref: '#/definitions/BooleanObject'
          - description: >-
              If set to <code>true</code>, Amazon DynamoDB returns a total
              number of items that match the query parameters, instead of a list
              of the matching items and their attributes. Do not set
              <code>Count</code> to <code>true</code> while providing a list of
              <code>AttributesToGet</code>, otherwise Amazon DynamoDB returns a
              validation error.
      ExclusiveStartKey:
        allOf:
          - $ref: '#/definitions/Key'
          - description: >-
              Primary key of the item from which to continue an earlier query.
              An earlier query might provide this value as the
              <code>LastEvaluatedKey</code> if that query operation was
              interrupted before completing the query; either because of the
              result set size or the <code>Limit</code> parameter. The
              <code>LastEvaluatedKey</code> can be passed back in a new query
              request to continue the operation from that point.
      HashKeyValue:
        allOf:
          - $ref: '#/definitions/AttributeValue'
          - description: >-
              Attribute value of the hash component of the composite primary
              key.
      Limit:
        allOf:
          - $ref: '#/definitions/PositiveIntegerObject'
          - description: >-
              The maximum number of items to return. If Amazon DynamoDB hits
              this limit while querying the table, it stops the query and
              returns the matching values up to the limit, and a
              <code>LastEvaluatedKey</code> to apply in a subsequent operation
              to continue the query. Also, if the result set size exceeds 1MB
              before Amazon DynamoDB hits this limit, it stops the query and
              returns the matching values, and a <code>LastEvaluatedKey</code>
              to apply in a subsequent operation to continue the query.
      RangeKeyCondition:
        allOf:
          - $ref: '#/definitions/Condition'
          - description: >-
              A container for the attribute values and comparison operators to
              use for the query.
      ScanIndexForward:
        allOf:
          - $ref: '#/definitions/BooleanObject'
          - description: >-
              Specifies forward or backward traversal of the index. Amazon
              DynamoDB returns results reflecting the requested order,
              determined by the range key. The default value is
              <code>true</code> (forward).
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table in which you want to query. Allowed
              characters are <code>a-z</code>, <code>A-Z</code>,
              <code>0-9</code>, <code>_</code> (underscore), <code>-</code>
              (hyphen) and <code>.</code> (period).
    required:
      - TableName
      - HashKeyValue
    title: QueryInput
    type: object
  QueryOutput:
    properties:
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
      Count:
        allOf:
          - $ref: '#/definitions/Integer'
          - description: Number of items in the response.
      Items:
        $ref: '#/definitions/ItemList'
      LastEvaluatedKey:
        allOf:
          - $ref: '#/definitions/Key'
          - description: >-
              Primary key of the item where the query operation stopped,
              inclusive of the previous result set. Use this value to start a
              new operation excluding this value in the new request. The
              <code>LastEvaluatedKey</code> is null when the entire query result
              set is complete (i.e. the operation processed the "last page").
    type: object
  RequestLimitExceeded: {}
  ResourceInUseException: {}
  ResourceNotFoundException: {}
  ReturnValue:
    description: >-
      <p>Use this parameter if you want to get the attribute name-value pairs
      before or after they are modified. For <code>PUT</code> operations, the
      possible parameter values are <code>NONE</code> (default) or
      <code>ALL_OLD</code>. For update operations, the possible parameter values
      are <code>NONE</code> (default) or <code>ALL_OLD</code>,
      <code>UPDATED_OLD</code>, <code>ALL_NEW</code> or
      <code>UPDATED_NEW</code>.</p> <ul> <li><code>NONE</code>: Nothing is
      returned.</li> <li><code>ALL_OLD</code>: Returns the attributes of the
      item as they were before the operation.</li> <li><code>UPDATED_OLD</code>:
      Returns the values of the updated attributes, only, as they were before
      the operation.</li> <li><code>ALL_NEW</code>: Returns all the attributes
      and their new values after the operation.</li>
      <li><code>UPDATED_NEW</code>: Returns the values of the updated
      attributes, only, as they are after the operation.</li> </ul>
    enum:
      - NONE
      - ALL_OLD
      - UPDATED_OLD
      - ALL_NEW
      - UPDATED_NEW
    type: string
  ScalarAttributeType:
    enum:
      - S
      - 'N'
      - B
    type: string
  ScanInput:
    properties:
      AttributesToGet:
        $ref: '#/definitions/AttributeNameList'
      Count:
        allOf:
          - $ref: '#/definitions/BooleanObject'
          - description: >-
              If set to <code>true</code>, Amazon DynamoDB returns a total
              number of items for the <code>Scan</code> operation, even if the
              operation has no matching items for the assigned filter. Do not
              set <code>Count</code> to <code>true</code> while providing a list
              of <code>AttributesToGet</code>, otherwise Amazon DynamoDB returns
              a validation error.
      ExclusiveStartKey:
        allOf:
          - $ref: '#/definitions/Key'
          - description: >-
              Primary key of the item from which to continue an earlier scan. An
              earlier scan might provide this value if that scan operation was
              interrupted before scanning the entire table; either because of
              the result set size or the <code>Limit</code> parameter. The
              <code>LastEvaluatedKey</code> can be passed back in a new scan
              request to continue the operation from that point.
      Limit:
        allOf:
          - $ref: '#/definitions/PositiveIntegerObject'
          - description: >-
              The maximum number of items to return. If Amazon DynamoDB hits
              this limit while scanning the table, it stops the scan and returns
              the matching values up to the limit, and a
              <code>LastEvaluatedKey</code> to apply in a subsequent operation
              to continue the scan. Also, if the scanned data set size exceeds 1
              MB before Amazon DynamoDB hits this limit, it stops the scan and
              returns the matching values up to the limit, and a
              <code>LastEvaluatedKey</code> to apply in a subsequent operation
              to continue the scan.
      ScanFilter:
        allOf:
          - $ref: '#/definitions/FilterConditionMap'
          - description: Evaluates the scan results and returns only the desired values.
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table in which you want to scan. Allowed
              characters are <code>a-z</code>, <code>A-Z</code>,
              <code>0-9</code>, <code>_</code> (underscore), <code>-</code>
              (hyphen) and <code>.</code> (period).
    required:
      - TableName
    title: ScanInput
    type: object
  ScanOutput:
    properties:
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
      Count:
        allOf:
          - $ref: '#/definitions/Integer'
          - description: Number of items in the response.
      Items:
        $ref: '#/definitions/ItemList'
      LastEvaluatedKey:
        allOf:
          - $ref: '#/definitions/Key'
          - description: >-
              Primary key of the item where the scan operation stopped. Provide
              this value in a subsequent scan operation to continue the
              operation from that point. The <code>LastEvaluatedKey</code> is
              null when the entire scan result set is complete (i.e. the
              operation processed the "last page").
      ScannedCount:
        allOf:
          - $ref: '#/definitions/Integer'
          - description: >-
              Number of items in the complete scan before any filters are
              applied. A high <code>ScannedCount</code> value with few, or no,
              <code>Count</code> results indicates an inefficient
              <code>Scan</code> operation.
    type: object
  String:
    type: string
  StringAttributeValue:
    type: string
  StringSetAttributeValue:
    items:
      $ref: '#/definitions/StringAttributeValue'
    type: array
  TableDescription:
    properties:
      CreationDateTime:
        $ref: '#/definitions/Date'
      ItemCount:
        $ref: '#/definitions/Long'
      KeySchema:
        $ref: '#/definitions/KeySchema'
      ProvisionedThroughput:
        $ref: '#/definitions/ProvisionedThroughputDescription'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: The name of the table being described.
      TableSizeBytes:
        $ref: '#/definitions/Long'
      TableStatus:
        $ref: '#/definitions/TableStatus'
    type: object
  TableName:
    maxLength: 255
    minLength: 3
    pattern: '[a-zA-Z0-9_.-]+'
    type: string
  TableNameList:
    items:
      $ref: '#/definitions/TableName'
    type: array
  TableStatus:
    enum:
      - CREATING
      - UPDATING
      - DELETING
      - ACTIVE
    type: string
  UpdateItemInput:
    properties:
      AttributeUpdates:
        $ref: '#/definitions/AttributeUpdates'
      Expected:
        $ref: '#/definitions/ExpectedAttributeMap'
      Key:
        $ref: '#/definitions/Key'
      ReturnValues:
        $ref: '#/definitions/ReturnValue'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table in which you want to update an item. Allowed
              characters are <code>a-z</code>, <code>A-Z</code>,
              <code>0-9</code>, <code>_</code> (underscore), <code>-</code>
              (hyphen) and <code>.</code> (period).
    required:
      - TableName
      - Key
      - AttributeUpdates
    title: UpdateItemInput
    type: object
  UpdateItemOutput:
    properties:
      Attributes:
        allOf:
          - $ref: '#/definitions/AttributeMap'
          - description: >-
              A map of attribute name-value pairs, but only if the
              <code>ReturnValues</code> parameter is specified as something
              other than <code>NONE</code> in the request.
      ConsumedCapacityUnits:
        $ref: '#/definitions/ConsumedCapacityUnits'
    type: object
  UpdateTableInput:
    properties:
      ProvisionedThroughput:
        $ref: '#/definitions/ProvisionedThroughput'
      TableName:
        allOf:
          - $ref: '#/definitions/TableName'
          - description: >-
              The name of the table you want to update. Allowed characters are
              <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,
              <code>_</code> (underscore), <code>-</code> (hyphen) and
              <code>.</code> (period).
    required:
      - TableName
      - ProvisionedThroughput
    title: UpdateTableInput
    type: object
  UpdateTableOutput:
    properties:
      TableDescription:
        $ref: '#/definitions/TableDescription'
    type: object
  WriteRequest:
    description: >-
      This structure is a Union of PutRequest and DeleteRequest. It can contain
      exactly one of <code>PutRequest</code> or <code>DeleteRequest</code>.
      Never Both. This is enforced in the code.
    properties:
      DeleteRequest:
        $ref: '#/definitions/DeleteRequest'
      PutRequest:
        $ref: '#/definitions/PutRequest'
    type: object
  WriteRequests:
    items:
      $ref: '#/definitions/WriteRequest'
    maxItems: 25
    minItems: 1
    type: array
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/dynamodb/'
host: dynamodb.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    <p>Amazon DynamoDB is a fast, highly scalable, highly available,
    cost-effective non-relational database service.</p> <p>Amazon DynamoDB
    removes traditional scalability limitations on data storage while
    maintaining low latency and predictable performance.</p>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: Amazon DynamoDB
  version: '2011-12-05'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dynamodb-2011-12-05.normal.json
      x-apisguru-driver: external
  x-preferred: false
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: dynamodb
paths:
  /#X-Amz-Target=DynamoDB_20111205.BatchGetItem:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Retrieves the attributes for multiple items from multiple tables
        using their primary keys.</p> <p>The maximum number of item attributes
        that can be retrieved for a single operation is 100. Also, the number of
        items retrieved is constrained by a 1 MB the size limit. If the response
        size limit is exceeded or a partial result is returned due to an
        internal processing failure, Amazon DynamoDB returns an
        <code>UnprocessedKeys</code> value so you can retry the operation
        starting with the next item to get.</p> <p>Amazon DynamoDB automatically
        adjusts the number of items returned per page to enforce this limit. For
        example, even if you ask to retrieve 100 items, but each individual item
        is 50k in size, the system returns 20 items and an appropriate
        <code>UnprocessedKeys</code> value so you can get the next page of
        results. If necessary, your application needs its own logic to assemble
        the pages of results into one set.</p>
      operationId: BatchGetItem
      parameters:
        - description: Pagination token
          in: query
          name: RequestItems
          required: false
          type: string
        - enum:
            - DynamoDB_20111205.BatchGetItem
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BatchGetItemInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetItemOutput'
        '480':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.BatchWriteItem:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Allows to execute a batch of Put and/or Delete Requests for many
        tables in a single call. A total of 25 requests are allowed.</p>
        <p>There are no transaction guarantees provided by this API. It does not
        allow conditional puts nor does it support return values.</p>
      operationId: BatchWriteItem
      parameters:
        - enum:
            - DynamoDB_20111205.BatchWriteItem
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BatchWriteItemInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchWriteItemOutput'
        '480':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.CreateTable:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Adds a new table to your account.</p> <p>The table name must be
        unique among those associated with the AWS Account issuing the request,
        and the AWS Region that receives the request (e.g.
        <code>us-east-1</code>).</p> <p>The <code>CreateTable</code> operation
        triggers an asynchronous workflow to begin creating the table. Amazon
        DynamoDB immediately returns the state of the table
        (<code>CREATING</code>) until the table is in the <code>ACTIVE</code>
        state. Once the table is in the <code>ACTIVE</code> state, you can
        perform data plane operations.</p>
      operationId: CreateTable
      parameters:
        - enum:
            - DynamoDB_20111205.CreateTable
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateTableInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateTableOutput'
        '480':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '481':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.DeleteItem:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Deletes a single item in a table by primary key.</p> <p>You can
        perform a conditional delete operation that deletes the item if it
        exists, or if it has an expected attribute value.</p>
      operationId: DeleteItem
      parameters:
        - enum:
            - DynamoDB_20111205.DeleteItem
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteItemInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteItemOutput'
        '480':
          description: ConditionalCheckFailedException
          schema:
            $ref: '#/definitions/ConditionalCheckFailedException'
        '481':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '485':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.DeleteTable:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Deletes a table and all of its items.</p> <p>If the table is in the
        <code>ACTIVE</code> state, you can delete it. If a table is in
        <code>CREATING</code> or <code>UPDATING</code> states then Amazon
        DynamoDB returns a <code>ResourceInUseException</code>. If the specified
        table does not exist, Amazon DynamoDB returns a
        <code>ResourceNotFoundException</code>.</p>
      operationId: DeleteTable
      parameters:
        - enum:
            - DynamoDB_20111205.DeleteTable
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteTableInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteTableOutput'
        '480':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.DescribeTable:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Retrieves information about the table, including the current status
        of the table, the primary key schema and when the table was created.</p>
        <p>If the table does not exist, Amazon DynamoDB returns a
        <code>ResourceNotFoundException</code>.</p>
      operationId: DescribeTable
      parameters:
        - enum:
            - DynamoDB_20111205.DescribeTable
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeTableInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeTableOutput'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.GetItem:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Retrieves a set of Attributes for an item that matches the primary
        key.</p> <p>The <code>GetItem</code> operation provides an
        eventually-consistent read by default. If eventually-consistent reads
        are not acceptable for your application, use
        <code>ConsistentRead</code>. Although this operation might take longer
        than a standard read, it always returns the last updated value.</p>
      operationId: GetItem
      parameters:
        - enum:
            - DynamoDB_20111205.GetItem
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetItemInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetItemOutput'
        '480':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.ListTables:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Retrieves a paginated list of table names created by the AWS Account of
        the caller in the AWS Region (e.g. <code>us-east-1</code>).
      operationId: ListTables
      parameters:
        - description: Pagination limit
          in: query
          name: Limit
          required: false
          type: string
        - description: Pagination token
          in: query
          name: ExclusiveStartTableName
          required: false
          type: string
        - enum:
            - DynamoDB_20111205.ListTables
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListTablesInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTablesOutput'
        '480':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.PutItem:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a new item, or replaces an old item with a new item
        (including all the attributes).</p> <p>If an item already exists in the
        specified table with the same primary key, the new item completely
        replaces the existing item. You can perform a conditional put (insert a
        new item if one with the specified primary key doesn't exist), or
        replace an existing item if it has certain attribute values.</p>
      operationId: PutItem
      parameters:
        - enum:
            - DynamoDB_20111205.PutItem
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutItemInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutItemOutput'
        '480':
          description: ConditionalCheckFailedException
          schema:
            $ref: '#/definitions/ConditionalCheckFailedException'
        '481':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '485':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.Query:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Gets the values of one or more items and its attributes by primary
        key (composite primary key, only).</p> <p>Narrow the scope of the query
        using comparison operators on the <code>RangeKeyValue</code> of the
        composite key. Use the <code>ScanIndexForward</code> parameter to get
        results in forward or reverse order by range key.</p>
      operationId: Query
      parameters:
        - description: Pagination limit
          in: query
          name: Limit
          required: false
          type: string
        - description: Pagination token
          in: query
          name: ExclusiveStartKey
          required: false
          type: string
        - enum:
            - DynamoDB_20111205.Query
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/QueryInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/QueryOutput'
        '480':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.Scan:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Retrieves one or more items and its attributes by performing a full
        scan of a table.</p> <p>Provide a <code>ScanFilter</code> to get more
        specific results.</p>
      operationId: Scan
      parameters:
        - description: Pagination limit
          in: query
          name: Limit
          required: false
          type: string
        - description: Pagination token
          in: query
          name: ExclusiveStartKey
          required: false
          type: string
        - enum:
            - DynamoDB_20111205.Scan
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ScanInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ScanOutput'
        '480':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.UpdateItem:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Edits an existing item's attributes.</p> <p>You can perform a
        conditional update (insert a new attribute name-value pair if it doesn't
        exist, or replace an existing name-value pair if it has certain expected
        attribute values).</p>
      operationId: UpdateItem
      parameters:
        - enum:
            - DynamoDB_20111205.UpdateItem
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateItemInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateItemOutput'
        '480':
          description: ConditionalCheckFailedException
          schema:
            $ref: '#/definitions/ConditionalCheckFailedException'
        '481':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: RequestLimitExceeded
          schema:
            $ref: '#/definitions/RequestLimitExceeded'
        '485':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  /#X-Amz-Target=DynamoDB_20111205.UpdateTable:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Updates the provisioned throughput for the given table.</p>
        <p>Setting the throughput for a table helps you manage performance and
        is part of the Provisioned Throughput feature of Amazon DynamoDB.</p>
      operationId: UpdateTable
      parameters:
        - enum:
            - DynamoDB_20111205.UpdateTable
          in: header
          name: X-Amz-Target
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTableInput'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateTableOutput'
        '480':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string
x-hasEquivalentPaths: true

