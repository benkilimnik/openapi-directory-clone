basePath: /
definitions:
  AccessDeniedException: {}
  AdditionalAuthenticationProvider:
    description: Describes an additional authentication provider.
    properties:
      authenticationType:
        allOf:
          - $ref: '#/definitions/AuthenticationType'
          - description: >-
              The authentication type: API key, Identity and Access Management,
              OIDC, or Amazon Cognito user pools.
      lambdaAuthorizerConfig:
        allOf:
          - $ref: '#/definitions/LambdaAuthorizerConfig'
          - description: Configuration for AWS Lambda function authorization.
      openIDConnectConfig:
        allOf:
          - $ref: '#/definitions/OpenIDConnectConfig'
          - description: The OpenID Connect configuration.
      userPoolConfig:
        allOf:
          - $ref: '#/definitions/CognitoUserPoolConfig'
          - description: The Amazon Cognito user pool configuration.
    type: object
  AdditionalAuthenticationProviders:
    items:
      $ref: '#/definitions/AdditionalAuthenticationProvider'
    type: array
  ApiCache:
    description: The <code>ApiCache</code> object.
    properties:
      apiCachingBehavior:
        allOf:
          - $ref: '#/definitions/ApiCachingBehavior'
          - description: >-
              <p>Caching behavior.</p> <ul> <li> <p>
              <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p>
              </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers
              that you specify are cached.</p> </li> </ul>
      atRestEncryptionEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              At rest encryption flag for cache. This setting cannot be updated
              after creation.
      status:
        allOf:
          - $ref: '#/definitions/ApiCacheStatus'
          - description: >-
              <p>The cache instance status.</p> <ul> <li> <p> <b>AVAILABLE</b>:
              The instance is available for use.</p> </li> <li> <p>
              <b>CREATING</b>: The instance is currently creating.</p> </li>
              <li> <p> <b>DELETING</b>: The instance is currently deleting.</p>
              </li> <li> <p> <b>MODIFYING</b>: The instance is currently
              modifying.</p> </li> <li> <p> <b>FAILED</b>: The instance has
              failed creation.</p> </li> </ul>
      transitEncryptionEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Transit encryption flag when connecting to cache. This setting
              cannot be updated after creation.
      ttl:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              <p>TTL in seconds for cache entries.</p> <p>Valid values are
              between 1 and 3600 seconds.</p>
      type:
        allOf:
          - $ref: '#/definitions/ApiCacheType'
          - description: >-
              <p>The cache instance type. Valid values are </p> <ul> <li> <p>
              <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p>
              </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p>
              <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p>
              </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p>
              <code>LARGE_8X</code> (not available in all regions)</p> </li>
              <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically,
              instance types were identified by an EC2-style value. As of July
              2020, this is deprecated, and the generic identifiers above should
              be used.</p> <p>The following legacy instance types are available,
              but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A
              t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A
              t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A
              r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A
              r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A
              r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A
              r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A
              r4.8xlarge instance type.</p> </li> </ul>
    type: object
  ApiCacheStatus:
    enum:
      - AVAILABLE
      - CREATING
      - DELETING
      - MODIFYING
      - FAILED
    type: string
  ApiCacheType:
    enum:
      - T2_SMALL
      - T2_MEDIUM
      - R4_LARGE
      - R4_XLARGE
      - R4_2XLARGE
      - R4_4XLARGE
      - R4_8XLARGE
      - SMALL
      - MEDIUM
      - LARGE
      - XLARGE
      - LARGE_2X
      - LARGE_4X
      - LARGE_8X
      - LARGE_12X
    type: string
  ApiCachingBehavior:
    enum:
      - FULL_REQUEST_CACHING
      - PER_RESOLVER_CACHING
    type: string
  ApiKey:
    description: >-
      <p>Describes an API key.</p> <p>Customers invoke AppSync GraphQL API
      operations with API keys as an identity mechanism. There are two key
      versions:</p> <p> <b>da1</b>: This version was introduced at launch in
      November 2017. These keys always expire after 7 days. Key expiration is
      managed by Amazon DynamoDB TTL. The keys ceased to be valid after February
      21, 2018 and should not be used after that date.</p> <ul> <li> <p>
      <code>ListApiKeys</code> returns the expiration time in milliseconds.</p>
      </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in
      milliseconds.</p> </li> <li> <p> <code>UpdateApiKey</code> is not
      available for this key version.</p> </li> <li> <p>
      <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li>
      <p>Expiration is stored in Amazon DynamoDB as milliseconds. This results
      in a bug where keys are not automatically deleted because DynamoDB expects
      the TTL to be stored in seconds. As a one-time action, we will delete
      these keys from the table after February 21, 2018.</p> </li> </ul> <p>
      <b>da2</b>: This version was introduced in February 2018 when AppSync
      added support to extend key expiration.</p> <ul> <li> <p>
      <code>ListApiKeys</code> returns the expiration time and deletion time in
      seconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the
      expiration time and deletion time in seconds and accepts a user-provided
      expiration time in seconds.</p> </li> <li> <p> <code>UpdateApiKey</code>
      returns the expiration time and and deletion time in seconds and accepts a
      user-provided expiration time in seconds. Expired API keys are kept for 60
      days after the expiration time. Key expiration time can be updated while
      the key is not deleted. </p> </li> <li> <p> <code>DeleteApiKey</code>
      deletes the item from the table.</p> </li> <li> <p>Expiration is stored in
      Amazon DynamoDB as seconds. After the expiration time, using the key to
      authenticate will fail. But the key can be reinstated before deletion.</p>
      </li> <li> <p>Deletion is stored in Amazon DynamoDB as seconds. The key
      will be deleted after deletion time. </p> </li> </ul>
    properties:
      deletes:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The time after which the API key is deleted. The date is
              represented as seconds since the epoch, rounded down to the
              nearest hour.
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: A description of the purpose of the API key.
      expires:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The time after which the API key expires. The date is represented
              as seconds since the epoch, rounded down to the nearest hour.
      id:
        allOf:
          - $ref: '#/definitions/String'
          - description: The API key ID.
    type: object
  ApiKeyLimitExceededException: {}
  ApiKeyValidityOutOfBoundsException: {}
  ApiKeys:
    items:
      $ref: '#/definitions/ApiKey'
    type: array
  ApiLimitExceededException: {}
  AuthenticationType:
    enum:
      - API_KEY
      - AWS_IAM
      - AMAZON_COGNITO_USER_POOLS
      - OPENID_CONNECT
      - AWS_LAMBDA
    type: string
  AuthorizationConfig:
    description: The authorization config in case the HTTP endpoint requires authorization.
    properties:
      authorizationType:
        allOf:
          - $ref: '#/definitions/AuthorizationType'
          - description: >-
              <p>The authorization type required by the HTTP endpoint.</p> <ul>
              <li> <p> <b>AWS_IAM</b>: The authorization type is Sigv4.</p>
              </li> </ul>
      awsIamConfig:
        allOf:
          - $ref: '#/definitions/AwsIamConfig'
          - description: The Identity and Access Management settings.
    required:
      - authorizationType
    type: object
  AuthorizationType:
    enum:
      - AWS_IAM
    type: string
  AwsIamConfig:
    description: The Identity and Access Management configuration.
    properties:
      signingRegion:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The signing region for Identity and Access Management
              authorization.
      signingServiceName:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The signing service name for Identity and Access Management
              authorization.
    type: object
  BadRequestException: {}
  Blob:
    type: string
  Boolean:
    type: boolean
  BooleanValue:
    type: boolean
  CachingConfig:
    description: The caching configuration for a resolver that has caching enabled.
    properties:
      cachingKeys:
        allOf:
          - $ref: '#/definitions/CachingKeys'
          - description: >-
              <p>The caching keys for a resolver that has caching enabled.</p>
              <p>Valid values are entries from the
              <code>$context.arguments</code>, <code>$context.source</code>, and
              <code>$context.identity</code> maps.</p>
      ttl:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              <p>The TTL in seconds for a resolver that has caching enabled.</p>
              <p>Valid values are between 1 and 3600 seconds.</p>
    type: object
  CachingKeys:
    items:
      $ref: '#/definitions/String'
    type: array
  CognitoUserPoolConfig:
    description: Describes an Amazon Cognito user pool configuration.
    properties:
      appIdClientRegex:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              A regular expression for validating the incoming Amazon Cognito
              user pool app client ID.
      awsRegion:
        allOf:
          - $ref: '#/definitions/String'
          - description: The Amazon Web Services Region in which the user pool was created.
      userPoolId:
        allOf:
          - $ref: '#/definitions/String'
          - description: The user pool ID.
    required:
      - userPoolId
      - awsRegion
    type: object
  ConcurrentModificationException: {}
  ConflictDetectionType:
    enum:
      - VERSION
      - NONE
    type: string
  ConflictHandlerType:
    enum:
      - OPTIMISTIC_CONCURRENCY
      - LAMBDA
      - AUTOMERGE
      - NONE
    type: string
  CreateApiCacheRequest:
    description: Represents the input of a <code>CreateApiCache</code> operation.
    properties:
      apiCachingBehavior:
        allOf:
          - $ref: '#/definitions/ApiCachingBehavior'
          - description: >-
              <p>Caching behavior.</p> <ul> <li> <p>
              <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p>
              </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers
              that you specify are cached.</p> </li> </ul>
      atRestEncryptionEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              At rest encryption flag for cache. This setting cannot be updated
              after creation.
      transitEncryptionEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Transit encryption flag when connecting to cache. This setting
              cannot be updated after creation.
      ttl:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              <p>TTL in seconds for cache entries.</p> <p>Valid values are
              between 1 and 3600 seconds.</p>
      type:
        allOf:
          - $ref: '#/definitions/ApiCacheType'
          - description: >-
              <p>The cache instance type. Valid values are </p> <ul> <li> <p>
              <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p>
              </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p>
              <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p>
              </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p>
              <code>LARGE_8X</code> (not available in all regions)</p> </li>
              <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically,
              instance types were identified by an EC2-style value. As of July
              2020, this is deprecated, and the generic identifiers above should
              be used.</p> <p>The following legacy instance types are available,
              but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A
              t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A
              t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A
              r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A
              r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A
              r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A
              r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A
              r4.8xlarge instance type.</p> </li> </ul>
    required:
      - ttl
      - apiCachingBehavior
      - type
    title: CreateApiCacheRequest
    type: object
  CreateApiCacheResponse:
    description: Represents the output of a <code>CreateApiCache</code> operation.
    properties:
      apiCache:
        allOf:
          - $ref: '#/definitions/ApiCache'
          - description: The <code>ApiCache</code> object.
    type: object
  CreateApiKeyRequest:
    properties:
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: A description of the purpose of the API key.
      expires:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The time from creation time after which the API key expires. The
              date is represented as seconds since the epoch, rounded down to
              the nearest hour. The default value for this parameter is 7 days
              from creation time. For more information, see .
    title: CreateApiKeyRequest
    type: object
  CreateApiKeyResponse:
    properties:
      apiKey:
        allOf:
          - $ref: '#/definitions/ApiKey'
          - description: The API key.
    type: object
  CreateDataSourceRequest:
    properties:
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: A description of the <code>DataSource</code>.
      dynamodbConfig:
        allOf:
          - $ref: '#/definitions/DynamodbDataSourceConfig'
          - description: Amazon DynamoDB settings.
      elasticsearchConfig:
        allOf:
          - $ref: '#/definitions/ElasticsearchDataSourceConfig'
          - description: Amazon Elasticsearch Service settings.
      httpConfig:
        allOf:
          - $ref: '#/definitions/HttpDataSourceConfig'
          - description: HTTP endpoint settings.
      lambdaConfig:
        allOf:
          - $ref: '#/definitions/LambdaDataSourceConfig'
          - description: Amazon Web Services Lambda settings.
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: A user-supplied name for the <code>DataSource</code>.
      relationalDatabaseConfig:
        allOf:
          - $ref: '#/definitions/RelationalDatabaseDataSourceConfig'
          - description: Relational database settings.
      serviceRoleArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The Identity and Access Management service role ARN for the data
              source. The system assumes this role when accessing the data
              source.
      type:
        allOf:
          - $ref: '#/definitions/DataSourceType'
          - description: The type of the <code>DataSource</code>.
    required:
      - name
      - type
    title: CreateDataSourceRequest
    type: object
  CreateDataSourceResponse:
    properties:
      dataSource:
        allOf:
          - $ref: '#/definitions/DataSource'
          - description: The <code>DataSource</code> object.
    type: object
  CreateFunctionRequest:
    properties:
      dataSourceName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The <code>Function</code> <code>DataSource</code> name.
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: The <code>Function</code> description.
      functionVersion:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The <code>version</code> of the request mapping template.
              Currently the supported value is 2018-05-29. 
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: >-
              The <code>Function</code> name. The function name does not have to
              be unique.
      requestMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: >-
              The <code>Function</code> request mapping template. Functions
              support only the 2018-05-29 version of the request mapping
              template.
      responseMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: 'The <code>Function</code> response mapping template. '
      syncConfig:
        $ref: '#/definitions/SyncConfig'
    required:
      - name
      - dataSourceName
      - functionVersion
    title: CreateFunctionRequest
    type: object
  CreateFunctionResponse:
    properties:
      functionConfiguration:
        allOf:
          - $ref: '#/definitions/FunctionConfiguration'
          - description: The <code>Function</code> object.
    type: object
  CreateGraphqlApiRequest:
    properties:
      additionalAuthenticationProviders:
        allOf:
          - $ref: '#/definitions/AdditionalAuthenticationProviders'
          - description: >-
              A list of additional authentication providers for the
              <code>GraphqlApi</code> API.
      authenticationType:
        allOf:
          - $ref: '#/definitions/AuthenticationType'
          - description: >-
              The authentication type: API key, Identity and Access Management,
              OIDC, or Amazon Cognito user pools.
      lambdaAuthorizerConfig:
        allOf:
          - $ref: '#/definitions/LambdaAuthorizerConfig'
          - description: Configuration for AWS Lambda function authorization.
      logConfig:
        allOf:
          - $ref: '#/definitions/LogConfig'
          - description: The Amazon CloudWatch Logs configuration.
      name:
        allOf:
          - $ref: '#/definitions/String'
          - description: A user-supplied name for the <code>GraphqlApi</code>.
      openIDConnectConfig:
        allOf:
          - $ref: '#/definitions/OpenIDConnectConfig'
          - description: The OpenID Connect configuration.
      tags:
        allOf:
          - $ref: '#/definitions/TagMap'
          - description: A <code>TagMap</code> object.
      userPoolConfig:
        allOf:
          - $ref: '#/definitions/UserPoolConfig'
          - description: The Amazon Cognito user pool configuration.
      xrayEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              A flag indicating whether to enable X-Ray tracing for the
              <code>GraphqlApi</code>.
    required:
      - name
      - authenticationType
    title: CreateGraphqlApiRequest
    type: object
  CreateGraphqlApiResponse:
    properties:
      graphqlApi:
        allOf:
          - $ref: '#/definitions/GraphqlApi'
          - description: The <code>GraphqlApi</code>.
    type: object
  CreateResolverRequest:
    properties:
      cachingConfig:
        allOf:
          - $ref: '#/definitions/CachingConfig'
          - description: The caching configuration for the resolver.
      dataSourceName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: >-
              The name of the data source for which the resolver is being
              created.
      fieldName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the field to attach the resolver to.
      kind:
        allOf:
          - $ref: '#/definitions/ResolverKind'
          - description: >-
              <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT
              resolver type. A UNIT resolver is the default resolver type. A
              UNIT resolver enables you to execute a GraphQL query against a
              single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE
              resolver type. A PIPELINE resolver enables you to execute a series
              of <code>Function</code> in a serial manner. You can use a
              pipeline resolver to execute a GraphQL query against multiple data
              sources.</p> </li> </ul>
      pipelineConfig:
        allOf:
          - $ref: '#/definitions/PipelineConfig'
          - description: The <code>PipelineConfig</code>.
      requestMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: >-
              <p>The mapping template to be used for requests.</p> <p>A resolver
              uses a request mapping template to convert a GraphQL expression
              into a format that a data source can understand. Mapping templates
              are written in Apache Velocity Template Language (VTL).</p> <p>VTL
              request mapping templates are optional when using a Lambda data
              source. For all other data sources, VTL request and response
              mapping templates are required.</p>
      responseMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: >-
              The mapping template to be used for responses from the data
              source.
      syncConfig:
        allOf:
          - $ref: '#/definitions/SyncConfig'
          - description: >-
              The <code>SyncConfig</code> for a resolver attached to a versioned
              datasource.
    required:
      - fieldName
    title: CreateResolverRequest
    type: object
  CreateResolverResponse:
    properties:
      resolver:
        allOf:
          - $ref: '#/definitions/Resolver'
          - description: The <code>Resolver</code> object.
    type: object
  CreateTypeRequest:
    properties:
      definition:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              <p>The type definition, in GraphQL Schema Definition Language
              (SDL) format.</p> <p>For more information, see the <a
              href="http://graphql.org/learn/schema/">GraphQL SDL
              documentation</a>.</p>
      format:
        allOf:
          - $ref: '#/definitions/TypeDefinitionFormat'
          - description: 'The type format: SDL or JSON.'
    required:
      - definition
      - format
    title: CreateTypeRequest
    type: object
  CreateTypeResponse:
    properties:
      type:
        allOf:
          - $ref: '#/definitions/Type'
          - description: The <code>Type</code> object.
    type: object
  DataSource:
    description: Describes a data source.
    properties:
      dataSourceArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The data source ARN.
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: The description of the data source.
      dynamodbConfig:
        allOf:
          - $ref: '#/definitions/DynamodbDataSourceConfig'
          - description: Amazon DynamoDB settings.
      elasticsearchConfig:
        allOf:
          - $ref: '#/definitions/ElasticsearchDataSourceConfig'
          - description: Amazon Elasticsearch Service settings.
      httpConfig:
        allOf:
          - $ref: '#/definitions/HttpDataSourceConfig'
          - description: HTTP endpoint settings.
      lambdaConfig:
        allOf:
          - $ref: '#/definitions/LambdaDataSourceConfig'
          - description: Amazon Web Services Lambda settings.
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the data source.
      relationalDatabaseConfig:
        allOf:
          - $ref: '#/definitions/RelationalDatabaseDataSourceConfig'
          - description: Relational database settings.
      serviceRoleArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The Identity and Access Management service role ARN for the data
              source. The system assumes this role when accessing the data
              source.
      type:
        allOf:
          - $ref: '#/definitions/DataSourceType'
          - description: >-
              <p>The type of the data source.</p> <ul> <li> <p>
              <b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
              table.</p> </li> <li> <p> <b>AMAZON_ELASTICSEARCH</b>: The data
              source is an Amazon Elasticsearch Service domain.</p> </li> <li>
              <p> <b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
              Lambda function.</p> </li> <li> <p> <b>NONE</b>: There is no data
              source. This type is used when you wish to invoke a GraphQL
              operation without connecting to a data source, such as performing
              data transformation with resolvers or triggering a subscription to
              be invoked from a mutation.</p> </li> <li> <p> <b>HTTP</b>: The
              data source is an HTTP endpoint.</p> </li> <li> <p>
              <b>RELATIONAL_DATABASE</b>: The data source is a relational
              database.</p> </li> </ul>
    type: object
  DataSourceType:
    enum:
      - AWS_LAMBDA
      - AMAZON_DYNAMODB
      - AMAZON_ELASTICSEARCH
      - NONE
      - HTTP
      - RELATIONAL_DATABASE
    type: string
  DataSources:
    items:
      $ref: '#/definitions/DataSource'
    type: array
  DefaultAction:
    enum:
      - ALLOW
      - DENY
    type: string
  DeleteApiCacheRequest:
    description: Represents the input of a <code>DeleteApiCache</code> operation.
    properties: {}
    title: DeleteApiCacheRequest
    type: object
  DeleteApiCacheResponse:
    description: Represents the output of a <code>DeleteApiCache</code> operation.
    properties: {}
    type: object
  DeleteApiKeyRequest:
    properties: {}
    title: DeleteApiKeyRequest
    type: object
  DeleteApiKeyResponse:
    properties: {}
    type: object
  DeleteDataSourceRequest:
    properties: {}
    title: DeleteDataSourceRequest
    type: object
  DeleteDataSourceResponse:
    properties: {}
    type: object
  DeleteFunctionRequest:
    properties: {}
    title: DeleteFunctionRequest
    type: object
  DeleteFunctionResponse:
    properties: {}
    type: object
  DeleteGraphqlApiRequest:
    properties: {}
    title: DeleteGraphqlApiRequest
    type: object
  DeleteGraphqlApiResponse:
    properties: {}
    type: object
  DeleteResolverRequest:
    properties: {}
    title: DeleteResolverRequest
    type: object
  DeleteResolverResponse:
    properties: {}
    type: object
  DeleteTypeRequest:
    properties: {}
    title: DeleteTypeRequest
    type: object
  DeleteTypeResponse:
    properties: {}
    type: object
  DeltaSyncConfig:
    description: Describes a Delta Sync configuration.
    properties:
      baseTableTTL:
        allOf:
          - $ref: '#/definitions/Long'
          - description: The number of minutes an Item is stored in the datasource.
      deltaSyncTableName:
        allOf:
          - $ref: '#/definitions/String'
          - description: The Delta Sync table name.
      deltaSyncTableTTL:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The number of minutes a Delta Sync log entry is stored in the
              Delta Sync table.
    type: object
  DynamodbDataSourceConfig:
    description: Describes an Amazon DynamoDB data source configuration.
    properties:
      awsRegion:
        allOf:
          - $ref: '#/definitions/String'
          - description: The Amazon Web Services Region.
      deltaSyncConfig:
        allOf:
          - $ref: '#/definitions/DeltaSyncConfig'
          - description: The <code>DeltaSyncConfig</code> for a versioned datasource.
      tableName:
        allOf:
          - $ref: '#/definitions/String'
          - description: The table name.
      useCallerCredentials:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Set to TRUE to use Amazon Cognito credentials with this data
              source.
      versioned:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Set to TRUE to use Conflict Detection and Resolution with this
              data source.
    required:
      - tableName
      - awsRegion
    type: object
  ElasticsearchDataSourceConfig:
    description: Describes an Elasticsearch data source configuration.
    properties:
      awsRegion:
        allOf:
          - $ref: '#/definitions/String'
          - description: The Amazon Web Services Region.
      endpoint:
        allOf:
          - $ref: '#/definitions/String'
          - description: The endpoint.
    required:
      - endpoint
      - awsRegion
    type: object
  FieldLogLevel:
    enum:
      - NONE
      - ERROR
      - ALL
    type: string
  FlushApiCacheRequest:
    description: Represents the input of a <code>FlushApiCache</code> operation.
    properties: {}
    title: FlushApiCacheRequest
    type: object
  FlushApiCacheResponse:
    description: Represents the output of a <code>FlushApiCache</code> operation.
    properties: {}
    type: object
  FunctionConfiguration:
    description: >-
      A function is a reusable entity. Multiple functions can be used to compose
      the resolver logic.
    properties:
      dataSourceName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the <code>DataSource</code>.
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: The <code>Function</code> description.
      functionArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The ARN of the <code>Function</code> object.
      functionId:
        allOf:
          - $ref: '#/definitions/String'
          - description: A unique ID representing the <code>Function</code> object.
      functionVersion:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The version of the request mapping template. Currently only the
              2018-05-29 version of the template is supported.
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The name of the <code>Function</code> object.
      requestMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: >-
              The <code>Function</code> request mapping template. Functions
              support only the 2018-05-29 version of the request mapping
              template.
      responseMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: The <code>Function</code> response mapping template.
      syncConfig:
        $ref: '#/definitions/SyncConfig'
    type: object
  Functions:
    items:
      $ref: '#/definitions/FunctionConfiguration'
    type: array
  FunctionsIds:
    items:
      $ref: '#/definitions/String'
    type: array
  GetApiCacheRequest:
    description: Represents the input of a <code>GetApiCache</code> operation.
    properties: {}
    title: GetApiCacheRequest
    type: object
  GetApiCacheResponse:
    description: Represents the output of a <code>GetApiCache</code> operation.
    properties:
      apiCache:
        allOf:
          - $ref: '#/definitions/ApiCache'
          - description: The <code>ApiCache</code> object.
    type: object
  GetDataSourceRequest:
    properties: {}
    title: GetDataSourceRequest
    type: object
  GetDataSourceResponse:
    properties:
      dataSource:
        allOf:
          - $ref: '#/definitions/DataSource'
          - description: The <code>DataSource</code> object.
    type: object
  GetFunctionRequest:
    properties: {}
    title: GetFunctionRequest
    type: object
  GetFunctionResponse:
    properties:
      functionConfiguration:
        allOf:
          - $ref: '#/definitions/FunctionConfiguration'
          - description: The <code>Function</code> object.
    type: object
  GetGraphqlApiRequest:
    properties: {}
    title: GetGraphqlApiRequest
    type: object
  GetGraphqlApiResponse:
    properties:
      graphqlApi:
        allOf:
          - $ref: '#/definitions/GraphqlApi'
          - description: The <code>GraphqlApi</code> object.
    type: object
  GetIntrospectionSchemaRequest:
    properties: {}
    title: GetIntrospectionSchemaRequest
    type: object
  GetIntrospectionSchemaResponse:
    properties:
      schema:
        allOf:
          - $ref: '#/definitions/Blob'
          - description: >-
              <p>The schema, in GraphQL Schema Definition Language (SDL)
              format.</p> <p>For more information, see the <a
              href="http://graphql.org/learn/schema/">GraphQL SDL
              documentation</a>.</p>
    type: object
  GetResolverRequest:
    properties: {}
    title: GetResolverRequest
    type: object
  GetResolverResponse:
    properties:
      resolver:
        allOf:
          - $ref: '#/definitions/Resolver'
          - description: The <code>Resolver</code> object.
    type: object
  GetSchemaCreationStatusRequest:
    properties: {}
    title: GetSchemaCreationStatusRequest
    type: object
  GetSchemaCreationStatusResponse:
    properties:
      details:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              Detailed information about the status of the schema creation
              operation.
      status:
        allOf:
          - $ref: '#/definitions/SchemaStatus'
          - description: >-
              The current state of the schema (PROCESSING, FAILED, SUCCESS, or
              NOT_APPLICABLE). When the schema is in the ACTIVE state, you can
              add data.
    type: object
  GetTypeRequest:
    properties: {}
    title: GetTypeRequest
    type: object
  GetTypeResponse:
    properties:
      type:
        allOf:
          - $ref: '#/definitions/Type'
          - description: The <code>Type</code> object.
    type: object
  GraphQLSchemaException: {}
  GraphqlApi:
    description: Describes a GraphQL API.
    properties:
      additionalAuthenticationProviders:
        allOf:
          - $ref: '#/definitions/AdditionalAuthenticationProviders'
          - description: >-
              A list of additional authentication providers for the
              <code>GraphqlApi</code> API.
      apiId:
        allOf:
          - $ref: '#/definitions/String'
          - description: The API ID.
      arn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The ARN.
      authenticationType:
        allOf:
          - $ref: '#/definitions/AuthenticationType'
          - description: The authentication type.
      lambdaAuthorizerConfig:
        allOf:
          - $ref: '#/definitions/LambdaAuthorizerConfig'
          - description: <p/> <p>Configuration for AWS Lambda function authorization.</p>
      logConfig:
        allOf:
          - $ref: '#/definitions/LogConfig'
          - description: The Amazon CloudWatch Logs configuration.
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The API name.
      openIDConnectConfig:
        allOf:
          - $ref: '#/definitions/OpenIDConnectConfig'
          - description: The OpenID Connect configuration.
      tags:
        allOf:
          - $ref: '#/definitions/TagMap'
          - description: The tags.
      uris:
        allOf:
          - $ref: '#/definitions/MapOfStringToString'
          - description: The URIs.
      userPoolConfig:
        allOf:
          - $ref: '#/definitions/UserPoolConfig'
          - description: The Amazon Cognito user pool configuration.
      wafWebAclArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The ARN of the WAF ACL associated with this
              <code>GraphqlApi</code>, if one exists.
      xrayEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              A flag representing whether X-Ray tracing is enabled for this
              <code>GraphqlApi</code>.
    type: object
  GraphqlApis:
    items:
      $ref: '#/definitions/GraphqlApi'
    type: array
  HttpDataSourceConfig:
    description: Describes an HTTP data source configuration.
    properties:
      authorizationConfig:
        allOf:
          - $ref: '#/definitions/AuthorizationConfig'
          - description: >-
              The authorization config in case the HTTP endpoint requires
              authorization.
      endpoint:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The HTTP URL endpoint. You can either specify the domain name or
              IP, and port combination, and the URL scheme must be HTTP or
              HTTPS. If the port is not specified, AppSync uses the default port
              80 for the HTTP endpoint and port 443 for HTTPS endpoints.
    type: object
  InternalFailureException: {}
  LambdaAuthorizerConfig:
    description: >-
      A <code>LambdaAuthorizerConfig</code> holds configuration on how to
      authorize AppSync API access when using the <code>AWS_LAMBDA</code>
      authorizer mode. Be aware that an AppSync API may have only one Lambda
      authorizer configured at a time.
    properties:
      authorizerResultTtlInSeconds:
        allOf:
          - $ref: '#/definitions/TTL'
          - description: >-
              The number of seconds a response should be cached for. The default
              is 5 minutes (300 seconds). The Lambda function can override this
              by returning a <code>ttlOverride</code> key in its response. A
              value of 0 disables caching of responses.
      authorizerUri:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              <p>The ARN of the lambda function to be called for authorization.
              This may be a standard Lambda ARN, a version ARN
              (<code>.../v3</code>) or alias ARN. </p> <p> <i>Note</i>: This
              Lambda function must have the following resource-based policy
              assigned to it. When configuring Lambda authorizers in the
              Console, this is done for you. To do so with the AWS CLI, run the
              following:</p> <p> <code>aws lambda add-permission --function-name
              "arn:aws:lambda:us-east-2:111122223333:function:my-function"
              --statement-id "appsync" --principal appsync.amazonaws.com
              --action lambda:InvokeFunction</code> </p>
      identityValidationExpression:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              A regular expression for validation of tokens before the Lambda
              Function is called.
    required:
      - authorizerUri
    type: object
  LambdaConflictHandlerConfig:
    description: >-
      The <code>LambdaConflictHandlerConfig</code> object when configuring
      LAMBDA as the Conflict Handler.
    properties:
      lambdaConflictHandlerArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The Arn for the Lambda function to use as the Conflict Handler.
    type: object
  LambdaDataSourceConfig:
    description: Describes an Amazon Web Services Lambda data source configuration.
    properties:
      lambdaFunctionArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The ARN for the Lambda function.
    required:
      - lambdaFunctionArn
    type: object
  LimitExceededException: {}
  ListApiKeysRequest:
    properties: {}
    title: ListApiKeysRequest
    type: object
  ListApiKeysResponse:
    properties:
      apiKeys:
        allOf:
          - $ref: '#/definitions/ApiKeys'
          - description: The <code>ApiKey</code> objects.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier to be passed in the next request to this operation
              to return the next set of items in the list.
    type: object
  ListDataSourcesRequest:
    properties: {}
    title: ListDataSourcesRequest
    type: object
  ListDataSourcesResponse:
    properties:
      dataSources:
        allOf:
          - $ref: '#/definitions/DataSources'
          - description: The <code>DataSource</code> objects.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier to be passed in the next request to this operation
              to return the next set of items in the list.
    type: object
  ListFunctionsRequest:
    properties: {}
    title: ListFunctionsRequest
    type: object
  ListFunctionsResponse:
    properties:
      functions:
        allOf:
          - $ref: '#/definitions/Functions'
          - description: A list of <code>Function</code> objects.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier that was returned from the previous call to this
              operation, which can be used to return the next set of items in
              the list.
    type: object
  ListGraphqlApisRequest:
    properties: {}
    title: ListGraphqlApisRequest
    type: object
  ListGraphqlApisResponse:
    properties:
      graphqlApis:
        allOf:
          - $ref: '#/definitions/GraphqlApis'
          - description: The <code>GraphqlApi</code> objects.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier to be passed in the next request to this operation
              to return the next set of items in the list.
    type: object
  ListResolversByFunctionRequest:
    properties: {}
    title: ListResolversByFunctionRequest
    type: object
  ListResolversByFunctionResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier that can be used to return the next set of items in
              the list.
      resolvers:
        allOf:
          - $ref: '#/definitions/Resolvers'
          - description: The list of resolvers.
    type: object
  ListResolversRequest:
    properties: {}
    title: ListResolversRequest
    type: object
  ListResolversResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier to be passed in the next request to this operation
              to return the next set of items in the list.
      resolvers:
        allOf:
          - $ref: '#/definitions/Resolvers'
          - description: The <code>Resolver</code> objects.
    type: object
  ListTagsForResourceRequest:
    properties: {}
    title: ListTagsForResourceRequest
    type: object
  ListTagsForResourceResponse:
    properties:
      tags:
        allOf:
          - $ref: '#/definitions/TagMap'
          - description: A <code>TagMap</code> object.
    type: object
  ListTypesRequest:
    properties: {}
    title: ListTypesRequest
    type: object
  ListTypesResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              An identifier to be passed in the next request to this operation
              to return the next set of items in the list.
      types:
        allOf:
          - $ref: '#/definitions/TypeList'
          - description: The <code>Type</code> objects.
    type: object
  LogConfig:
    description: The CloudWatch Logs configuration.
    properties:
      cloudWatchLogsRoleArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The service role that AppSync will assume to publish to Amazon
              CloudWatch logs in your account. 
      excludeVerboseContent:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Set to TRUE to exclude sections that contain information such as
              headers, context, and evaluated mapping templates, regardless of
              logging level.
      fieldLogLevel:
        allOf:
          - $ref: '#/definitions/FieldLogLevel'
          - description: >-
              <p>The field logging level. Values can be NONE, ERROR, or ALL.
              </p> <ul> <li> <p> <b>NONE</b>: No field-level logs are
              captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following
              information only for the fields that are in error:</p> <ul> <li>
              <p>The error section in the server response.</p> </li> <li>
              <p>Field-level errors.</p> </li> <li> <p>The generated
              request/response functions that got resolved for error fields.</p>
              </li> </ul> </li> <li> <p> <b>ALL</b>: The following information
              is logged for all fields in the query:</p> <ul> <li>
              <p>Field-level tracing information.</p> </li> <li> <p>The
              generated request/response functions that got resolved for each
              field.</p> </li> </ul> </li> </ul>
    required:
      - fieldLogLevel
      - cloudWatchLogsRoleArn
    type: object
  Long:
    type: integer
  MapOfStringToString:
    additionalProperties:
      $ref: '#/definitions/String'
    type: object
  MappingTemplate:
    maxLength: 65536
    minLength: 1
    type: string
  MaxResults:
    maximum: 25
    minimum: 0
    type: integer
  NotFoundException: {}
  OpenIDConnectConfig:
    description: Describes an OpenID Connect configuration.
    properties:
      authTTL:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The number of milliseconds a token is valid after being
              authenticated.
      clientId:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The client identifier of the Relying party at the OpenID identity
              provider. This identifier is typically obtained when the Relying
              party is registered with the OpenID identity provider. You can
              specify a regular expression so the AppSync can validate against
              multiple client identifiers at a time.
      iatTTL:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The number of milliseconds a token is valid after being issued to
              a user.
      issuer:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The issuer for the OpenID Connect configuration. The issuer
              returned by discovery must exactly match the value of
              <code>iss</code> in the ID token.
    required:
      - issuer
    type: object
  OutputType:
    enum:
      - SDL
      - JSON
    type: string
  PaginationToken:
    maxLength: 65536
    minLength: 1
    pattern: '[\\S]+'
    type: string
  PipelineConfig:
    description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
    properties:
      functions:
        allOf:
          - $ref: '#/definitions/FunctionsIds'
          - description: A list of <code>Function</code> objects.
    type: object
  RdsHttpEndpointConfig:
    description: The Amazon RDS HTTP endpoint configuration.
    properties:
      awsRegion:
        allOf:
          - $ref: '#/definitions/String'
          - description: Amazon Web Services Region for RDS HTTP endpoint.
      awsSecretStoreArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: Amazon Web Services secret store ARN for database credentials.
      databaseName:
        allOf:
          - $ref: '#/definitions/String'
          - description: Logical database name.
      dbClusterIdentifier:
        allOf:
          - $ref: '#/definitions/String'
          - description: Amazon RDS cluster ARN.
      schema:
        allOf:
          - $ref: '#/definitions/String'
          - description: Logical schema name.
    type: object
  RelationalDatabaseDataSourceConfig:
    description: Describes a relational database data source configuration.
    properties:
      rdsHttpEndpointConfig:
        allOf:
          - $ref: '#/definitions/RdsHttpEndpointConfig'
          - description: Amazon RDS HTTP endpoint settings.
      relationalDatabaseSourceType:
        allOf:
          - $ref: '#/definitions/RelationalDatabaseSourceType'
          - description: >-
              <p>Source type for the relational database.</p> <ul> <li> <p>
              <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
              an Amazon RDS HTTP endpoint.</p> </li> </ul>
    type: object
  RelationalDatabaseSourceType:
    enum:
      - RDS_HTTP_ENDPOINT
    type: string
  Resolver:
    description: Describes a resolver.
    properties:
      cachingConfig:
        allOf:
          - $ref: '#/definitions/CachingConfig'
          - description: The caching configuration for the resolver.
      dataSourceName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The resolver data source name.
      fieldName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The resolver field name.
      kind:
        allOf:
          - $ref: '#/definitions/ResolverKind'
          - description: >-
              <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT
              resolver type. A UNIT resolver is the default resolver type. A
              UNIT resolver enables you to execute a GraphQL query against a
              single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE
              resolver type. A PIPELINE resolver enables you to execute a series
              of <code>Function</code> in a serial manner. You can use a
              pipeline resolver to execute a GraphQL query against multiple data
              sources.</p> </li> </ul>
      pipelineConfig:
        allOf:
          - $ref: '#/definitions/PipelineConfig'
          - description: The <code>PipelineConfig</code>.
      requestMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: The request mapping template.
      resolverArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The resolver ARN.
      responseMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: The response mapping template.
      syncConfig:
        allOf:
          - $ref: '#/definitions/SyncConfig'
          - description: >-
              The <code>SyncConfig</code> for a resolver attached to a versioned
              datasource.
      typeName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The resolver type name.
    type: object
  ResolverKind:
    enum:
      - UNIT
      - PIPELINE
    type: string
  Resolvers:
    items:
      $ref: '#/definitions/Resolver'
    type: array
  ResourceArn:
    maxLength: 75
    minLength: 70
    pattern: '^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$'
    type: string
  ResourceName:
    maxLength: 65536
    minLength: 1
    pattern: '[_A-Za-z][_0-9A-Za-z]*'
    type: string
  SchemaStatus:
    enum:
      - PROCESSING
      - ACTIVE
      - DELETING
      - FAILED
      - SUCCESS
      - NOT_APPLICABLE
    type: string
  StartSchemaCreationRequest:
    properties:
      definition:
        allOf:
          - $ref: '#/definitions/Blob'
          - description: 'The schema definition, in GraphQL schema language format.'
    required:
      - definition
    title: StartSchemaCreationRequest
    type: object
  StartSchemaCreationResponse:
    properties:
      status:
        allOf:
          - $ref: '#/definitions/SchemaStatus'
          - description: >-
              The current state of the schema (PROCESSING, FAILED, SUCCESS, or
              NOT_APPLICABLE). When the schema is in the ACTIVE state, you can
              add data.
    type: object
  String:
    type: string
  SyncConfig:
    description: >-
      <p>Describes a Sync configuration for a resolver.</p> <p>Contains
      information on which Conflict Detection as well as Resolution strategy
      should be performed when the resolver is invoked.</p>
    properties:
      conflictDetection:
        allOf:
          - $ref: '#/definitions/ConflictDetectionType'
          - description: >-
              <p>The Conflict Detection strategy to use.</p> <ul> <li> <p>
              <b>VERSION</b>: Detect conflicts based on object versions for this
              resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts
              when executing this resolver.</p> </li> </ul>
      conflictHandler:
        allOf:
          - $ref: '#/definitions/ConflictHandlerType'
          - description: >-
              <p>The Conflict Resolution strategy to perform in the event of a
              conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve
              conflicts by rejecting mutations when versions do not match the
              latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>:
              Resolve conflicts with the Automerge conflict resolution
              strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with
              a Lambda function supplied in the LambdaConflictHandlerConfig.</p>
              </li> </ul>
      lambdaConflictHandlerConfig:
        allOf:
          - $ref: '#/definitions/LambdaConflictHandlerConfig'
          - description: >-
              The <code>LambdaConflictHandlerConfig</code> when configuring
              LAMBDA as the Conflict Handler.
    type: object
  TTL:
    maximum: 3600
    minimum: 0
    type: integer
  TagKey:
    description: The key for the tag.
    maxLength: 128
    minLength: 1
    pattern: '^(?!aws:)[ a-zA-Z+-=._:/]+$'
    type: string
  TagKeyList:
    items:
      $ref: '#/definitions/TagKey'
    maxItems: 50
    minItems: 1
    type: array
  TagMap:
    additionalProperties:
      $ref: '#/definitions/TagValue'
    description: >-
      A map with keys of <code>TagKey</code> objects and values of
      <code>TagValue</code> objects.
    maxProperties: 50
    minProperties: 1
    type: object
  TagResourceRequest:
    properties:
      tags:
        allOf:
          - $ref: '#/definitions/TagMap'
          - description: A <code>TagMap</code> object.
    required:
      - tags
    title: TagResourceRequest
    type: object
  TagResourceResponse:
    properties: {}
    type: object
  TagValue:
    description: The value for the tag.
    maxLength: 256
    type: string
  Type:
    description: Describes a type.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The type ARN.
      definition:
        allOf:
          - $ref: '#/definitions/String'
          - description: The type definition.
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: The type description.
      format:
        allOf:
          - $ref: '#/definitions/TypeDefinitionFormat'
          - description: 'The type format: SDL or JSON.'
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The type name.
    type: object
  TypeDefinitionFormat:
    enum:
      - SDL
      - JSON
    type: string
  TypeList:
    items:
      $ref: '#/definitions/Type'
    type: array
  UnauthorizedException: {}
  UntagResourceRequest:
    properties: {}
    title: UntagResourceRequest
    type: object
  UntagResourceResponse:
    properties: {}
    type: object
  UpdateApiCacheRequest:
    description: Represents the input of a <code>UpdateApiCache</code> operation.
    properties:
      apiCachingBehavior:
        allOf:
          - $ref: '#/definitions/ApiCachingBehavior'
          - description: >-
              <p>Caching behavior.</p> <ul> <li> <p>
              <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p>
              </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers
              that you specify are cached.</p> </li> </ul>
      ttl:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              <p>TTL in seconds for cache entries.</p> <p>Valid values are
              between 1 and 3600 seconds.</p>
      type:
        allOf:
          - $ref: '#/definitions/ApiCacheType'
          - description: >-
              <p>The cache instance type. Valid values are </p> <ul> <li> <p>
              <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p>
              </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p>
              <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p>
              </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p>
              <code>LARGE_8X</code> (not available in all regions)</p> </li>
              <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically,
              instance types were identified by an EC2-style value. As of July
              2020, this is deprecated, and the generic identifiers above should
              be used.</p> <p>The following legacy instance types are available,
              but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A
              t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A
              t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A
              r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A
              r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A
              r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A
              r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A
              r4.8xlarge instance type.</p> </li> </ul>
    required:
      - ttl
      - apiCachingBehavior
      - type
    title: UpdateApiCacheRequest
    type: object
  UpdateApiCacheResponse:
    description: Represents the output of a <code>UpdateApiCache</code> operation.
    properties:
      apiCache:
        allOf:
          - $ref: '#/definitions/ApiCache'
          - description: The <code>ApiCache</code> object.
    type: object
  UpdateApiKeyRequest:
    properties:
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: A description of the purpose of the API key.
      expires:
        allOf:
          - $ref: '#/definitions/Long'
          - description: >-
              The time from update time after which the API key expires. The
              date is represented as seconds since the epoch. For more
              information, see .
    title: UpdateApiKeyRequest
    type: object
  UpdateApiKeyResponse:
    properties:
      apiKey:
        allOf:
          - $ref: '#/definitions/ApiKey'
          - description: The API key.
    type: object
  UpdateDataSourceRequest:
    properties:
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: The new description for the data source.
      dynamodbConfig:
        allOf:
          - $ref: '#/definitions/DynamodbDataSourceConfig'
          - description: The new Amazon DynamoDB configuration.
      elasticsearchConfig:
        allOf:
          - $ref: '#/definitions/ElasticsearchDataSourceConfig'
          - description: The new Elasticsearch Service configuration.
      httpConfig:
        allOf:
          - $ref: '#/definitions/HttpDataSourceConfig'
          - description: The new HTTP endpoint configuration.
      lambdaConfig:
        allOf:
          - $ref: '#/definitions/LambdaDataSourceConfig'
          - description: The new Amazon Web Services Lambda configuration.
      relationalDatabaseConfig:
        allOf:
          - $ref: '#/definitions/RelationalDatabaseDataSourceConfig'
          - description: The new relational database configuration.
      serviceRoleArn:
        allOf:
          - $ref: '#/definitions/String'
          - description: The new service role ARN for the data source.
      type:
        allOf:
          - $ref: '#/definitions/DataSourceType'
          - description: The new data source type.
    required:
      - type
    title: UpdateDataSourceRequest
    type: object
  UpdateDataSourceResponse:
    properties:
      dataSource:
        allOf:
          - $ref: '#/definitions/DataSource'
          - description: The updated <code>DataSource</code> object.
    type: object
  UpdateFunctionRequest:
    properties:
      dataSourceName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The <code>Function</code> <code>DataSource</code> name.
      description:
        allOf:
          - $ref: '#/definitions/String'
          - description: The <code>Function</code> description.
      functionVersion:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The <code>version</code> of the request mapping template.
              Currently the supported value is 2018-05-29. 
      name:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The <code>Function</code> name.
      requestMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: >-
              The <code>Function</code> request mapping template. Functions
              support only the 2018-05-29 version of the request mapping
              template.
      responseMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: 'The <code>Function</code> request mapping template. '
      syncConfig:
        $ref: '#/definitions/SyncConfig'
    required:
      - name
      - dataSourceName
      - functionVersion
    title: UpdateFunctionRequest
    type: object
  UpdateFunctionResponse:
    properties:
      functionConfiguration:
        allOf:
          - $ref: '#/definitions/FunctionConfiguration'
          - description: The <code>Function</code> object.
    type: object
  UpdateGraphqlApiRequest:
    properties:
      additionalAuthenticationProviders:
        allOf:
          - $ref: '#/definitions/AdditionalAuthenticationProviders'
          - description: >-
              A list of additional authentication providers for the
              <code>GraphqlApi</code> API.
      authenticationType:
        allOf:
          - $ref: '#/definitions/AuthenticationType'
          - description: >-
              The new authentication type for the <code>GraphqlApi</code>
              object.
      lambdaAuthorizerConfig:
        allOf:
          - $ref: '#/definitions/LambdaAuthorizerConfig'
          - description: Configuration for AWS Lambda function authorization.
      logConfig:
        allOf:
          - $ref: '#/definitions/LogConfig'
          - description: >-
              The Amazon CloudWatch Logs configuration for the
              <code>GraphqlApi</code> object.
      name:
        allOf:
          - $ref: '#/definitions/String'
          - description: The new name for the <code>GraphqlApi</code> object.
      openIDConnectConfig:
        allOf:
          - $ref: '#/definitions/OpenIDConnectConfig'
          - description: >-
              The OpenID Connect configuration for the <code>GraphqlApi</code>
              object.
      userPoolConfig:
        allOf:
          - $ref: '#/definitions/UserPoolConfig'
          - description: >-
              The new Amazon Cognito user pool configuration for the
              <code>GraphqlApi</code> object.
      xrayEnabled:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              A flag indicating whether to enable X-Ray tracing for the
              <code>GraphqlApi</code>.
    required:
      - name
    title: UpdateGraphqlApiRequest
    type: object
  UpdateGraphqlApiResponse:
    properties:
      graphqlApi:
        allOf:
          - $ref: '#/definitions/GraphqlApi'
          - description: The updated <code>GraphqlApi</code> object.
    type: object
  UpdateResolverRequest:
    properties:
      cachingConfig:
        allOf:
          - $ref: '#/definitions/CachingConfig'
          - description: The caching configuration for the resolver.
      dataSourceName:
        allOf:
          - $ref: '#/definitions/ResourceName'
          - description: The new data source name.
      kind:
        allOf:
          - $ref: '#/definitions/ResolverKind'
          - description: >-
              <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT
              resolver type. A UNIT resolver is the default resolver type. A
              UNIT resolver enables you to execute a GraphQL query against a
              single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE
              resolver type. A PIPELINE resolver enables you to execute a series
              of <code>Function</code> in a serial manner. You can use a
              pipeline resolver to execute a GraphQL query against multiple data
              sources.</p> </li> </ul>
      pipelineConfig:
        allOf:
          - $ref: '#/definitions/PipelineConfig'
          - description: The <code>PipelineConfig</code>.
      requestMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: >-
              <p>The new request mapping template.</p> <p>A resolver uses a
              request mapping template to convert a GraphQL expression into a
              format that a data source can understand. Mapping templates are
              written in Apache Velocity Template Language (VTL).</p> <p>VTL
              request mapping templates are optional when using a Lambda data
              source. For all other data sources, VTL request and response
              mapping templates are required.</p>
      responseMappingTemplate:
        allOf:
          - $ref: '#/definitions/MappingTemplate'
          - description: The new response mapping template.
      syncConfig:
        allOf:
          - $ref: '#/definitions/SyncConfig'
          - description: >-
              The <code>SyncConfig</code> for a resolver attached to a versioned
              datasource.
    title: UpdateResolverRequest
    type: object
  UpdateResolverResponse:
    properties:
      resolver:
        allOf:
          - $ref: '#/definitions/Resolver'
          - description: The updated <code>Resolver</code> object.
    type: object
  UpdateTypeRequest:
    properties:
      definition:
        allOf:
          - $ref: '#/definitions/String'
          - description: The new definition.
      format:
        allOf:
          - $ref: '#/definitions/TypeDefinitionFormat'
          - description: 'The new type format: SDL or JSON.'
    required:
      - format
    title: UpdateTypeRequest
    type: object
  UpdateTypeResponse:
    properties:
      type:
        allOf:
          - $ref: '#/definitions/Type'
          - description: The updated <code>Type</code> object.
    type: object
  UserPoolConfig:
    description: Describes an Amazon Cognito user pool configuration.
    properties:
      appIdClientRegex:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              A regular expression for validating the incoming Amazon Cognito
              user pool app client ID.
      awsRegion:
        allOf:
          - $ref: '#/definitions/String'
          - description: The Amazon Web Services Region in which the user pool was created.
      defaultAction:
        allOf:
          - $ref: '#/definitions/DefaultAction'
          - description: >-
              The action that you want your GraphQL API to take when a request
              that uses Amazon Cognito user pool authentication doesn't match
              the Amazon Cognito user pool configuration.
      userPoolId:
        allOf:
          - $ref: '#/definitions/String'
          - description: The user pool ID.
    required:
      - userPoolId
      - awsRegion
      - defaultAction
    type: object
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appsync/'
host: appsync.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    AppSync provides API actions for creating and interacting with data sources
    using GraphQL from your application.
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS AppSync
  version: '2017-07-25'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-aws-signingName: appsync
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appsync-2017-07-25.normal.json
      x-apisguru-driver: external
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: appsync
paths:
  /v1/apis:
    get:
      description: Lists your GraphQL APIs.
      operationId: ListGraphqlApis
      parameters:
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which can be used to return the next set of items in the
            list. 
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListGraphqlApisResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Creates a <code>GraphqlApi</code> object.
      operationId: CreateGraphqlApi
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              additionalAuthenticationProviders:
                description: >-
                  A list of additional authentication providers for the
                  <code>GraphqlApi</code> API.
                items:
                  $ref: '#/definitions/AdditionalAuthenticationProvider'
                type: array
              authenticationType:
                description: >-
                  The authentication type: API key, Identity and Access
                  Management, OIDC, or Amazon Cognito user pools.
                enum:
                  - API_KEY
                  - AWS_IAM
                  - AMAZON_COGNITO_USER_POOLS
                  - OPENID_CONNECT
                  - AWS_LAMBDA
                type: string
              lambdaAuthorizerConfig:
                description: >-
                  A <code>LambdaAuthorizerConfig</code> holds configuration on
                  how to authorize AppSync API access when using the
                  <code>AWS_LAMBDA</code> authorizer mode. Be aware that an
                  AppSync API may have only one Lambda authorizer configured at
                  a time.
                properties:
                  authorizerResultTtlInSeconds:
                    allOf:
                      - $ref: '#/definitions/TTL'
                      - description: >-
                          The number of seconds a response should be cached for.
                          The default is 5 minutes (300 seconds). The Lambda
                          function can override this by returning a
                          <code>ttlOverride</code> key in its response. A value
                          of 0 disables caching of responses.
                  authorizerUri:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          <p>The ARN of the lambda function to be called for
                          authorization. This may be a standard Lambda ARN, a
                          version ARN (<code>.../v3</code>) or alias ARN. </p>
                          <p> <i>Note</i>: This Lambda function must have the
                          following resource-based policy assigned to it. When
                          configuring Lambda authorizers in the Console, this is
                          done for you. To do so with the AWS CLI, run the
                          following:</p> <p> <code>aws lambda add-permission
                          --function-name
                          "arn:aws:lambda:us-east-2:111122223333:function:my-function"
                          --statement-id "appsync" --principal
                          appsync.amazonaws.com --action
                          lambda:InvokeFunction</code> </p>
                  identityValidationExpression:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          A regular expression for validation of tokens before
                          the Lambda Function is called.
                type: object
              logConfig:
                description: The CloudWatch Logs configuration.
                properties:
                  cloudWatchLogsRoleArn:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The service role that AppSync will assume to publish
                          to Amazon CloudWatch logs in your account. 
                  excludeVerboseContent:
                    allOf:
                      - $ref: '#/definitions/Boolean'
                      - description: >-
                          Set to TRUE to exclude sections that contain
                          information such as headers, context, and evaluated
                          mapping templates, regardless of logging level.
                  fieldLogLevel:
                    allOf:
                      - $ref: '#/definitions/FieldLogLevel'
                      - description: >-
                          <p>The field logging level. Values can be NONE, ERROR,
                          or ALL. </p> <ul> <li> <p> <b>NONE</b>: No field-level
                          logs are captured.</p> </li> <li> <p> <b>ERROR</b>:
                          Logs the following information only for the fields
                          that are in error:</p> <ul> <li> <p>The error section
                          in the server response.</p> </li> <li> <p>Field-level
                          errors.</p> </li> <li> <p>The generated
                          request/response functions that got resolved for error
                          fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The
                          following information is logged for all fields in the
                          query:</p> <ul> <li> <p>Field-level tracing
                          information.</p> </li> <li> <p>The generated
                          request/response functions that got resolved for each
                          field.</p> </li> </ul> </li> </ul>
                type: object
              name:
                description: A user-supplied name for the <code>GraphqlApi</code>.
                type: string
              openIDConnectConfig:
                description: Describes an OpenID Connect configuration.
                properties:
                  authTTL:
                    allOf:
                      - $ref: '#/definitions/Long'
                      - description: >-
                          The number of milliseconds a token is valid after
                          being authenticated.
                  clientId:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The client identifier of the Relying party at the
                          OpenID identity provider. This identifier is typically
                          obtained when the Relying party is registered with the
                          OpenID identity provider. You can specify a regular
                          expression so the AppSync can validate against
                          multiple client identifiers at a time.
                  iatTTL:
                    allOf:
                      - $ref: '#/definitions/Long'
                      - description: >-
                          The number of milliseconds a token is valid after
                          being issued to a user.
                  issuer:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The issuer for the OpenID Connect configuration. The
                          issuer returned by discovery must exactly match the
                          value of <code>iss</code> in the ID token.
                type: object
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: >-
                  A map with keys of <code>TagKey</code> objects and values of
                  <code>TagValue</code> objects.
                maxProperties: 50
                minProperties: 1
                type: object
              userPoolConfig:
                description: Describes an Amazon Cognito user pool configuration.
                properties:
                  appIdClientRegex:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          A regular expression for validating the incoming
                          Amazon Cognito user pool app client ID.
                  awsRegion:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The Amazon Web Services Region in which the user pool
                          was created.
                  defaultAction:
                    allOf:
                      - $ref: '#/definitions/DefaultAction'
                      - description: >-
                          The action that you want your GraphQL API to take when
                          a request that uses Amazon Cognito user pool
                          authentication doesn't match the Amazon Cognito user
                          pool configuration.
                  userPoolId:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The user pool ID.
                type: object
              xrayEnabled:
                description: >-
                  A flag indicating whether to enable X-Ray tracing for the
                  <code>GraphqlApi</code>.
                type: boolean
            required:
              - name
              - authenticationType
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ApiLimitExceededException
          schema:
            $ref: '#/definitions/ApiLimitExceededException'
  '/v1/apis/{apiId}':
    delete:
      description: Deletes a <code>GraphqlApi</code> object.
      operationId: DeleteGraphqlApi
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
    get:
      description: Retrieves a <code>GraphqlApi</code> object.
      operationId: GetGraphqlApi
      parameters:
        - description: The API ID for the GraphQL API.
          in: path
          name: apiId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates a <code>GraphqlApi</code> object.
      operationId: UpdateGraphqlApi
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              additionalAuthenticationProviders:
                description: >-
                  A list of additional authentication providers for the
                  <code>GraphqlApi</code> API.
                items:
                  $ref: '#/definitions/AdditionalAuthenticationProvider'
                type: array
              authenticationType:
                description: >-
                  The new authentication type for the <code>GraphqlApi</code>
                  object.
                enum:
                  - API_KEY
                  - AWS_IAM
                  - AMAZON_COGNITO_USER_POOLS
                  - OPENID_CONNECT
                  - AWS_LAMBDA
                type: string
              lambdaAuthorizerConfig:
                description: >-
                  A <code>LambdaAuthorizerConfig</code> holds configuration on
                  how to authorize AppSync API access when using the
                  <code>AWS_LAMBDA</code> authorizer mode. Be aware that an
                  AppSync API may have only one Lambda authorizer configured at
                  a time.
                properties:
                  authorizerResultTtlInSeconds:
                    allOf:
                      - $ref: '#/definitions/TTL'
                      - description: >-
                          The number of seconds a response should be cached for.
                          The default is 5 minutes (300 seconds). The Lambda
                          function can override this by returning a
                          <code>ttlOverride</code> key in its response. A value
                          of 0 disables caching of responses.
                  authorizerUri:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          <p>The ARN of the lambda function to be called for
                          authorization. This may be a standard Lambda ARN, a
                          version ARN (<code>.../v3</code>) or alias ARN. </p>
                          <p> <i>Note</i>: This Lambda function must have the
                          following resource-based policy assigned to it. When
                          configuring Lambda authorizers in the Console, this is
                          done for you. To do so with the AWS CLI, run the
                          following:</p> <p> <code>aws lambda add-permission
                          --function-name
                          "arn:aws:lambda:us-east-2:111122223333:function:my-function"
                          --statement-id "appsync" --principal
                          appsync.amazonaws.com --action
                          lambda:InvokeFunction</code> </p>
                  identityValidationExpression:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          A regular expression for validation of tokens before
                          the Lambda Function is called.
                type: object
              logConfig:
                description: The CloudWatch Logs configuration.
                properties:
                  cloudWatchLogsRoleArn:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The service role that AppSync will assume to publish
                          to Amazon CloudWatch logs in your account. 
                  excludeVerboseContent:
                    allOf:
                      - $ref: '#/definitions/Boolean'
                      - description: >-
                          Set to TRUE to exclude sections that contain
                          information such as headers, context, and evaluated
                          mapping templates, regardless of logging level.
                  fieldLogLevel:
                    allOf:
                      - $ref: '#/definitions/FieldLogLevel'
                      - description: >-
                          <p>The field logging level. Values can be NONE, ERROR,
                          or ALL. </p> <ul> <li> <p> <b>NONE</b>: No field-level
                          logs are captured.</p> </li> <li> <p> <b>ERROR</b>:
                          Logs the following information only for the fields
                          that are in error:</p> <ul> <li> <p>The error section
                          in the server response.</p> </li> <li> <p>Field-level
                          errors.</p> </li> <li> <p>The generated
                          request/response functions that got resolved for error
                          fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The
                          following information is logged for all fields in the
                          query:</p> <ul> <li> <p>Field-level tracing
                          information.</p> </li> <li> <p>The generated
                          request/response functions that got resolved for each
                          field.</p> </li> </ul> </li> </ul>
                type: object
              name:
                description: The new name for the <code>GraphqlApi</code> object.
                type: string
              openIDConnectConfig:
                description: Describes an OpenID Connect configuration.
                properties:
                  authTTL:
                    allOf:
                      - $ref: '#/definitions/Long'
                      - description: >-
                          The number of milliseconds a token is valid after
                          being authenticated.
                  clientId:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The client identifier of the Relying party at the
                          OpenID identity provider. This identifier is typically
                          obtained when the Relying party is registered with the
                          OpenID identity provider. You can specify a regular
                          expression so the AppSync can validate against
                          multiple client identifiers at a time.
                  iatTTL:
                    allOf:
                      - $ref: '#/definitions/Long'
                      - description: >-
                          The number of milliseconds a token is valid after
                          being issued to a user.
                  issuer:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The issuer for the OpenID Connect configuration. The
                          issuer returned by discovery must exactly match the
                          value of <code>iss</code> in the ID token.
                type: object
              userPoolConfig:
                description: Describes an Amazon Cognito user pool configuration.
                properties:
                  appIdClientRegex:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          A regular expression for validating the incoming
                          Amazon Cognito user pool app client ID.
                  awsRegion:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The Amazon Web Services Region in which the user pool
                          was created.
                  defaultAction:
                    allOf:
                      - $ref: '#/definitions/DefaultAction'
                      - description: >-
                          The action that you want your GraphQL API to take when
                          a request that uses Amazon Cognito user pool
                          authentication doesn't match the Amazon Cognito user
                          pool configuration.
                  userPoolId:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The user pool ID.
                type: object
              xrayEnabled:
                description: >-
                  A flag indicating whether to enable X-Ray tracing for the
                  <code>GraphqlApi</code>.
                type: boolean
            required:
              - name
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
  '/v1/apis/{apiId}/ApiCaches':
    delete:
      description: Deletes an <code>ApiCache</code> object.
      operationId: DeleteApiCache
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    get:
      description: Retrieves an <code>ApiCache</code> object.
      operationId: GetApiCache
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Creates a cache for the GraphQL API.
      operationId: CreateApiCache
      parameters:
        - description: The GraphQL API Id.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiCachingBehavior:
                description: >-
                  <p>Caching behavior.</p> <ul> <li> <p>
                  <b>FULL_REQUEST_CACHING</b>: All requests are fully
                  cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>:
                  Individual resolvers that you specify are cached.</p> </li>
                  </ul>
                enum:
                  - FULL_REQUEST_CACHING
                  - PER_RESOLVER_CACHING
                type: string
              atRestEncryptionEnabled:
                description: >-
                  At rest encryption flag for cache. This setting cannot be
                  updated after creation.
                type: boolean
              transitEncryptionEnabled:
                description: >-
                  Transit encryption flag when connecting to cache. This setting
                  cannot be updated after creation.
                type: boolean
              ttl:
                description: >-
                  <p>TTL in seconds for cache entries.</p> <p>Valid values are
                  between 1 and 3600 seconds.</p>
                type: integer
              type:
                description: >-
                  <p>The cache instance type. Valid values are </p> <ul> <li>
                  <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code>
                  </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p>
                  <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code>
                  </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p>
                  <code>LARGE_8X</code> (not available in all regions)</p> </li>
                  <li> <p> <code>LARGE_12X</code> </p> </li> </ul>
                  <p>Historically, instance types were identified by an
                  EC2-style value. As of July 2020, this is deprecated, and the
                  generic identifiers above should be used.</p> <p>The following
                  legacy instance types are available, but their use is
                  discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small
                  instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A
                  t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A
                  r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A
                  r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>:
                  A r4.2xlarge instance type.</p> </li> <li> <p>
                  <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li>
                  <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>
                  </ul>
                enum:
                  - T2_SMALL
                  - T2_MEDIUM
                  - R4_LARGE
                  - R4_XLARGE
                  - R4_2XLARGE
                  - R4_4XLARGE
                  - R4_8XLARGE
                  - SMALL
                  - MEDIUM
                  - LARGE
                  - XLARGE
                  - LARGE_2X
                  - LARGE_4X
                  - LARGE_8X
                  - LARGE_12X
                type: string
            required:
              - ttl
              - apiCachingBehavior
              - type
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/ApiCaches/update':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates the cache for the GraphQL API.
      operationId: UpdateApiCache
      parameters:
        - description: The GraphQL API Id.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiCachingBehavior:
                description: >-
                  <p>Caching behavior.</p> <ul> <li> <p>
                  <b>FULL_REQUEST_CACHING</b>: All requests are fully
                  cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>:
                  Individual resolvers that you specify are cached.</p> </li>
                  </ul>
                enum:
                  - FULL_REQUEST_CACHING
                  - PER_RESOLVER_CACHING
                type: string
              ttl:
                description: >-
                  <p>TTL in seconds for cache entries.</p> <p>Valid values are
                  between 1 and 3600 seconds.</p>
                type: integer
              type:
                description: >-
                  <p>The cache instance type. Valid values are </p> <ul> <li>
                  <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code>
                  </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p>
                  <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code>
                  </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p>
                  <code>LARGE_8X</code> (not available in all regions)</p> </li>
                  <li> <p> <code>LARGE_12X</code> </p> </li> </ul>
                  <p>Historically, instance types were identified by an
                  EC2-style value. As of July 2020, this is deprecated, and the
                  generic identifiers above should be used.</p> <p>The following
                  legacy instance types are available, but their use is
                  discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small
                  instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A
                  t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A
                  r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A
                  r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>:
                  A r4.2xlarge instance type.</p> </li> <li> <p>
                  <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li>
                  <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>
                  </ul>
                enum:
                  - T2_SMALL
                  - T2_MEDIUM
                  - R4_LARGE
                  - R4_XLARGE
                  - R4_2XLARGE
                  - R4_4XLARGE
                  - R4_8XLARGE
                  - SMALL
                  - MEDIUM
                  - LARGE
                  - XLARGE
                  - LARGE_2X
                  - LARGE_4X
                  - LARGE_8X
                  - LARGE_12X
                type: string
            required:
              - ttl
              - apiCachingBehavior
              - type
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/FlushCache':
    delete:
      description: Flushes an <code>ApiCache</code> object.
      operationId: FlushApiCache
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FlushApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/apis/{apiId}/apikeys':
    get:
      description: >-
        <p>Lists the API keys for a given API.</p> <note> <p>API keys are
        deleted automatically 60 days after they expire. However, they may still
        be included in the response until they have actually been deleted. You
        can safely call <code>DeleteApiKey</code> to manually delete a key
        before it's automatically deleted.</p> </note>
      operationId: ListApiKeys
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which can be used to return the next set of items in the
            list.
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListApiKeysResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Creates a unique key that you can distribute to clients who are
        executing your API.
      operationId: CreateApiKey
      parameters:
        - description: The ID for your GraphQL API.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              description:
                description: A description of the purpose of the API key.
                type: string
              expires:
                description: >-
                  The time from creation time after which the API key expires.
                  The date is represented as seconds since the epoch, rounded
                  down to the nearest hour. The default value for this parameter
                  is 7 days from creation time. For more information, see .
                type: integer
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiKeyResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '486':
          description: ApiKeyLimitExceededException
          schema:
            $ref: '#/definitions/ApiKeyLimitExceededException'
        '487':
          description: ApiKeyValidityOutOfBoundsException
          schema:
            $ref: '#/definitions/ApiKeyValidityOutOfBoundsException'
  '/v1/apis/{apiId}/apikeys/{id}':
    delete:
      description: Deletes an API key.
      operationId: DeleteApiKey
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The ID for the API key.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteApiKeyResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates an API key. The key can be updated while it is not deleted.
      operationId: UpdateApiKey
      parameters:
        - description: The ID for the GraphQL API.
          in: path
          name: apiId
          required: true
          type: string
        - description: The API key ID.
          in: path
          name: id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              description:
                description: A description of the purpose of the API key.
                type: string
              expires:
                description: >-
                  The time from update time after which the API key expires. The
                  date is represented as seconds since the epoch. For more
                  information, see .
                type: integer
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiKeyResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ApiKeyValidityOutOfBoundsException
          schema:
            $ref: '#/definitions/ApiKeyValidityOutOfBoundsException'
  '/v1/apis/{apiId}/datasources':
    get:
      description: Lists the data sources for a given API.
      operationId: ListDataSources
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which can be used to return the next set of items in the
            list. 
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDataSourcesResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Creates a <code>DataSource</code> object.
      operationId: CreateDataSource
      parameters:
        - description: The API ID for the GraphQL API for the <code>DataSource</code>.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              description:
                description: A description of the <code>DataSource</code>.
                type: string
              dynamodbConfig:
                description: Describes an Amazon DynamoDB data source configuration.
                properties:
                  awsRegion:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The Amazon Web Services Region.
                  deltaSyncConfig:
                    allOf:
                      - $ref: '#/definitions/DeltaSyncConfig'
                      - description: >-
                          The <code>DeltaSyncConfig</code> for a versioned
                          datasource.
                  tableName:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The table name.
                  useCallerCredentials:
                    allOf:
                      - $ref: '#/definitions/Boolean'
                      - description: >-
                          Set to TRUE to use Amazon Cognito credentials with
                          this data source.
                  versioned:
                    allOf:
                      - $ref: '#/definitions/Boolean'
                      - description: >-
                          Set to TRUE to use Conflict Detection and Resolution
                          with this data source.
                type: object
              elasticsearchConfig:
                description: Describes an Elasticsearch data source configuration.
                properties:
                  awsRegion:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The Amazon Web Services Region.
                  endpoint:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The endpoint.
                type: object
              httpConfig:
                description: Describes an HTTP data source configuration.
                properties:
                  authorizationConfig:
                    allOf:
                      - $ref: '#/definitions/AuthorizationConfig'
                      - description: >-
                          The authorization config in case the HTTP endpoint
                          requires authorization.
                  endpoint:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The HTTP URL endpoint. You can either specify the
                          domain name or IP, and port combination, and the URL
                          scheme must be HTTP or HTTPS. If the port is not
                          specified, AppSync uses the default port 80 for the
                          HTTP endpoint and port 443 for HTTPS endpoints.
                type: object
              lambdaConfig:
                description: >-
                  Describes an Amazon Web Services Lambda data source
                  configuration.
                properties:
                  lambdaFunctionArn:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The ARN for the Lambda function.
                type: object
              name:
                description: A user-supplied name for the <code>DataSource</code>.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              relationalDatabaseConfig:
                description: Describes a relational database data source configuration.
                properties:
                  rdsHttpEndpointConfig:
                    allOf:
                      - $ref: '#/definitions/RdsHttpEndpointConfig'
                      - description: Amazon RDS HTTP endpoint settings.
                  relationalDatabaseSourceType:
                    allOf:
                      - $ref: '#/definitions/RelationalDatabaseSourceType'
                      - description: >-
                          <p>Source type for the relational database.</p> <ul>
                          <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational
                          database source type is an Amazon RDS HTTP
                          endpoint.</p> </li> </ul>
                type: object
              serviceRoleArn:
                description: >-
                  The Identity and Access Management service role ARN for the
                  data source. The system assumes this role when accessing the
                  data source.
                type: string
              type:
                description: The type of the <code>DataSource</code>.
                enum:
                  - AWS_LAMBDA
                  - AMAZON_DYNAMODB
                  - AMAZON_ELASTICSEARCH
                  - NONE
                  - HTTP
                  - RELATIONAL_DATABASE
                type: string
            required:
              - name
              - type
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/datasources/{name}':
    delete:
      description: Deletes a <code>DataSource</code> object.
      operationId: DeleteDataSource
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The name of the data source.
          in: path
          maxLength: 65536
          minLength: 1
          name: name
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    get:
      description: Retrieves a <code>DataSource</code> object.
      operationId: GetDataSource
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The name of the data source.
          in: path
          maxLength: 65536
          minLength: 1
          name: name
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates a <code>DataSource</code> object.
      operationId: UpdateDataSource
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The new name for the data source.
          in: path
          maxLength: 65536
          minLength: 1
          name: name
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              description:
                description: The new description for the data source.
                type: string
              dynamodbConfig:
                description: Describes an Amazon DynamoDB data source configuration.
                properties:
                  awsRegion:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The Amazon Web Services Region.
                  deltaSyncConfig:
                    allOf:
                      - $ref: '#/definitions/DeltaSyncConfig'
                      - description: >-
                          The <code>DeltaSyncConfig</code> for a versioned
                          datasource.
                  tableName:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The table name.
                  useCallerCredentials:
                    allOf:
                      - $ref: '#/definitions/Boolean'
                      - description: >-
                          Set to TRUE to use Amazon Cognito credentials with
                          this data source.
                  versioned:
                    allOf:
                      - $ref: '#/definitions/Boolean'
                      - description: >-
                          Set to TRUE to use Conflict Detection and Resolution
                          with this data source.
                type: object
              elasticsearchConfig:
                description: Describes an Elasticsearch data source configuration.
                properties:
                  awsRegion:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The Amazon Web Services Region.
                  endpoint:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The endpoint.
                type: object
              httpConfig:
                description: Describes an HTTP data source configuration.
                properties:
                  authorizationConfig:
                    allOf:
                      - $ref: '#/definitions/AuthorizationConfig'
                      - description: >-
                          The authorization config in case the HTTP endpoint
                          requires authorization.
                  endpoint:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: >-
                          The HTTP URL endpoint. You can either specify the
                          domain name or IP, and port combination, and the URL
                          scheme must be HTTP or HTTPS. If the port is not
                          specified, AppSync uses the default port 80 for the
                          HTTP endpoint and port 443 for HTTPS endpoints.
                type: object
              lambdaConfig:
                description: >-
                  Describes an Amazon Web Services Lambda data source
                  configuration.
                properties:
                  lambdaFunctionArn:
                    allOf:
                      - $ref: '#/definitions/String'
                      - description: The ARN for the Lambda function.
                type: object
              relationalDatabaseConfig:
                description: Describes a relational database data source configuration.
                properties:
                  rdsHttpEndpointConfig:
                    allOf:
                      - $ref: '#/definitions/RdsHttpEndpointConfig'
                      - description: Amazon RDS HTTP endpoint settings.
                  relationalDatabaseSourceType:
                    allOf:
                      - $ref: '#/definitions/RelationalDatabaseSourceType'
                      - description: >-
                          <p>Source type for the relational database.</p> <ul>
                          <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational
                          database source type is an Amazon RDS HTTP
                          endpoint.</p> </li> </ul>
                type: object
              serviceRoleArn:
                description: The new service role ARN for the data source.
                type: string
              type:
                description: The new data source type.
                enum:
                  - AWS_LAMBDA
                  - AMAZON_DYNAMODB
                  - AMAZON_ELASTICSEARCH
                  - NONE
                  - HTTP
                  - RELATIONAL_DATABASE
                type: string
            required:
              - type
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/functions':
    get:
      description: List multiple functions.
      operationId: ListFunctions
      parameters:
        - description: The GraphQL API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which can be used to return the next set of items in the
            list.
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListFunctionsResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a <code>Function</code> object.</p> <p>A function is a
        reusable entity. Multiple functions can be used to compose the resolver
        logic.</p>
      operationId: CreateFunction
      parameters:
        - description: The GraphQL API ID.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              dataSourceName:
                description: The <code>Function</code> <code>DataSource</code> name.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              description:
                description: The <code>Function</code> description.
                type: string
              functionVersion:
                description: >-
                  The <code>version</code> of the request mapping template.
                  Currently the supported value is 2018-05-29. 
                type: string
              name:
                description: >-
                  The <code>Function</code> name. The function name does not
                  have to be unique.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              requestMappingTemplate:
                description: >-
                  The <code>Function</code> request mapping template. Functions
                  support only the 2018-05-29 version of the request mapping
                  template.
                maxLength: 65536
                minLength: 1
                type: string
              responseMappingTemplate:
                description: 'The <code>Function</code> response mapping template. '
                maxLength: 65536
                minLength: 1
                type: string
              syncConfig:
                description: >-
                  <p>Describes a Sync configuration for a resolver.</p>
                  <p>Contains information on which Conflict Detection as well as
                  Resolution strategy should be performed when the resolver is
                  invoked.</p>
                properties:
                  conflictDetection:
                    allOf:
                      - $ref: '#/definitions/ConflictDetectionType'
                      - description: >-
                          <p>The Conflict Detection strategy to use.</p> <ul>
                          <li> <p> <b>VERSION</b>: Detect conflicts based on
                          object versions for this resolver.</p> </li> <li> <p>
                          <b>NONE</b>: Do not detect conflicts when executing
                          this resolver.</p> </li> </ul>
                  conflictHandler:
                    allOf:
                      - $ref: '#/definitions/ConflictHandlerType'
                      - description: >-
                          <p>The Conflict Resolution strategy to perform in the
                          event of a conflict.</p> <ul> <li> <p>
                          <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by
                          rejecting mutations when versions do not match the
                          latest version at the server.</p> </li> <li> <p>
                          <b>AUTOMERGE</b>: Resolve conflicts with the Automerge
                          conflict resolution strategy.</p> </li> <li> <p>
                          <b>LAMBDA</b>: Resolve conflicts with a Lambda
                          function supplied in the
                          LambdaConflictHandlerConfig.</p> </li> </ul>
                  lambdaConflictHandlerConfig:
                    allOf:
                      - $ref: '#/definitions/LambdaConflictHandlerConfig'
                      - description: >-
                          The <code>LambdaConflictHandlerConfig</code> when
                          configuring LAMBDA as the Conflict Handler.
                type: object
            required:
              - name
              - dataSourceName
              - functionVersion
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/functions/{functionId}':
    delete:
      description: Deletes a <code>Function</code>.
      operationId: DeleteFunction
      parameters:
        - description: The GraphQL API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The <code>Function</code> ID.
          in: path
          maxLength: 65536
          minLength: 1
          name: functionId
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    get:
      description: Get a <code>Function</code>.
      operationId: GetFunction
      parameters:
        - description: The GraphQL API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The <code>Function</code> ID.
          in: path
          maxLength: 65536
          minLength: 1
          name: functionId
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates a <code>Function</code> object.
      operationId: UpdateFunction
      parameters:
        - description: The GraphQL API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The function ID.
          in: path
          maxLength: 65536
          minLength: 1
          name: functionId
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              dataSourceName:
                description: The <code>Function</code> <code>DataSource</code> name.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              description:
                description: The <code>Function</code> description.
                type: string
              functionVersion:
                description: >-
                  The <code>version</code> of the request mapping template.
                  Currently the supported value is 2018-05-29. 
                type: string
              name:
                description: The <code>Function</code> name.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              requestMappingTemplate:
                description: >-
                  The <code>Function</code> request mapping template. Functions
                  support only the 2018-05-29 version of the request mapping
                  template.
                maxLength: 65536
                minLength: 1
                type: string
              responseMappingTemplate:
                description: 'The <code>Function</code> request mapping template. '
                maxLength: 65536
                minLength: 1
                type: string
              syncConfig:
                description: >-
                  <p>Describes a Sync configuration for a resolver.</p>
                  <p>Contains information on which Conflict Detection as well as
                  Resolution strategy should be performed when the resolver is
                  invoked.</p>
                properties:
                  conflictDetection:
                    allOf:
                      - $ref: '#/definitions/ConflictDetectionType'
                      - description: >-
                          <p>The Conflict Detection strategy to use.</p> <ul>
                          <li> <p> <b>VERSION</b>: Detect conflicts based on
                          object versions for this resolver.</p> </li> <li> <p>
                          <b>NONE</b>: Do not detect conflicts when executing
                          this resolver.</p> </li> </ul>
                  conflictHandler:
                    allOf:
                      - $ref: '#/definitions/ConflictHandlerType'
                      - description: >-
                          <p>The Conflict Resolution strategy to perform in the
                          event of a conflict.</p> <ul> <li> <p>
                          <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by
                          rejecting mutations when versions do not match the
                          latest version at the server.</p> </li> <li> <p>
                          <b>AUTOMERGE</b>: Resolve conflicts with the Automerge
                          conflict resolution strategy.</p> </li> <li> <p>
                          <b>LAMBDA</b>: Resolve conflicts with a Lambda
                          function supplied in the
                          LambdaConflictHandlerConfig.</p> </li> </ul>
                  lambdaConflictHandlerConfig:
                    allOf:
                      - $ref: '#/definitions/LambdaConflictHandlerConfig'
                      - description: >-
                          The <code>LambdaConflictHandlerConfig</code> when
                          configuring LAMBDA as the Conflict Handler.
                type: object
            required:
              - name
              - dataSourceName
              - functionVersion
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/functions/{functionId}/resolvers':
    get:
      description: List the resolvers that are associated with a specific function.
      operationId: ListResolversByFunction
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The Function ID.
          in: path
          name: functionId
          required: true
          type: string
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the
            list.
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListResolversByFunctionResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/apis/{apiId}/schema#format':
    get:
      description: Retrieves the introspection schema for a GraphQL API.
      operationId: GetIntrospectionSchema
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: 'The schema format: SDL or JSON.'
          enum:
            - SDL
            - JSON
          in: query
          name: format
          required: true
          type: string
        - description: >-
            A flag that specifies whether the schema introspection should
            contain directives.
          in: query
          name: includeDirectives
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntrospectionSchemaResponse'
        '480':
          description: GraphQLSchemaException
          schema:
            $ref: '#/definitions/GraphQLSchemaException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/apis/{apiId}/schemacreation':
    get:
      description: Retrieves the current status of a schema creation operation.
      operationId: GetSchemaCreationStatus
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetSchemaCreationStatusResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Adds a new schema to your GraphQL API.</p> <p>This operation is
        asynchronous. Use to determine when it has completed.</p>
      operationId: StartSchemaCreation
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              definition:
                description: 'The schema definition, in GraphQL schema language format.'
                type: string
            required:
              - definition
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartSchemaCreationResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/types':
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Creates a <code>Type</code> object.
      operationId: CreateType
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              definition:
                description: >-
                  <p>The type definition, in GraphQL Schema Definition Language
                  (SDL) format.</p> <p>For more information, see the <a
                  href="http://graphql.org/learn/schema/">GraphQL SDL
                  documentation</a>.</p>
                type: string
              format:
                description: 'The type format: SDL or JSON.'
                enum:
                  - SDL
                  - JSON
                type: string
            required:
              - definition
              - format
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/types#format':
    get:
      description: Lists the types for a given API.
      operationId: ListTypes
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: 'The type format: SDL or JSON.'
          enum:
            - SDL
            - JSON
          in: query
          name: format
          required: true
          type: string
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which can be used to return the next set of items in the
            list. 
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTypesResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/apis/{apiId}/types/{typeName}':
    delete:
      description: Deletes a <code>Type</code> object.
      operationId: DeleteType
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The type name.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates a <code>Type</code> object.
      operationId: UpdateType
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The new type name.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              definition:
                description: The new definition.
                type: string
              format:
                description: 'The new type format: SDL or JSON.'
                enum:
                  - SDL
                  - JSON
                type: string
            required:
              - format
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/types/{typeName}#format':
    get:
      description: Retrieves a <code>Type</code> object.
      operationId: GetType
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The type name.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - description: 'The type format: SDL or JSON.'
          enum:
            - SDL
            - JSON
          in: query
          name: format
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
  '/v1/apis/{apiId}/types/{typeName}/resolvers':
    get:
      description: Lists the resolvers for a given API and type.
      operationId: ListResolvers
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The type name.
          in: path
          name: typeName
          required: true
          type: string
        - description: >-
            An identifier that was returned from the previous call to this
            operation, which can be used to return the next set of items in the
            list. 
          in: query
          maxLength: 65536
          minLength: 1
          name: nextToken
          pattern: '[\\S]+'
          required: false
          type: string
        - description: The maximum number of results you want the request to return.
          in: query
          maximum: 25
          minimum: 0
          name: maxResults
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListResolversResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a <code>Resolver</code> object.</p> <p>A resolver converts
        incoming requests into a format that a data source can understand and
        converts the data source's responses into GraphQL.</p>
      operationId: CreateResolver
      parameters:
        - description: The ID for the GraphQL API for which the resolver is being created.
          in: path
          name: apiId
          required: true
          type: string
        - description: The name of the <code>Type</code>.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              cachingConfig:
                description: >-
                  The caching configuration for a resolver that has caching
                  enabled.
                properties:
                  cachingKeys:
                    allOf:
                      - $ref: '#/definitions/CachingKeys'
                      - description: >-
                          <p>The caching keys for a resolver that has caching
                          enabled.</p> <p>Valid values are entries from the
                          <code>$context.arguments</code>,
                          <code>$context.source</code>, and
                          <code>$context.identity</code> maps.</p>
                  ttl:
                    allOf:
                      - $ref: '#/definitions/Long'
                      - description: >-
                          <p>The TTL in seconds for a resolver that has caching
                          enabled.</p> <p>Valid values are between 1 and 3600
                          seconds.</p>
                type: object
              dataSourceName:
                description: >-
                  The name of the data source for which the resolver is being
                  created.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              fieldName:
                description: The name of the field to attach the resolver to.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              kind:
                description: >-
                  <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT
                  resolver type. A UNIT resolver is the default resolver type. A
                  UNIT resolver enables you to execute a GraphQL query against a
                  single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A
                  PIPELINE resolver type. A PIPELINE resolver enables you to
                  execute a series of <code>Function</code> in a serial manner.
                  You can use a pipeline resolver to execute a GraphQL query
                  against multiple data sources.</p> </li> </ul>
                enum:
                  - UNIT
                  - PIPELINE
                type: string
              pipelineConfig:
                description: >-
                  The pipeline configuration for a resolver of kind
                  <code>PIPELINE</code>.
                properties:
                  functions:
                    allOf:
                      - $ref: '#/definitions/FunctionsIds'
                      - description: A list of <code>Function</code> objects.
                type: object
              requestMappingTemplate:
                description: >-
                  <p>The mapping template to be used for requests.</p> <p>A
                  resolver uses a request mapping template to convert a GraphQL
                  expression into a format that a data source can understand.
                  Mapping templates are written in Apache Velocity Template
                  Language (VTL).</p> <p>VTL request mapping templates are
                  optional when using a Lambda data source. For all other data
                  sources, VTL request and response mapping templates are
                  required.</p>
                maxLength: 65536
                minLength: 1
                type: string
              responseMappingTemplate:
                description: >-
                  The mapping template to be used for responses from the data
                  source.
                maxLength: 65536
                minLength: 1
                type: string
              syncConfig:
                description: >-
                  <p>Describes a Sync configuration for a resolver.</p>
                  <p>Contains information on which Conflict Detection as well as
                  Resolution strategy should be performed when the resolver is
                  invoked.</p>
                properties:
                  conflictDetection:
                    allOf:
                      - $ref: '#/definitions/ConflictDetectionType'
                      - description: >-
                          <p>The Conflict Detection strategy to use.</p> <ul>
                          <li> <p> <b>VERSION</b>: Detect conflicts based on
                          object versions for this resolver.</p> </li> <li> <p>
                          <b>NONE</b>: Do not detect conflicts when executing
                          this resolver.</p> </li> </ul>
                  conflictHandler:
                    allOf:
                      - $ref: '#/definitions/ConflictHandlerType'
                      - description: >-
                          <p>The Conflict Resolution strategy to perform in the
                          event of a conflict.</p> <ul> <li> <p>
                          <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by
                          rejecting mutations when versions do not match the
                          latest version at the server.</p> </li> <li> <p>
                          <b>AUTOMERGE</b>: Resolve conflicts with the Automerge
                          conflict resolution strategy.</p> </li> <li> <p>
                          <b>LAMBDA</b>: Resolve conflicts with a Lambda
                          function supplied in the
                          LambdaConflictHandlerConfig.</p> </li> </ul>
                  lambdaConflictHandlerConfig:
                    allOf:
                      - $ref: '#/definitions/LambdaConflictHandlerConfig'
                      - description: >-
                          The <code>LambdaConflictHandlerConfig</code> when
                          configuring LAMBDA as the Conflict Handler.
                type: object
            required:
              - fieldName
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}':
    delete:
      description: Deletes a <code>Resolver</code> object.
      operationId: DeleteResolver
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The name of the resolver type.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - description: The resolver field name.
          in: path
          maxLength: 65536
          minLength: 1
          name: fieldName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    get:
      description: Retrieves a <code>Resolver</code> object.
      operationId: GetResolver
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The resolver type name.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - description: The resolver field name.
          in: path
          maxLength: 65536
          minLength: 1
          name: fieldName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Updates a <code>Resolver</code> object.
      operationId: UpdateResolver
      parameters:
        - description: The API ID.
          in: path
          name: apiId
          required: true
          type: string
        - description: The new type name.
          in: path
          maxLength: 65536
          minLength: 1
          name: typeName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - description: The new field name.
          in: path
          maxLength: 65536
          minLength: 1
          name: fieldName
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              cachingConfig:
                description: >-
                  The caching configuration for a resolver that has caching
                  enabled.
                properties:
                  cachingKeys:
                    allOf:
                      - $ref: '#/definitions/CachingKeys'
                      - description: >-
                          <p>The caching keys for a resolver that has caching
                          enabled.</p> <p>Valid values are entries from the
                          <code>$context.arguments</code>,
                          <code>$context.source</code>, and
                          <code>$context.identity</code> maps.</p>
                  ttl:
                    allOf:
                      - $ref: '#/definitions/Long'
                      - description: >-
                          <p>The TTL in seconds for a resolver that has caching
                          enabled.</p> <p>Valid values are between 1 and 3600
                          seconds.</p>
                type: object
              dataSourceName:
                description: The new data source name.
                maxLength: 65536
                minLength: 1
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                type: string
              kind:
                description: >-
                  <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT
                  resolver type. A UNIT resolver is the default resolver type. A
                  UNIT resolver enables you to execute a GraphQL query against a
                  single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A
                  PIPELINE resolver type. A PIPELINE resolver enables you to
                  execute a series of <code>Function</code> in a serial manner.
                  You can use a pipeline resolver to execute a GraphQL query
                  against multiple data sources.</p> </li> </ul>
                enum:
                  - UNIT
                  - PIPELINE
                type: string
              pipelineConfig:
                description: >-
                  The pipeline configuration for a resolver of kind
                  <code>PIPELINE</code>.
                properties:
                  functions:
                    allOf:
                      - $ref: '#/definitions/FunctionsIds'
                      - description: A list of <code>Function</code> objects.
                type: object
              requestMappingTemplate:
                description: >-
                  <p>The new request mapping template.</p> <p>A resolver uses a
                  request mapping template to convert a GraphQL expression into
                  a format that a data source can understand. Mapping templates
                  are written in Apache Velocity Template Language (VTL).</p>
                  <p>VTL request mapping templates are optional when using a
                  Lambda data source. For all other data sources, VTL request
                  and response mapping templates are required.</p>
                maxLength: 65536
                minLength: 1
                type: string
              responseMappingTemplate:
                description: The new response mapping template.
                maxLength: 65536
                minLength: 1
                type: string
              syncConfig:
                description: >-
                  <p>Describes a Sync configuration for a resolver.</p>
                  <p>Contains information on which Conflict Detection as well as
                  Resolution strategy should be performed when the resolver is
                  invoked.</p>
                properties:
                  conflictDetection:
                    allOf:
                      - $ref: '#/definitions/ConflictDetectionType'
                      - description: >-
                          <p>The Conflict Detection strategy to use.</p> <ul>
                          <li> <p> <b>VERSION</b>: Detect conflicts based on
                          object versions for this resolver.</p> </li> <li> <p>
                          <b>NONE</b>: Do not detect conflicts when executing
                          this resolver.</p> </li> </ul>
                  conflictHandler:
                    allOf:
                      - $ref: '#/definitions/ConflictHandlerType'
                      - description: >-
                          <p>The Conflict Resolution strategy to perform in the
                          event of a conflict.</p> <ul> <li> <p>
                          <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by
                          rejecting mutations when versions do not match the
                          latest version at the server.</p> </li> <li> <p>
                          <b>AUTOMERGE</b>: Resolve conflicts with the Automerge
                          conflict resolution strategy.</p> </li> <li> <p>
                          <b>LAMBDA</b>: Resolve conflicts with a Lambda
                          function supplied in the
                          LambdaConflictHandlerConfig.</p> </li> </ul>
                  lambdaConflictHandlerConfig:
                    allOf:
                      - $ref: '#/definitions/LambdaConflictHandlerConfig'
                      - description: >-
                          The <code>LambdaConflictHandlerConfig</code> when
                          configuring LAMBDA as the Conflict Handler.
                type: object
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/v1/tags/{resourceArn}':
    get:
      description: Lists the tags for a resource.
      operationId: ListTagsForResource
      parameters:
        - description: The <code>GraphqlApi</code> ARN.
          in: path
          maxLength: 75
          minLength: 70
          name: resourceArn
          pattern: >-
            ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Tags a resource with user-supplied tags.
      operationId: TagResource
      parameters:
        - description: The <code>GraphqlApi</code> ARN.
          in: path
          maxLength: 75
          minLength: 70
          name: resourceArn
          pattern: >-
            ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: >-
                  A map with keys of <code>TagKey</code> objects and values of
                  <code>TagValue</code> objects.
                maxProperties: 50
                minProperties: 1
                type: object
            required:
              - tags
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
  '/v1/tags/{resourceArn}#tagKeys':
    delete:
      description: Untags a resource.
      operationId: UntagResource
      parameters:
        - description: The <code>GraphqlApi</code> ARN.
          in: path
          maxLength: 75
          minLength: 70
          name: resourceArn
          pattern: >-
            ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
          required: true
          type: string
        - collectionFormat: multi
          description: A list of <code>TagKey</code> objects.
          in: query
          items:
            $ref: '#/definitions/TagKey'
          maxItems: 50
          minItems: 1
          name: tagKeys
          required: true
          type: array
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string
x-hasEquivalentPaths: true

