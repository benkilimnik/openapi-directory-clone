basePath: /
definitions:
  AccessDeniedException: {}
  BatchError:
    description: 'Error related to a specific channel, specified by its ARN.'
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/ResourceArn'
          - description: Channel ARN.
      code:
        allOf:
          - $ref: '#/definitions/errorCode'
          - description: Error code.
      message:
        allOf:
          - $ref: '#/definitions/errorMessage'
          - description: 'Error message, determined by the application.'
    type: object
  BatchErrors:
    items:
      $ref: '#/definitions/BatchError'
    type: array
  BatchGetChannelRequest:
    properties:
      arns:
        allOf:
          - $ref: '#/definitions/ChannelArnList'
          - description: 'Array of ARNs, one per channel.'
    required:
      - arns
    title: BatchGetChannelRequest
    type: object
  BatchGetChannelResponse:
    properties:
      channels:
        $ref: '#/definitions/Channels'
      errors:
        allOf:
          - $ref: '#/definitions/BatchErrors'
          - description: Each error object is related to a specific ARN in the request.
    type: object
  BatchGetStreamKeyRequest:
    properties:
      arns:
        allOf:
          - $ref: '#/definitions/StreamKeyArnList'
          - description: 'Array of ARNs, one per channel.'
    required:
      - arns
    title: BatchGetStreamKeyRequest
    type: object
  BatchGetStreamKeyResponse:
    properties:
      errors:
        $ref: '#/definitions/BatchErrors'
      streamKeys:
        $ref: '#/definitions/StreamKeys'
    type: object
  Boolean:
    type: boolean
  Channel:
    description: Object specifying a channel.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN.
      authorized:
        allOf:
          - $ref: '#/definitions/IsAuthorized'
          - description: >-
              Whether the channel is private (enabled for playback
              authorization). Default: <code>false</code>.
      ingestEndpoint:
        allOf:
          - $ref: '#/definitions/IngestEndpoint'
          - description: >-
              Channel ingest endpoint, part of the definition of an ingest
              server, used when you set up streaming software.
      latencyMode:
        allOf:
          - $ref: '#/definitions/ChannelLatencyMode'
          - description: >-
              Channel latency mode. Use <code>NORMAL</code> to broadcast and
              deliver live video up to Full HD. Use <code>LOW</code> for
              near-real-time interaction with viewers. Default:
              <code>LOW</code>. (Note: In the Amazon IVS console,
              <code>LOW</code> and <code>NORMAL</code> correspond to Ultra-low
              and Standard, respectively.)
      name:
        allOf:
          - $ref: '#/definitions/ChannelName'
          - description: Channel name.
      playbackUrl:
        allOf:
          - $ref: '#/definitions/PlaybackURL'
          - description: Channel playback URL.
      recordingConfigurationArn:
        allOf:
          - $ref: '#/definitions/ChannelRecordingConfigurationArn'
          - description: >-
              Recording-configuration ARN. A value other than an empty string
              indicates that recording is enabled. Default: "" (empty string,
              recording is disabled).
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
      type:
        allOf:
          - $ref: '#/definitions/ChannelType'
          - description: >-
              <p>Channel type, which determines the allowable resolution and
              bitrate. <i>If you exceed the allowable resolution or bitrate, the
              stream probably will disconnect immediately.</i> Default:
              <code>STANDARD</code>. Valid values:</p> <ul> <li> <p>
              <code>STANDARD</code>: Multiple qualities are generated from the
              original input, to automatically give viewers the best experience
              for their devices and network conditions. Vertical resolution can
              be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li>
              <p> <code>BASIC</code>: Amazon IVS delivers the original input to
              viewers. The viewer’s video-quality choice is limited to the
              original input. Vertical resolution can be up to 480 and bitrate
              can be up to 1.5 Mbps.</p> </li> </ul>
    type: object
  ChannelArn:
    maxLength: 128
    minLength: 1
    pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
    type: string
  ChannelArnList:
    items:
      $ref: '#/definitions/ChannelArn'
    maxItems: 50
    minItems: 1
    type: array
  ChannelLatencyMode:
    enum:
      - NORMAL
      - LOW
    type: string
  ChannelList:
    items:
      $ref: '#/definitions/ChannelSummary'
    type: array
  ChannelName:
    maxLength: 128
    minLength: 0
    pattern: '^[a-zA-Z0-9-_]*$'
    type: string
  ChannelNotBroadcasting: {}
  ChannelRecordingConfigurationArn:
    maxLength: 128
    minLength: 0
    pattern: '^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$'
    type: string
  ChannelSummary:
    description: Summary information about a channel.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN.
      authorized:
        allOf:
          - $ref: '#/definitions/IsAuthorized'
          - description: >-
              Whether the channel is private (enabled for playback
              authorization). Default: <code>false</code>.
      latencyMode:
        allOf:
          - $ref: '#/definitions/ChannelLatencyMode'
          - description: >-
              Channel latency mode. Use <code>NORMAL</code> to broadcast and
              deliver live video up to Full HD. Use <code>LOW</code> for
              near-real-time interaction with viewers. Default:
              <code>LOW</code>. (Note: In the Amazon IVS console,
              <code>LOW</code> and <code>NORMAL</code> correspond to Ultra-low
              and Standard, respectively.)
      name:
        allOf:
          - $ref: '#/definitions/ChannelName'
          - description: Channel name.
      recordingConfigurationArn:
        allOf:
          - $ref: '#/definitions/ChannelRecordingConfigurationArn'
          - description: >-
              Recording-configuration ARN. A value other than an empty string
              indicates that recording is enabled. Default: "" (empty string,
              recording is disabled).
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    type: object
  ChannelType:
    enum:
      - BASIC
      - STANDARD
    type: string
  Channels:
    items:
      $ref: '#/definitions/Channel'
    type: array
  ConflictException: {}
  CreateChannelRequest:
    properties:
      authorized:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Whether the channel is private (enabled for playback
              authorization). Default: <code>false</code>.
      latencyMode:
        allOf:
          - $ref: '#/definitions/ChannelLatencyMode'
          - description: >-
              Channel latency mode. Use <code>NORMAL</code> to broadcast and
              deliver live video up to Full HD. Use <code>LOW</code> for
              near-real-time interaction with viewers. (Note: In the Amazon IVS
              console, <code>LOW</code> and <code>NORMAL</code> correspond to
              Ultra-low and Standard, respectively.) Default: <code>LOW</code>.
      name:
        allOf:
          - $ref: '#/definitions/ChannelName'
          - description: Channel name.
      recordingConfigurationArn:
        allOf:
          - $ref: '#/definitions/ChannelRecordingConfigurationArn'
          - description: >-
              Recording-configuration ARN. Default: "" (empty string, recording
              is disabled).
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
      type:
        allOf:
          - $ref: '#/definitions/ChannelType'
          - description: >-
              <p>Channel type, which determines the allowable resolution and
              bitrate. <i>If you exceed the allowable resolution or bitrate, the
              stream probably will disconnect immediately.</i> Default:
              <code>STANDARD</code>. Valid values:</p> <ul> <li> <p>
              <code>STANDARD</code>: Multiple qualities are generated from the
              original input, to automatically give viewers the best experience
              for their devices and network conditions. Vertical resolution can
              be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li>
              <p> <code>BASIC</code>: Amazon IVS delivers the original input to
              viewers. The viewer’s video-quality choice is limited to the
              original input. Vertical resolution can be up to 480 and bitrate
              can be up to 1.5 Mbps.</p> </li> </ul>
    title: CreateChannelRequest
    type: object
  CreateChannelResponse:
    properties:
      channel:
        $ref: '#/definitions/Channel'
      streamKey:
        $ref: '#/definitions/StreamKey'
    type: object
  CreateRecordingConfigurationRequest:
    properties:
      destinationConfiguration:
        allOf:
          - $ref: '#/definitions/DestinationConfiguration'
          - description: >-
              A complex type that contains a destination configuration for where
              recorded video will be stored.
      name:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationName'
          - description: >-
              An arbitrary string (a nickname) that helps the customer identify
              that resource. The value does not need to be unique.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    required:
      - destinationConfiguration
    title: CreateRecordingConfigurationRequest
    type: object
  CreateRecordingConfigurationResponse:
    properties:
      recordingConfiguration:
        $ref: '#/definitions/RecordingConfiguration'
    type: object
  CreateStreamKeyRequest:
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: ARN of the channel for which to create the stream key.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    required:
      - channelArn
    title: CreateStreamKeyRequest
    type: object
  CreateStreamKeyResponse:
    properties:
      streamKey:
        allOf:
          - $ref: '#/definitions/StreamKey'
          - description: Stream key used to authenticate an RTMPS stream for ingestion.
    type: object
  DeleteChannelRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: ARN of the channel to be deleted.
    required:
      - arn
    title: DeleteChannelRequest
    type: object
  DeletePlaybackKeyPairRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairArn'
          - description: ARN of the key pair to be deleted.
    required:
      - arn
    title: DeletePlaybackKeyPairRequest
    type: object
  DeletePlaybackKeyPairResponse:
    properties: {}
    type: object
  DeleteRecordingConfigurationRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationArn'
          - description: ARN of the recording configuration to be deleted.
    required:
      - arn
    title: DeleteRecordingConfigurationRequest
    type: object
  DeleteStreamKeyRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/StreamKeyArn'
          - description: ARN of the stream key to be deleted.
    required:
      - arn
    title: DeleteStreamKeyRequest
    type: object
  DestinationConfiguration:
    description: >-
      A complex type that describes a location where recorded videos will be
      stored. Each member represents a type of destination configuration. For
      recording, you define one and only one type of destination configuration.
    properties:
      s3:
        allOf:
          - $ref: '#/definitions/S3DestinationConfiguration'
          - description: >-
              An S3 destination configuration where recorded videos will be
              stored.
    type: object
  GetChannelRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: ARN of the channel for which the configuration is to be retrieved.
    required:
      - arn
    title: GetChannelRequest
    type: object
  GetChannelResponse:
    properties:
      channel:
        $ref: '#/definitions/Channel'
    type: object
  GetPlaybackKeyPairRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairArn'
          - description: ARN of the key pair to be returned.
    required:
      - arn
    title: GetPlaybackKeyPairRequest
    type: object
  GetPlaybackKeyPairResponse:
    properties:
      keyPair:
        $ref: '#/definitions/PlaybackKeyPair'
    type: object
  GetRecordingConfigurationRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationArn'
          - description: ARN of the recording configuration to be retrieved.
    required:
      - arn
    title: GetRecordingConfigurationRequest
    type: object
  GetRecordingConfigurationResponse:
    properties:
      recordingConfiguration:
        $ref: '#/definitions/RecordingConfiguration'
    type: object
  GetStreamKeyRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/StreamKeyArn'
          - description: ARN for the stream key to be retrieved.
    required:
      - arn
    title: GetStreamKeyRequest
    type: object
  GetStreamKeyResponse:
    properties:
      streamKey:
        $ref: '#/definitions/StreamKey'
    type: object
  GetStreamRequest:
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN for stream to be accessed.
    required:
      - channelArn
    title: GetStreamRequest
    type: object
  GetStreamResponse:
    properties:
      stream:
        $ref: '#/definitions/Stream'
    type: object
  ImportPlaybackKeyPairRequest:
    properties:
      name:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairName'
          - description: >-
              An arbitrary string (a nickname) assigned to a playback key pair
              that helps the customer identify that resource. The value does not
              need to be unique.
      publicKeyMaterial:
        allOf:
          - $ref: '#/definitions/PlaybackPublicKeyMaterial'
          - description: The public portion of a customer-generated key pair.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Any tags provided with the request are added to the playback key
              pair tags.
    required:
      - publicKeyMaterial
    title: ImportPlaybackKeyPairRequest
    type: object
  ImportPlaybackKeyPairResponse:
    properties:
      keyPair:
        $ref: '#/definitions/PlaybackKeyPair'
    type: object
  IngestEndpoint:
    type: string
  InternalServerException: {}
  IsAuthorized:
    type: boolean
  ListChannelsRequest:
    properties:
      filterByName:
        allOf:
          - $ref: '#/definitions/ChannelName'
          - description: Filters the channel list to match the specified name.
      filterByRecordingConfigurationArn:
        allOf:
          - $ref: '#/definitions/ChannelRecordingConfigurationArn'
          - description: >-
              Filters the channel list to match the specified
              recording-configuration ARN.
      maxResults:
        allOf:
          - $ref: '#/definitions/MaxChannelResults'
          - description: 'Maximum number of channels to return. Default: 50.'
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              The first channel to retrieve. This is used for pagination; see
              the <code>nextToken</code> response field.
    title: ListChannelsRequest
    type: object
  ListChannelsResponse:
    properties:
      channels:
        allOf:
          - $ref: '#/definitions/ChannelList'
          - description: List of the matching channels.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              If there are more channels than <code>maxResults</code>, use
              <code>nextToken</code> in the request to get the next set.
    required:
      - channels
    type: object
  ListPlaybackKeyPairsRequest:
    properties:
      maxResults:
        allOf:
          - $ref: '#/definitions/MaxPlaybackKeyPairResults'
          - description: >-
              The first key pair to retrieve. This is used for pagination; see
              the <code>nextToken</code> response field. Default: 50.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: Maximum number of key pairs to return.
    title: ListPlaybackKeyPairsRequest
    type: object
  ListPlaybackKeyPairsResponse:
    properties:
      keyPairs:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairList'
          - description: List of key pairs.
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              If there are more key pairs than <code>maxResults</code>, use
              <code>nextToken</code> in the request to get the next set.
    required:
      - keyPairs
    type: object
  ListRecordingConfigurationsRequest:
    properties:
      maxResults:
        allOf:
          - $ref: '#/definitions/MaxRecordingConfigurationResults'
          - description: >-
              Maximum number of recording configurations to return. Default:
              50. 
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              The first recording configuration to retrieve. This is used for
              pagination; see the <code>nextToken</code> response field.
    title: ListRecordingConfigurationsRequest
    type: object
  ListRecordingConfigurationsResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              If there are more recording configurations than
              <code>maxResults</code>, use <code>nextToken</code> in the request
              to get the next set.
      recordingConfigurations:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationList'
          - description: List of the matching recording configurations.
    required:
      - recordingConfigurations
    type: object
  ListStreamKeysRequest:
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN used to filter the list.
      maxResults:
        allOf:
          - $ref: '#/definitions/MaxStreamKeyResults'
          - description: 'Maximum number of streamKeys to return. Default: 50.'
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              The first stream key to retrieve. This is used for pagination; see
              the <code>nextToken</code> response field.
    required:
      - channelArn
    title: ListStreamKeysRequest
    type: object
  ListStreamKeysResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              If there are more stream keys than <code>maxResults</code>, use
              <code>nextToken</code> in the request to get the next set.
      streamKeys:
        allOf:
          - $ref: '#/definitions/StreamKeyList'
          - description: List of stream keys.
    required:
      - streamKeys
    type: object
  ListStreamsRequest:
    properties:
      maxResults:
        allOf:
          - $ref: '#/definitions/MaxStreamResults'
          - description: 'Maximum number of streams to return. Default: 50.'
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              The first stream to retrieve. This is used for pagination; see the
              <code>nextToken</code> response field.
    title: ListStreamsRequest
    type: object
  ListStreamsResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/PaginationToken'
          - description: >-
              If there are more streams than <code>maxResults</code>, use
              <code>nextToken</code> in the request to get the next set.
      streams:
        allOf:
          - $ref: '#/definitions/StreamList'
          - description: List of streams.
    required:
      - streams
    type: object
  ListTagsForResourceRequest:
    properties:
      maxResults:
        allOf:
          - $ref: '#/definitions/MaxTagResults'
          - description: 'Maximum number of tags to return. Default: 50.'
      nextToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              The first tag to retrieve. This is used for pagination; see the
              <code>nextToken</code> response field.
    title: ListTagsForResourceRequest
    type: object
  ListTagsForResourceResponse:
    properties:
      nextToken:
        allOf:
          - $ref: '#/definitions/String'
          - description: >-
              If there are more tags than <code>maxResults</code>, use
              <code>nextToken</code> in the request to get the next set.
      tags:
        $ref: '#/definitions/Tags'
    required:
      - tags
    type: object
  MaxChannelResults:
    maximum: 50
    minimum: 1
    type: integer
  MaxPlaybackKeyPairResults:
    maximum: 50
    minimum: 1
    type: integer
  MaxRecordingConfigurationResults:
    maximum: 50
    minimum: 1
    type: integer
  MaxStreamKeyResults:
    maximum: 50
    minimum: 1
    type: integer
  MaxStreamResults:
    maximum: 50
    minimum: 1
    type: integer
  MaxTagResults:
    maximum: 50
    minimum: 1
    type: integer
  PaginationToken:
    maxLength: 500
    minLength: 0
    type: string
  PendingVerification: {}
  PlaybackKeyPair:
    description: A key pair used to sign and validate a playback authorization token.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairArn'
          - description: Key-pair ARN.
      fingerprint:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairFingerprint'
          - description: Key-pair identifier.
      name:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairName'
          - description: >-
              An arbitrary string (a nickname) assigned to a playback key pair
              that helps the customer identify that resource. The value does not
              need to be unique.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    type: object
  PlaybackKeyPairArn:
    maxLength: 128
    minLength: 1
    pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:playback-key/[a-zA-Z0-9-]+$'
    type: string
  PlaybackKeyPairFingerprint:
    type: string
  PlaybackKeyPairList:
    items:
      $ref: '#/definitions/PlaybackKeyPairSummary'
    type: array
  PlaybackKeyPairName:
    maxLength: 128
    minLength: 0
    pattern: '^[a-zA-Z0-9-_]*$'
    type: string
  PlaybackKeyPairSummary:
    description: Summary information about a playback key pair.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairArn'
          - description: Key-pair ARN.
      name:
        allOf:
          - $ref: '#/definitions/PlaybackKeyPairName'
          - description: >-
              An arbitrary string (a nickname) assigned to a playback key pair
              that helps the customer identify that resource. The value does not
              need to be unique.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    type: object
  PlaybackPublicKeyMaterial:
    type: string
  PlaybackURL:
    type: string
  PutMetadataRequest:
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: >-
              ARN of the channel into which metadata is inserted. This channel
              must have an active stream.
      metadata:
        allOf:
          - $ref: '#/definitions/StreamMetadata'
          - description: 'Metadata to insert into the stream. Maximum: 1 KB per request.'
    required:
      - channelArn
      - metadata
    title: PutMetadataRequest
    type: object
  RecordingConfiguration:
    description: An object representing a configuration to record a channel stream.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationArn'
          - description: Recording-configuration ARN.
      destinationConfiguration:
        allOf:
          - $ref: '#/definitions/DestinationConfiguration'
          - description: >-
              A complex type that contains information about where recorded
              video will be stored.
      name:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationName'
          - description: >-
              An arbitrary string (a nickname) assigned to a recording
              configuration that helps the customer identify that resource. The
              value does not need to be unique.
      state:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationState'
          - description: >-
              Indicates the current state of the recording configuration. When
              the state is <code>ACTIVE</code>, the configuration is ready for
              recording a channel stream.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    required:
      - arn
      - destinationConfiguration
      - state
    type: object
  RecordingConfigurationArn:
    maxLength: 128
    minLength: 0
    pattern: '^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$'
    type: string
  RecordingConfigurationList:
    items:
      $ref: '#/definitions/RecordingConfigurationSummary'
    type: array
  RecordingConfigurationName:
    maxLength: 128
    minLength: 0
    pattern: '^[a-zA-Z0-9-_]*$'
    type: string
  RecordingConfigurationState:
    enum:
      - CREATING
      - CREATE_FAILED
      - ACTIVE
    type: string
  RecordingConfigurationSummary:
    description: Summary information about a RecordingConfiguration.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationArn'
          - description: Recording-configuration ARN.
      destinationConfiguration:
        allOf:
          - $ref: '#/definitions/DestinationConfiguration'
          - description: >-
              A complex type that contains information about where recorded
              video will be stored.
      name:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationName'
          - description: >-
              An arbitrary string (a nickname) assigned to a recording
              configuration that helps the customer identify that resource. The
              value does not need to be unique.
      state:
        allOf:
          - $ref: '#/definitions/RecordingConfigurationState'
          - description: >-
              Indicates the current state of the recording configuration. When
              the state is <code>ACTIVE</code>, the configuration is ready for
              recording a channel stream.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    required:
      - arn
      - destinationConfiguration
      - state
    type: object
  ResourceArn:
    maxLength: 128
    minLength: 1
    pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$'
    type: string
  ResourceNotFoundException: {}
  S3DestinationBucketName:
    maxLength: 63
    minLength: 3
    pattern: '^[a-z0-9-.]+$'
    type: string
  S3DestinationConfiguration:
    description: >-
      A complex type that describes an S3 location where recorded videos will be
      stored.
    properties:
      bucketName:
        allOf:
          - $ref: '#/definitions/S3DestinationBucketName'
          - description: Location (S3 bucket name) where recorded videos will be stored.
    required:
      - bucketName
    type: object
  ServiceQuotaExceededException: {}
  StopStreamRequest:
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: ARN of the channel for which the stream is to be stopped.
    required:
      - channelArn
    title: StopStreamRequest
    type: object
  StopStreamResponse:
    properties: {}
    type: object
  Stream:
    description: Specifies a live video stream that has been ingested and distributed.
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN for the stream.
      health:
        allOf:
          - $ref: '#/definitions/StreamHealth'
          - description: The stream’s health.
      playbackUrl:
        allOf:
          - $ref: '#/definitions/PlaybackURL'
          - description: >-
              URL of the master playlist, required by the video player to play
              the HLS stream.
      startTime:
        allOf:
          - $ref: '#/definitions/StreamStartTime'
          - description: ISO-8601 formatted timestamp of the stream’s start.
      state:
        allOf:
          - $ref: '#/definitions/StreamState'
          - description: The stream’s state.
      viewerCount:
        allOf:
          - $ref: '#/definitions/StreamViewerCount'
          - description: >-
              Number of current viewers of the stream. A value of -1 indicates
              that the request timed out; in this case, retry.
    type: object
  StreamHealth:
    enum:
      - HEALTHY
      - STARVING
      - UNKNOWN
    type: string
  StreamKey:
    description: Object specifying a stream key.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/StreamKeyArn'
          - description: Stream-key ARN.
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN for the stream.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
      value:
        allOf:
          - $ref: '#/definitions/StreamKeyValue'
          - description: Stream-key value.
    type: object
  StreamKeyArn:
    maxLength: 128
    minLength: 1
    pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:stream-key/[a-zA-Z0-9-]+$'
    type: string
  StreamKeyArnList:
    items:
      $ref: '#/definitions/StreamKeyArn'
    maxItems: 50
    minItems: 1
    type: array
  StreamKeyList:
    items:
      $ref: '#/definitions/StreamKeySummary'
    type: array
  StreamKeySummary:
    description: Summary information about a stream key.
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/StreamKeyArn'
          - description: Stream-key ARN.
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN for the stream.
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: >-
              Array of 1-50 maps, each of the form <code>string:string
              (key:value)</code>.
    type: object
  StreamKeyValue:
    type: string
  StreamKeys:
    items:
      $ref: '#/definitions/StreamKey'
    type: array
  StreamList:
    items:
      $ref: '#/definitions/StreamSummary'
    type: array
  StreamMetadata:
    minLength: 1
    type: string
  StreamStartTime:
    format: date-time
    type: string
  StreamState:
    enum:
      - LIVE
      - OFFLINE
    type: string
  StreamSummary:
    description: Summary information about a stream.
    properties:
      channelArn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: Channel ARN for the stream.
      health:
        allOf:
          - $ref: '#/definitions/StreamHealth'
          - description: The stream’s health.
      startTime:
        allOf:
          - $ref: '#/definitions/StreamStartTime'
          - description: ISO-8601 formatted timestamp of the stream’s start.
      state:
        allOf:
          - $ref: '#/definitions/StreamState'
          - description: The stream’s state.
      viewerCount:
        allOf:
          - $ref: '#/definitions/StreamViewerCount'
          - description: >-
              Number of current viewers of the stream. A value of -1 indicates
              that the request timed out; in this case, retry.
    type: object
  StreamUnavailable: {}
  StreamViewerCount:
    type: integer
  String:
    type: string
  TagKey:
    maxLength: 128
    minLength: 1
    type: string
  TagKeyList:
    items:
      $ref: '#/definitions/TagKey'
    maxItems: 50
    minItems: 0
    type: array
  TagResourceRequest:
    properties:
      tags:
        allOf:
          - $ref: '#/definitions/Tags'
          - description: Array of tags to be added or updated.
    required:
      - tags
    title: TagResourceRequest
    type: object
  TagResourceResponse:
    properties: {}
    type: object
  TagValue:
    maxLength: 256
    type: string
  Tags:
    additionalProperties:
      $ref: '#/definitions/TagValue'
    maxProperties: 50
    minProperties: 0
    type: object
  ThrottlingException: {}
  UntagResourceRequest:
    properties: {}
    title: UntagResourceRequest
    type: object
  UntagResourceResponse:
    properties: {}
    type: object
  UpdateChannelRequest:
    properties:
      arn:
        allOf:
          - $ref: '#/definitions/ChannelArn'
          - description: ARN of the channel to be updated.
      authorized:
        allOf:
          - $ref: '#/definitions/Boolean'
          - description: >-
              Whether the channel is private (enabled for playback
              authorization).
      latencyMode:
        allOf:
          - $ref: '#/definitions/ChannelLatencyMode'
          - description: >-
              Channel latency mode. Use <code>NORMAL</code> to broadcast and
              deliver live video up to Full HD. Use <code>LOW</code> for
              near-real-time interaction with viewers. (Note: In the Amazon IVS
              console, <code>LOW</code> and <code>NORMAL</code> correspond to
              Ultra-low and Standard, respectively.)
      name:
        allOf:
          - $ref: '#/definitions/ChannelName'
          - description: Channel name.
      recordingConfigurationArn:
        allOf:
          - $ref: '#/definitions/ChannelRecordingConfigurationArn'
          - description: >-
              Recording-configuration ARN. If this is set to an empty string,
              recording is disabled. A value other than an empty string
              indicates that recording is enabled
      type:
        allOf:
          - $ref: '#/definitions/ChannelType'
          - description: >-
              <p>Channel type, which determines the allowable resolution and
              bitrate. <i>If you exceed the allowable resolution or bitrate, the
              stream probably will disconnect immediately</i>. Valid values:</p>
              <ul> <li> <p> <code>STANDARD</code>: Multiple qualities are
              generated from the original input, to automatically give viewers
              the best experience for their devices and network conditions.
              Vertical resolution can be up to 1080 and bitrate can be up to 8.5
              Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS delivers
              the original input to viewers. The viewer’s video-quality choice
              is limited to the original input. Vertical resolution can be up to
              480 and bitrate can be up to 1.5 Mbps.</p> </li> </ul>
    required:
      - arn
    title: UpdateChannelRequest
    type: object
  UpdateChannelResponse:
    properties:
      channel:
        $ref: '#/definitions/Channel'
    type: object
  ValidationException: {}
  errorCode:
    type: string
  errorMessage:
    type: string
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/ivs/'
host: ivs.us-east-1.amazonaws.com
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: >-
    <p> <b>Introduction</b> </p> <p>The Amazon Interactive Video Service (IVS)
    API is REST compatible, using a standard HTTP API and an AWS EventBridge
    event stream for responses. JSON is used for both requests and responses,
    including errors.</p> <p>The API is an AWS regional service, currently in
    these regions: us-west-2, us-east-1, and eu-west-1.</p> <p> <i> <b>All API
    request parameters and URLs are case sensitive. </b> </i> </p> <p>For a
    summary of notable documentation changes in each release, see <a
    href="https://docs.aws.amazon.com/ivs/latest/userguide/doc-history.html">
    Document History</a>.</p> <p> <b>Service Endpoints</b> </p> <p>The following
    are the Amazon IVS service endpoints (all HTTPS): </p> <p>Region name: US
    West (Oregon)</p> <ul> <li> <p>Region: <code>us-west-2</code> </p> </li>
    <li> <p>Endpoint: <code>ivs.us-west-2.amazonaws.com</code> </p> </li> </ul>
    <p>Region name: US East (Virginia)</p> <ul> <li> <p>Region:
    <code>us-east-1</code> </p> </li> <li> <p>Endpoint:
    <code>ivs.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>Region name: EU
    West (Dublin)</p> <ul> <li> <p>Region: <code>eu-west-1</code> </p> </li>
    <li> <p>Endpoint: <code>ivs.eu-west-1.amazonaws.com</code> </p> </li> </ul>
    <p> <b>Allowed Header Values</b> </p> <ul> <li> <p> <code> <b>Accept:</b>
    </code> application/json</p> </li> <li> <p> <code> <b>Accept-Encoding:</b>
    </code> gzip, deflate</p> </li> <li> <p> <code> <b>Content-Type:</b>
    </code>application/json</p> </li> </ul> <p> <b>Resources</b> </p> <p>The
    following resources contain information about your IVS live stream (see <a
    href="https://docs.aws.amazon.com/ivs/latest/userguide/getting-started.html">
    Getting Started with Amazon IVS</a>):</p> <ul> <li> <p>Channel — Stores
    configuration data related to your live stream. You first create a channel
    and then use the channel’s stream key to start your live stream. See the
    Channel endpoints for more information. </p> </li> <li> <p>Stream key — An
    identifier assigned by Amazon IVS when you create a channel, which is then
    used to authorize streaming. See the StreamKey endpoints for more
    information. <i> <b>Treat the stream key like a secret, since it allows
    anyone to stream to the channel.</b> </i> </p> </li> <li> <p>Playback key
    pair — Video playback may be restricted using playback-authorization tokens,
    which use public-key encryption. A playback key pair is the public-private
    pair of keys used to sign and validate the playback-authorization token. See
    the PlaybackKeyPair endpoints for more information.</p> </li> <li>
    <p>Recording configuration — Stores configuration related to recording a
    live stream and where to store the recorded content. Multiple channels can
    reference the same recording configuration. See the Recording Configuration
    endpoints for more information.</p> </li> </ul> <p> <b>Tagging</b> </p> <p>A
    <i>tag</i> is a metadata label that you assign to an AWS resource. A tag
    comprises a <i>key</i> and a <i>value</i>, both set by you. For example, you
    might set a tag as <code>topic:nature</code> to label a particular video
    category. See <a
    href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
    AWS Resources</a> for more information, including restrictions that apply to
    tags.</p> <p>Tags can help you identify and organize your AWS resources. For
    example, you can use the same tag for different resources to indicate that
    they are related. You can also use tags to manage access (see <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">
    Access Tags</a>). </p> <p>The Amazon IVS API has these tag-related
    endpoints: <a>TagResource</a>, <a>UntagResource</a>, and
    <a>ListTagsForResource</a>. The following resources support tagging:
    Channels, Stream Keys, Playback Key Pairs, and Recording Configurations.</p>
    <p> <b>Authentication versus Authorization</b> </p> <p>Note the differences
    between these concepts:</p> <ul> <li> <p> <i>Authentication</i> is about
    verifying identity. You need to be authenticated to sign Amazon IVS API
    requests.</p> </li> <li> <p> <i>Authorization</i> is about granting
    permissions. You need to be authorized to view <a
    href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Amazon
    IVS private channels</a>. (Private channels are channels that are enabled
    for "playback authorization.")</p> </li> </ul> <p> <b>Authentication</b>
    </p> <p>All Amazon IVS API requests must be authenticated with a signature.
    The AWS Command-Line Interface (CLI) and Amazon IVS Player SDKs take care of
    signing the underlying API calls for you. However, if your application calls
    the Amazon IVS API directly, it’s your responsibility to sign the
    requests.</p> <p>You generate a signature using valid AWS credentials that
    have permission to perform the requested action. For example, you must sign
    PutMetadata requests with a signature generated from an IAM user account
    that has the <code>ivs:PutMetadata</code> permission.</p> <p>For more
    information:</p> <ul> <li> <p>Authentication and generating signatures — See
    <a
    href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
    Requests (AWS Signature Version 4)</a> in the <i>AWS General
    Reference</i>.</p> </li> <li> <p>Managing Amazon IVS permissions — See <a
    href="https://docs.aws.amazon.com/ivs/latest/userguide/security-iam.html">Identity
    and Access Management</a> on the Security page of the <i>Amazon IVS User
    Guide</i>.</p> </li> </ul> <p> <b>Channel Endpoints</b> </p> <ul> <li> <p>
    <a>CreateChannel</a> — Creates a new channel and an associated stream key to
    start streaming.</p> </li> <li> <p> <a>GetChannel</a> — Gets the channel
    configuration for the specified channel ARN (Amazon Resource Name).</p>
    </li> <li> <p> <a>BatchGetChannel</a> — Performs <a>GetChannel</a> on
    multiple ARNs simultaneously.</p> </li> <li> <p> <a>ListChannels</a> — Gets
    summary information about all channels in your account, in the AWS region
    where the API request is processed. This list can be filtered to match a
    specified name or recording-configuration ARN. Filters are mutually
    exclusive and cannot be used together. If you try to use both filters, you
    will get an error (409 Conflict Exception).</p> </li> <li> <p>
    <a>UpdateChannel</a> — Updates a channel's configuration. This does not
    affect an ongoing stream of this channel. You must stop and restart the
    stream for the changes to take effect.</p> </li> <li> <p>
    <a>DeleteChannel</a> — Deletes the specified channel.</p> </li> </ul> <p>
    <b>StreamKey Endpoints</b> </p> <ul> <li> <p> <a>CreateStreamKey</a> —
    Creates a stream key, used to initiate a stream, for the specified channel
    ARN.</p> </li> <li> <p> <a>GetStreamKey</a> — Gets stream key information
    for the specified ARN.</p> </li> <li> <p> <a>BatchGetStreamKey</a> —
    Performs <a>GetStreamKey</a> on multiple ARNs simultaneously.</p> </li> <li>
    <p> <a>ListStreamKeys</a> — Gets summary information about stream keys for
    the specified channel.</p> </li> <li> <p> <a>DeleteStreamKey</a> — Deletes
    the stream key for the specified ARN, so it can no longer be used to
    stream.</p> </li> </ul> <p> <b>Stream Endpoints</b> </p> <ul> <li> <p>
    <a>GetStream</a> — Gets information about the active (live) stream on a
    specified channel.</p> </li> <li> <p> <a>ListStreams</a> — Gets summary
    information about live streams in your account, in the AWS region where the
    API request is processed.</p> </li> <li> <p> <a>StopStream</a> — Disconnects
    the incoming RTMPS stream for the specified channel. Can be used in
    conjunction with <a>DeleteStreamKey</a> to prevent further streaming to a
    channel.</p> </li> <li> <p> <a>PutMetadata</a> — Inserts metadata into the
    active stream of the specified channel. A maximum of 5 requests per second
    per channel is allowed, each with a maximum 1 KB payload. (If 5 TPS is not
    sufficient for your needs, we recommend batching your data into a single
    PutMetadata call.)</p> </li> </ul> <p> <b>PlaybackKeyPair Endpoints</b> </p>
    <p>For more information, see <a
    href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting
    Up Private Channels</a> in the <i>Amazon IVS User Guide</i>.</p> <ul> <li>
    <p> <a>ImportPlaybackKeyPair</a> — Imports the public portion of a new key
    pair and returns its <code>arn</code> and <code>fingerprint</code>. The
    <code>privateKey</code> can then be used to generate viewer authorization
    tokens, to grant viewers access to private channels (channels enabled for
    playback authorization).</p> </li> <li> <p> <a>GetPlaybackKeyPair</a> — Gets
    a specified playback authorization key pair and returns the <code>arn</code>
    and <code>fingerprint</code>. The <code>privateKey</code> held by the caller
    can be used to generate viewer authorization tokens, to grant viewers access
    to private channels.</p> </li> <li> <p> <a>ListPlaybackKeyPairs</a> — Gets
    summary information about playback key pairs.</p> </li> <li> <p>
    <a>DeletePlaybackKeyPair</a> — Deletes a specified authorization key pair.
    This invalidates future viewer tokens generated using the key pair’s
    <code>privateKey</code>.</p> </li> </ul> <p> <b>RecordingConfiguration
    Endpoints</b> </p> <ul> <li> <p> <a>CreateRecordingConfiguration</a> —
    Creates a new recording configuration, used to enable recording to Amazon
    S3.</p> </li> <li> <p> <a>GetRecordingConfiguration</a> — Gets the
    recording-configuration metadata for the specified ARN.</p> </li> <li> <p>
    <a>ListRecordingConfigurations</a> — Gets summary information about all
    recording configurations in your account, in the AWS region where the API
    request is processed.</p> </li> <li> <p> <a>DeleteRecordingConfiguration</a>
    — Deletes the recording configuration for the specified ARN.</p> </li> </ul>
    <p> <b>AWS Tags Endpoints</b> </p> <ul> <li> <p> <a>TagResource</a> — Adds
    or updates tags for the AWS resource with the specified ARN.</p> </li> <li>
    <p> <a>UntagResource</a> — Removes tags from the resource with the specified
    ARN.</p> </li> <li> <p> <a>ListTagsForResource</a> — Gets information about
    AWS tags for the specified ARN.</p> </li> </ul>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: Amazon Interactive Video Service
  version: '2020-07-14'
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-aws-signingName: ivs
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ivs-2020-07-14.normal.json
      x-apisguru-driver: external
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: ivs
paths:
  /BatchGetChannel:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Performs <a>GetChannel</a> on multiple ARNs simultaneously.
      operationId: BatchGetChannel
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arns:
                description: 'Array of ARNs, one per channel.'
                items:
                  $ref: '#/definitions/ChannelArn'
                maxItems: 50
                minItems: 1
                type: array
            required:
              - arns
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetChannelResponse'
  /BatchGetStreamKey:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Performs <a>GetStreamKey</a> on multiple ARNs simultaneously.
      operationId: BatchGetStreamKey
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arns:
                description: 'Array of ARNs, one per channel.'
                items:
                  $ref: '#/definitions/StreamKeyArn'
                maxItems: 50
                minItems: 1
                type: array
            required:
              - arns
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetStreamKeyResponse'
  /CreateChannel:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Creates a new channel and an associated stream key to start streaming.
      operationId: CreateChannel
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              authorized:
                description: >-
                  Whether the channel is private (enabled for playback
                  authorization). Default: <code>false</code>.
                type: boolean
              latencyMode:
                description: >-
                  Channel latency mode. Use <code>NORMAL</code> to broadcast and
                  deliver live video up to Full HD. Use <code>LOW</code> for
                  near-real-time interaction with viewers. (Note: In the Amazon
                  IVS console, <code>LOW</code> and <code>NORMAL</code>
                  correspond to Ultra-low and Standard, respectively.) Default:
                  <code>LOW</code>.
                enum:
                  - NORMAL
                  - LOW
                type: string
              name:
                description: Channel name.
                maxLength: 128
                minLength: 0
                pattern: '^[a-zA-Z0-9-_]*$'
                type: string
              recordingConfigurationArn:
                description: >-
                  Recording-configuration ARN. Default: "" (empty string,
                  recording is disabled).
                maxLength: 128
                minLength: 0
                pattern: >-
                  ^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$
                type: string
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: >-
                  Array of 1-50 maps, each of the form <code>string:string
                  (key:value)</code>.
                maxProperties: 50
                minProperties: 0
                type: object
              type:
                description: >-
                  <p>Channel type, which determines the allowable resolution and
                  bitrate. <i>If you exceed the allowable resolution or bitrate,
                  the stream probably will disconnect immediately.</i> Default:
                  <code>STANDARD</code>. Valid values:</p> <ul> <li> <p>
                  <code>STANDARD</code>: Multiple qualities are generated from
                  the original input, to automatically give viewers the best
                  experience for their devices and network conditions. Vertical
                  resolution can be up to 1080 and bitrate can be up to 8.5
                  Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS
                  delivers the original input to viewers. The viewer’s
                  video-quality choice is limited to the original input.
                  Vertical resolution can be up to 480 and bitrate can be up to
                  1.5 Mbps.</p> </li> </ul>
                enum:
                  - BASIC
                  - STANDARD
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateChannelResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ServiceQuotaExceededException
          schema:
            $ref: '#/definitions/ServiceQuotaExceededException'
        '484':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  /CreateRecordingConfiguration:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a new recording configuration, used to enable recording to
        Amazon S3.</p> <p> <b>Known issue:</b> In the us-east-1 region, if you
        use the AWS CLI to create a recording configuration, it returns success
        even if the S3 bucket is in a different region. In this case, the
        <code>state</code> of the recording configuration is
        <code>CREATE_FAILED</code> (instead of <code>ACTIVE</code>). (In other
        regions, the CLI correctly returns failure if the bucket is in a
        different region.)</p> <p> <b>Workaround:</b> Ensure that your S3 bucket
        is in the same region as the recording configuration. If you create a
        recording configuration in a different region as your S3 bucket, delete
        that recording configuration and create a new one with an S3 bucket from
        the correct region.</p>
      operationId: CreateRecordingConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              destinationConfiguration:
                description: >-
                  A complex type that describes a location where recorded videos
                  will be stored. Each member represents a type of destination
                  configuration. For recording, you define one and only one type
                  of destination configuration.
                properties:
                  s3:
                    allOf:
                      - $ref: '#/definitions/S3DestinationConfiguration'
                      - description: >-
                          An S3 destination configuration where recorded videos
                          will be stored.
                type: object
              name:
                description: >-
                  An arbitrary string (a nickname) that helps the customer
                  identify that resource. The value does not need to be unique.
                maxLength: 128
                minLength: 0
                pattern: '^[a-zA-Z0-9-_]*$'
                type: string
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: >-
                  Array of 1-50 maps, each of the form <code>string:string
                  (key:value)</code>.
                maxProperties: 50
                minProperties: 0
                type: object
            required:
              - destinationConfiguration
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRecordingConfigurationResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '483':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
        '484':
          description: ServiceQuotaExceededException
          schema:
            $ref: '#/definitions/ServiceQuotaExceededException'
        '485':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
  /CreateStreamKey:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Creates a stream key, used to initiate a stream, for the specified
        channel ARN.</p> <p>Note that <a>CreateChannel</a> creates a stream key.
        If you subsequently use CreateStreamKey on the same channel, it will
        fail because a stream key already exists and there is a limit of 1
        stream key per channel. To reset the stream key on a channel, use
        <a>DeleteStreamKey</a> and then CreateStreamKey.</p>
      operationId: CreateStreamKey
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              channelArn:
                description: ARN of the channel for which to create the stream key.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: >-
                  Array of 1-50 maps, each of the form <code>string:string
                  (key:value)</code>.
                maxProperties: 50
                minProperties: 0
                type: object
            required:
              - channelArn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateStreamKeyResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ServiceQuotaExceededException
          schema:
            $ref: '#/definitions/ServiceQuotaExceededException'
        '484':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  /DeleteChannel:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Deletes the specified channel and its associated stream keys.</p>
        <p>If you try to delete a live channel, you will get an error (409
        ConflictException). To delete a channel that is live, call
        <a>StopStream</a>, wait for the Amazon EventBridge "Stream End" event
        (to verify that the stream's state was changed from Live to Offline),
        then call DeleteChannel. (See <a
        href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html">
        Using EventBridge with Amazon IVS</a>.) </p>
      operationId: DeleteChannel
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the channel to be deleted.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  /DeletePlaybackKeyPair:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Deletes a specified authorization key pair. This invalidates future
        viewer tokens generated using the key pair’s <code>privateKey</code>.
        For more information, see <a
        href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting
        Up Private Channels</a> in the <i>Amazon IVS User Guide</i>.
      operationId: DeletePlaybackKeyPair
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the key pair to be deleted.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:playback-key/[a-zA-Z0-9-]+$'
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeletePlaybackKeyPairResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  /DeleteRecordingConfiguration:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Deletes the recording configuration for the specified ARN.</p> <p>If
        you try to delete a recording configuration that is associated with a
        channel, you will get an error (409 ConflictException). To avoid this,
        for all channels that reference the recording configuration, first use
        <a>UpdateChannel</a> to set the <code>recordingConfigurationArn</code>
        field to an empty string, then use DeleteRecordingConfiguration.</p>
      operationId: DeleteRecordingConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the recording configuration to be deleted.
                maxLength: 128
                minLength: 0
                pattern: >-
                  ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '483':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '484':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
  /DeleteStreamKey:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Deletes the stream key for the specified ARN, so it can no longer be
        used to stream.
      operationId: DeleteStreamKey
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the stream key to be deleted.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:stream-key/[a-zA-Z0-9-]+$'
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '204':
          description: Success
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  /GetChannel:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Gets the channel configuration for the specified channel ARN. See also
        <a>BatchGetChannel</a>.
      operationId: GetChannel
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: >-
                  ARN of the channel for which the configuration is to be
                  retrieved.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetChannelResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /GetPlaybackKeyPair:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Gets a specified playback authorization key pair and returns the
        <code>arn</code> and <code>fingerprint</code>. The
        <code>privateKey</code> held by the caller can be used to generate
        viewer authorization tokens, to grant viewers access to private
        channels. For more information, see <a
        href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting
        Up Private Channels</a> in the <i>Amazon IVS User Guide</i>.
      operationId: GetPlaybackKeyPair
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the key pair to be returned.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:playback-key/[a-zA-Z0-9-]+$'
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPlaybackKeyPairResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /GetRecordingConfiguration:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Gets the recording configuration for the specified ARN.
      operationId: GetRecordingConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the recording configuration to be retrieved.
                maxLength: 128
                minLength: 0
                pattern: >-
                  ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRecordingConfigurationResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
  /GetStream:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Gets information about the active (live) stream on a specified channel.
      operationId: GetStream
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              channelArn:
                description: Channel ARN for stream to be accessed.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
            required:
              - channelArn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStreamResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '482':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '483':
          description: ChannelNotBroadcasting
          schema:
            $ref: '#/definitions/ChannelNotBroadcasting'
  /GetStreamKey:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Gets stream-key information for a specified ARN.
      operationId: GetStreamKey
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN for the stream key to be retrieved.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:stream-key/[a-zA-Z0-9-]+$'
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStreamKeyResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /ImportPlaybackKeyPair:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Imports the public portion of a new key pair and returns its
        <code>arn</code> and <code>fingerprint</code>. The
        <code>privateKey</code> can then be used to generate viewer
        authorization tokens, to grant viewers access to private channels. For
        more information, see <a
        href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting
        Up Private Channels</a> in the <i>Amazon IVS User Guide</i>.
      operationId: ImportPlaybackKeyPair
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              name:
                description: >-
                  An arbitrary string (a nickname) assigned to a playback key
                  pair that helps the customer identify that resource. The value
                  does not need to be unique.
                maxLength: 128
                minLength: 0
                pattern: '^[a-zA-Z0-9-_]*$'
                type: string
              publicKeyMaterial:
                description: The public portion of a customer-generated key pair.
                type: string
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: >-
                  Any tags provided with the request are added to the playback
                  key pair tags.
                maxProperties: 50
                minProperties: 0
                type: object
            required:
              - publicKeyMaterial
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ImportPlaybackKeyPairResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '483':
          description: ServiceQuotaExceededException
          schema:
            $ref: '#/definitions/ServiceQuotaExceededException'
        '484':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  /ListChannels:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Gets summary information about all channels in your account, in the AWS
        region where the API request is processed. This list can be filtered to
        match a specified name or recording-configuration ARN. Filters are
        mutually exclusive and cannot be used together. If you try to use both
        filters, you will get an error (409 ConflictException).
      operationId: ListChannels
      parameters:
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              filterByName:
                description: Filters the channel list to match the specified name.
                maxLength: 128
                minLength: 0
                pattern: '^[a-zA-Z0-9-_]*$'
                type: string
              filterByRecordingConfigurationArn:
                description: >-
                  Filters the channel list to match the specified
                  recording-configuration ARN.
                maxLength: 128
                minLength: 0
                pattern: >-
                  ^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$
                type: string
              maxResults:
                description: 'Maximum number of channels to return. Default: 50.'
                maximum: 50
                minimum: 1
                type: integer
              nextToken:
                description: >-
                  The first channel to retrieve. This is used for pagination;
                  see the <code>nextToken</code> response field.
                maxLength: 500
                minLength: 0
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListChannelsResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  /ListPlaybackKeyPairs:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Gets summary information about playback key pairs. For more information,
        see <a
        href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting
        Up Private Channels</a> in the <i>Amazon IVS User Guide</i>.
      operationId: ListPlaybackKeyPairs
      parameters:
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              maxResults:
                description: >-
                  The first key pair to retrieve. This is used for pagination;
                  see the <code>nextToken</code> response field. Default: 50.
                maximum: 50
                minimum: 1
                type: integer
              nextToken:
                description: Maximum number of key pairs to return.
                maxLength: 500
                minLength: 0
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListPlaybackKeyPairsResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
  /ListRecordingConfigurations:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Gets summary information about all recording configurations in your
        account, in the AWS region where the API request is processed.
      operationId: ListRecordingConfigurations
      parameters:
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              maxResults:
                description: >-
                  Maximum number of recording configurations to return. Default:
                  50. 
                maximum: 50
                minimum: 1
                type: integer
              nextToken:
                description: >-
                  The first recording configuration to retrieve. This is used
                  for pagination; see the <code>nextToken</code> response field.
                maxLength: 500
                minLength: 0
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRecordingConfigurationsResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
  /ListStreamKeys:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Gets summary information about stream keys for the specified channel.
      operationId: ListStreamKeys
      parameters:
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              channelArn:
                description: Channel ARN used to filter the list.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
              maxResults:
                description: 'Maximum number of streamKeys to return. Default: 50.'
                maximum: 50
                minimum: 1
                type: integer
              nextToken:
                description: >-
                  The first stream key to retrieve. This is used for pagination;
                  see the <code>nextToken</code> response field.
                maxLength: 500
                minLength: 0
                type: string
            required:
              - channelArn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListStreamKeysResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /ListStreams:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Gets summary information about live streams in your account, in the AWS
        region where the API request is processed.
      operationId: ListStreams
      parameters:
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              maxResults:
                description: 'Maximum number of streams to return. Default: 50.'
                maximum: 50
                minimum: 1
                type: integer
              nextToken:
                description: >-
                  The first stream to retrieve. This is used for pagination; see
                  the <code>nextToken</code> response field.
                maxLength: 500
                minLength: 0
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListStreamsResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
  /PutMetadata:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Inserts metadata into the active stream of the specified channel. A
        maximum of 5 requests per second per channel is allowed, each with a
        maximum 1 KB payload. (If 5 TPS is not sufficient for your needs, we
        recommend batching your data into a single PutMetadata call.) Also see
        <a
        href="https://docs.aws.amazon.com/ivs/latest/userguide/metadata.html">Embedding
        Metadata within a Video Stream</a> in the <i>Amazon IVS User Guide</i>.
      operationId: PutMetadata
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              channelArn:
                description: >-
                  ARN of the channel into which metadata is inserted. This
                  channel must have an active stream.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
              metadata:
                description: 'Metadata to insert into the stream. Maximum: 1 KB per request.'
                minLength: 1
                type: string
            required:
              - channelArn
              - metadata
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '480':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ChannelNotBroadcasting
          schema:
            $ref: '#/definitions/ChannelNotBroadcasting'
        '483':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '484':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
  /StopStream:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        <p>Disconnects the incoming RTMPS stream for the specified channel. Can
        be used in conjunction with <a>DeleteStreamKey</a> to prevent further
        streaming to a channel.</p> <note> <p>Many streaming client-software
        libraries automatically reconnect a dropped RTMPS session, so to stop
        the stream permanently, you may want to first revoke the
        <code>streamKey</code> attached to the channel.</p> </note>
      operationId: StopStream
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              channelArn:
                description: ARN of the channel for which the stream is to be stopped.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
            required:
              - channelArn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopStreamResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: ChannelNotBroadcasting
          schema:
            $ref: '#/definitions/ChannelNotBroadcasting'
        '482':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: StreamUnavailable
          schema:
            $ref: '#/definitions/StreamUnavailable'
  /UpdateChannel:
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: >-
        Updates a channel's configuration. This does not affect an ongoing
        stream of this channel. You must stop and restart the stream for the
        changes to take effect.
      operationId: UpdateChannel
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              arn:
                description: ARN of the channel to be updated.
                maxLength: 128
                minLength: 1
                pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$'
                type: string
              authorized:
                description: >-
                  Whether the channel is private (enabled for playback
                  authorization).
                type: boolean
              latencyMode:
                description: >-
                  Channel latency mode. Use <code>NORMAL</code> to broadcast and
                  deliver live video up to Full HD. Use <code>LOW</code> for
                  near-real-time interaction with viewers. (Note: In the Amazon
                  IVS console, <code>LOW</code> and <code>NORMAL</code>
                  correspond to Ultra-low and Standard, respectively.)
                enum:
                  - NORMAL
                  - LOW
                type: string
              name:
                description: Channel name.
                maxLength: 128
                minLength: 0
                pattern: '^[a-zA-Z0-9-_]*$'
                type: string
              recordingConfigurationArn:
                description: >-
                  Recording-configuration ARN. If this is set to an empty
                  string, recording is disabled. A value other than an empty
                  string indicates that recording is enabled
                maxLength: 128
                minLength: 0
                pattern: >-
                  ^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration/[a-zA-Z0-9-]+$
                type: string
              type:
                description: >-
                  <p>Channel type, which determines the allowable resolution and
                  bitrate. <i>If you exceed the allowable resolution or bitrate,
                  the stream probably will disconnect immediately</i>. Valid
                  values:</p> <ul> <li> <p> <code>STANDARD</code>: Multiple
                  qualities are generated from the original input, to
                  automatically give viewers the best experience for their
                  devices and network conditions. Vertical resolution can be up
                  to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li> <p>
                  <code>BASIC</code>: Amazon IVS delivers the original input to
                  viewers. The viewer’s video-quality choice is limited to the
                  original input. Vertical resolution can be up to 480 and
                  bitrate can be up to 1.5 Mbps.</p> </li> </ul>
                enum:
                  - BASIC
                  - STANDARD
                type: string
            required:
              - arn
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateChannelResponse'
        '480':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: PendingVerification
          schema:
            $ref: '#/definitions/PendingVerification'
  '/tags/{resourceArn}':
    get:
      consumes:
        - application/json
      description: Gets information about AWS tags for the specified ARN.
      operationId: ListTagsForResource
      parameters:
        - description: The ARN of the resource to be retrieved.
          in: path
          maxLength: 128
          minLength: 1
          name: resourceArn
          pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$'
          required: true
          type: string
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              maxResults:
                description: 'Maximum number of tags to return. Default: 50.'
                maximum: 50
                minimum: 1
                type: integer
              nextToken:
                description: >-
                  The first tag to retrieve. This is used for pagination; see
                  the <code>nextToken</code> response field.
                type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '481':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
    post:
      consumes:
        - application/json
      description: Adds or updates tags for the AWS resource with the specified ARN.
      operationId: TagResource
      parameters:
        - description: ARN of the resource for which tags are to be added or updated.
          in: path
          maxLength: 128
          minLength: 1
          name: resourceArn
          pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tags:
                additionalProperties:
                  $ref: '#/definitions/TagValue'
                description: Array of tags to be added or updated.
                maxProperties: 50
                minProperties: 0
                type: object
            required:
              - tags
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '481':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  '/tags/{resourceArn}#tagKeys':
    delete:
      description: Removes tags from the resource with the specified ARN.
      operationId: UntagResource
      parameters:
        - description: ARN of the resource for which tags are to be removed.
          in: path
          maxLength: 128
          minLength: 1
          name: resourceArn
          pattern: '^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$'
          required: true
          type: string
        - collectionFormat: multi
          description: Array of tags to be removed.
          in: query
          items:
            $ref: '#/definitions/TagKey'
          maxItems: 50
          minItems: 0
          name: tagKeys
          required: true
          type: array
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceResponse'
        '480':
          description: InternalServerException
          schema:
            $ref: '#/definitions/InternalServerException'
        '481':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
    parameters:
      - in: header
        name: X-Amz-Content-Sha256
        required: false
        type: string
      - in: header
        name: X-Amz-Date
        required: false
        type: string
      - in: header
        name: X-Amz-Algorithm
        required: false
        type: string
      - in: header
        name: X-Amz-Credential
        required: false
        type: string
      - in: header
        name: X-Amz-Security-Token
        required: false
        type: string
      - in: header
        name: X-Amz-Signature
        required: false
        type: string
      - in: header
        name: X-Amz-SignedHeaders
        required: false
        type: string
schemes:
  - http
security:
  - hmac: []
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
swagger: '2.0'
x-components:
  parameters:
    X-Amz-Algorithm:
      in: header
      name: X-Amz-Algorithm
      required: false
      type: string
    X-Amz-Content-Sha256:
      in: header
      name: X-Amz-Content-Sha256
      required: false
      type: string
    X-Amz-Credential:
      in: header
      name: X-Amz-Credential
      required: false
      type: string
    X-Amz-Date:
      in: header
      name: X-Amz-Date
      required: false
      type: string
    X-Amz-Security-Token:
      in: header
      name: X-Amz-Security-Token
      required: false
      type: string
    X-Amz-Signature:
      in: header
      name: X-Amz-Signature
      required: false
      type: string
    X-Amz-SignedHeaders:
      in: header
      name: X-Amz-SignedHeaders
      required: false
      type: string
x-hasEquivalentPaths: true

