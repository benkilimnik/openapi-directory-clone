basePath: /
definitions:
  Emojis: {}
  Hashtags: {}
  Images: {}
  Instagram: {}
  Link_shortening: {}
host: api.ritekit.com
info:
  description: >-
    RiteKit API is based on REST principles.


    Authentication uses standard OAuth 2.0 process


    ##Getting started


    1. Sign up for [RiteKit](https://ritekit.com/)


    1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)


    1. Click "Create a token" button to get your **Client ID** and **Client
    secret**


    1. When you reach your free limit of calls per month, [upgrade to paid
    tiers](https://ritekit.com/developer/)


    ## Options for authorizing API Calls


    #### Using Client ID directly


    You can directly connect to our API using your **client ID** by sending it
    as a GET query parameter. This option is simple (no need for oAuth) but it
    should be used only in case the Client ID is not exposed publicly.


    GET 
    https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a
  title: RiteKit API
  version: 1.0.0
  x-apisguru-categories:
    - social
  x-logo:
    url: >-
      https://pbs.twimg.com/profile_images/781729376161366016/qdUFUsCN_400x400.jpg
  x-origin:
    - converter:
        url: 'https://github.com/mermade/oas-kit'
        version: 7.0.4
      format: apiBlueprint
      url: 'https://raw.githubusercontent.com/RiteKit/api-docs/master/apiary.apib'
      version: 1A
  x-providerName: ritekit.com
paths:
  /v1/emoji/auto-emojify:
    get:
      description: Returns text of the post with emoji added
      operationId: Auto-Emojify
      parameters:
        - description: Text of the post
          in: query
          name: text
          required: true
          type: string
          x-example: >-
            Why robots may soon steal all manufacturing jobs – but it’s not all
            bad news
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Auto-Emojify
      tags: []
  /v1/emoji/suggestions:
    get:
      description: Returns list of emoji suggestions for a given text of the post
      operationId: Emoji Suggestions
      parameters:
        - description: Text of the post
          in: query
          name: text
          required: true
          type: string
          x-example: >-
            Why robots may soon steal all manufacturing jobs – but it’s not all
            bad news
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Emoji Suggestions
      tags: []
  /v1/images/animate:
    get:
      description: Returns URL of an animated GIF.
      operationId: Animate Image
      parameters:
        - description: URL of the company
          in: query
          name: url
          required: true
          type: string
          x-example: 'https://jpeg.org/images/jpeg-home.jpg'
        - description: URL of the company
          in: query
          name: type
          required: true
          type: string
          x-example: glint
      produces:
        - image/gif
      responses:
        '200':
          description: OK
          headers: {}
      summary: Animate Image
      tags: []
  /v1/images/logo:
    get:
      description: >-
        Returns a company logo based on website domain. If the logo is not in
        our database yet, it will be extracted from the site on the fly. White
        logo background is automatically removed to make the logo look better on
        color backgrounds.


        Note: It is not possible to access our company logo API publicly without
        authentication. If you wish to do so, you have to create proxy on your
        own server that calls our API from the server side.
      operationId: Company Logo
      parameters:
        - description: URL of the company
          in: query
          name: domain
          required: true
          type: string
          x-example: google.com
      produces:
        - image/png
      responses:
        '200':
          description: OK
          headers: {}
      summary: Company Logo
      tags: []
  /v1/images/quote:
    get:
      description: >-
        Returns URL of an image created from text according to given style
        parameters
      operationId: Text to Image
      parameters:
        - description: Text of the quote
          in: query
          name: quote
          required: true
          type: string
          x-example: >-
            If you love life, don't waste time, for time is what life is made up
            of
        - description: Name of the author/source
          in: query
          name: author
          required: true
          type: string
          x-example: Bruce Lee
        - description: >-
            Font size for the quote (author font size is calculated
            automatically)
          in: query
          name: fontSize
          required: true
          type: integer
          x-example: '60'
        - description: Font-family used for quote text
          in: query
          name: quoteFont
          required: true
          type: string
          x-example: Lora
        - description: Font color of the quote text
          in: query
          name: quoteFontColor
          required: true
          type: string
          x-example: '#4f4f4f'
        - description: Font-family used for author name
          in: query
          name: authorFont
          required: true
          type: string
          x-example: Lato Black
        - description: Font color of the author
          in: query
          name: authorFontColor
          required: true
          type: string
          x-example: '#e5e5e5'
        - description: Enable highlight on quote text
          in: query
          name: enableHighlight
          required: true
          type: integer
          x-example: '1'
        - description: Color used for highlight
          in: query
          name: highlightColor
          required: true
          type: string
          x-example: '#f0ea66'
        - description: Background type (gradient/solid)
          in: query
          name: bgType
          required: true
          type: string
          x-example: gradient
        - description: Background color for solid background type
          in: query
          name: backgroundColor
          required: true
          type: string
          x-example: '#000000'
        - description: Type of gradient background (linear/radial)
          in: query
          name: gradientType
          required: true
          type: string
          x-example: linear
        - description: First color for gradient background type
          in: query
          name: gradientColor1
          required: true
          type: string
          x-example: '#1ee691'
        - description: Second color for gradient background type
          in: query
          name: gradientColor2
          required: true
          type: string
          x-example: '#1ddad6'
        - description: URL of the brand logo
          in: query
          name: brandLogo
          required: true
          type: string
          x-example: >-
            https://cdn.ritekit.com/assets/img/common/made-with-ritekit-white.png
        - description: 'Animation type: none, rays, glint, circle'
          in: query
          name: animation
          required: true
          type: string
          x-example: glint
        - description: showing/hiding quote mark
          in: query
          name: showQuoteMark
          required: false
          type: integer
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Text to Image
      tags: []
  /v1/link/cta:
    get:
      description: >-
        Returns list of available CTA for current user. Requires each user to
        authenticate with RiteKit
      operationId: List of CTAs
      parameters: []
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: List of CTAs
      tags: []
  /v1/link/short-link:
    get:
      description: Returns a shorten link with a given CTA.
      operationId: Shorten Link
      parameters:
        - description: URL
          in: query
          name: url
          required: true
          type: string
          x-example: 'https://ritekit.com'
        - description: cta id
          in: query
          name: cta
          required: true
          type: integer
          x-example: '6530'
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Shorten Link
      tags: []
  /v1/search/trending:
    get:
      description: Returns list of hashtags currently trending on Twitter
      operationId: Trending Hashtags
      parameters:
        - default: '1'
          description: >-
            Restrict results only to green hashtags. Hides overused (red)
            hashtags.
          in: query
          name: green
          required: false
          type: boolean
        - default: '1'
          description: Restrict results only to hashtags with latin characters
          in: query
          name: latin
          required: false
          type: boolean
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Trending Hashtags
      tags: []
  /v1/stats/auto-hashtag:
    get:
      description: Returns auto-hashtagged text of the post.
      operationId: Auto-Hashtag
      parameters:
        - description: Text of the post
          in: query
          name: post
          required: true
          type: string
          x-example: Is artificial intelligence the future of customer service?
        - default: 2
          description: Max number of hashtags.
          in: query
          name: maxHashtags
          required: false
          type: integer
        - default: auto
          description: 'Position of hashtags: end => at the end, auto => anywhere'
          in: query
          name: hashtagPosition
          required: false
          type: string
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Auto-Hashtag
      tags: []
  /v1/stats/hashtag-suggestions:
    get:
      description: >-
        Returns list of hashtag suggestions for a single-word topic or a shorter
        text up to 1000 characters. Takes into account both semantic relevancy
        and real-time hashtag popularity.
      operationId: Hashtag Suggestions
      parameters:
        - description: Topic
          in: query
          name: text
          required: true
          type: string
          x-example: seo
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Hashtag Suggestions
      tags: []
  '/v1/stats/history/{hashtag}':
    get:
      description: Returns historical stats for a given hashtag from the last 30 days
      operationId: Hashtag History
      parameters:
        - description: 'Hashtag without # mark'
          in: path
          name: hashtag
          required: true
          type: string
          x-example: job
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Hashtag History
      tags: []
  /v1/stats/multiple-hashtags:
    get:
      description: Returns real-time stats for up to 100 hashtags (updated hourly).
      operationId: Hashtag Stats
      parameters:
        - collectionFormat: csv
          description: 'Hashtag(s) without # mark'
          in: query
          items: {}
          name: tags
          required: true
          type: array
          x-example: 'jobs,hello'
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Hashtag Stats
      tags: []
  /v2/instagram/hashtags-cleaner:
    get:
      description: Remove banned hashtags before posting to Instagram
      operationId: Hashtags cleaner
      parameters:
        - description: post
          in: query
          name: post
          required: true
          type: string
          x-example: >-
            #instaphotography #instabeauty #instagirls #instanature #instagirl
            #photography #beauty #girls #nature #girl #sky #water #lady #ladies
            #woman #women #photograph #photographs #beauties #sunlight #sitting
            #waters #skies #sit #photographies
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: OK
          headers: {}
      summary: Hashtags cleaner
      tags: []
schemes:
  - https
swagger: '2.0'
tags: []
x-components: {}

