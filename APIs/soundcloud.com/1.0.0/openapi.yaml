basePath: /
definitions:
  Activities:
    description: User's activities.
    properties:
      collection:
        items:
          properties:
            created_at:
              description: Created timestamp.
              type: string
            origin:
              description: Origin.
              type: object
            type:
              description: Type of activity (track).
              type: string
          type: object
        type: array
      future_href:
        type: string
      next_href:
        type: string
    type: object
  AuthorizationCode:
    properties:
      authorization_code:
        description: Authorization code
        type: string
      client_id:
        description: Client ID
        type: string
      client_secret:
        description: Client secret
        type: string
      grant_type:
        enum:
          - authorization_code
          - client_credentials
        type: string
      redirect_uri:
        description: Redirect URI
        type: string
    type: object
  Comment:
    description: User's Comment
    properties:
      body:
        description: Comment body.
        type: string
      created_at:
        description: Created timestamp.
        type: string
      id:
        description: Identifier.
        type: integer
      kind:
        description: Kind (comment).
        type: string
      timestamp:
        description: Timestamp.
        type: string
      track_id:
        description: Track's identifier.
        type: integer
      uri:
        description: Comment's URL.
        type: string
      user:
        description: SoundCloud User object
        properties:
          avatar_url:
            description: URL to a JPEG image.
            type: string
          followers_count:
            description: number of followers.
            type: integer
          followings_count:
            description: number of followed users.
            type: integer
          id:
            description: unique identifier
            type: integer
          kind:
            description: kind of resource.
            type: string
          last_modified:
            description: last modified timestamp.
            type: string
          permalink:
            description: permalink of the resource.
            type: string
          permalink_url:
            description: URL to the SoundCloud.com page.
            type: string
          reposts_count:
            description: number of reposts from user
            type: integer
          uri:
            description: API resource URL.
            type: string
          username:
            description: username
            type: string
        type: object
      user_id:
        description: User's identifier.
        type: integer
    type: object
  Comments:
    properties:
      collection:
        items:
          $ref: '#/definitions/Comment'
        type: array
      next_href:
        type: string
        x-nullable: true
    type: object
  CommentsList:
    items:
      $ref: '#/definitions/Comment'
    type: array
    x-deprecated: true
  CompleteUser:
    description: SoundCloud Complete User object
    properties:
      avatar_url:
        description: URL to a JPEG image.
        type: string
      city:
        description: city.
        type: string
      country:
        description: country.
        type: string
      description:
        description: description.
        type: string
      discogs_name:
        description: discogs name.
        type: string
      first_name:
        description: first name.
        type: string
      followers_count:
        description: number of followers.
        type: integer
      followings_count:
        description: number of followed users.
        type: integer
      full_name:
        description: first and last name.
        type: string
      id:
        description: unique identifier
        type: integer
      kind:
        description: kind of resource.
        type: string
      last_modified:
        description: last modified timestamp.
        type: string
      last_name:
        description: last name.
        type: string
      locale:
        description: locale.
        type: string
      myspace_name:
        description: myspace name
        type: string
        x-deprecated: true
      permalink:
        description: permalink of the resource.
        type: string
      permalink_url:
        description: URL to the SoundCloud.com page.
        type: string
      plan:
        description: subscription plan of the user.
        type: string
      playlist_count:
        description: number of public playlists.
        type: integer
      primary_email_confirmed:
        description: boolean if email is confirmed.
        type: boolean
      private_playlists_count:
        description: number of private playlists.
        type: integer
      private_tracks_count:
        description: number of private tracks.
        type: integer
      public_favorites_count:
        description: number of favorited public tracks
        type: integer
      quota:
        description: user's upload quota
        properties:
          unlimited_upload_quota:
            description: unlimited upload quota.
            type: boolean
          upload_seconds_used:
            description: upload seconds used.
            type: integer
        type: object
      reposts_count:
        description: number of reposts from user
        type: integer
      subscriptions:
        description: a list subscriptions associated with the user
        items:
          anyOf:
            - description: subscription
              properties:
                product:
                  description: product
                  properties:
                    id:
                      description: subscription id instance.
                      type: string
                    name:
                      description: subscription name instance.
                      type: string
                  type: object
                recurring:
                  description: if the subscription is recurring or not
                  type: boolean
              type: object
          items: {}
          type: array
      track_count:
        description: number of public tracks.
        type: integer
      uri:
        description: API resource URL.
        type: string
      username:
        description: username
        type: string
      website:
        description: a URL to the website.
        type: string
      website_title:
        description: a custom title for the website.
        type: string
    type: object
  Connection:
    properties:
      created_at:
        description: Created timestamp.
        type: string
      display_name:
        description: Full Name.
        type: string
      id:
        description: Unique identifier
        type: integer
      kind:
        description: Kind of resource.
        type: string
      post_favorite:
        type: boolean
        x-deprecated: true
      post_publish:
        type: boolean
        x-deprecated: true
      service:
        description: Service.
        type: string
      type:
        description: Type.
        type: string
      uri:
        description: The external link URI.
        type: string
    type: object
  Connections:
    items:
      $ref: '#/definitions/Connection'
    type: array
  CreateUpdatePlaylistRequest:
    properties:
      playlist:
        properties:
          description:
            description: Description of the playlist
            type: string
          sharing:
            description: public or private
            enum:
              - public
              - private
            type: string
          title:
            description: Title of the playlist
            type: string
          tracks:
            description: List of tracks to add to playlist
            items:
              properties:
                id:
                  description: SoundCloud track id
                  type: string
              required:
                - id
              type: object
            type: array
        type: object
    type: object
  Error:
    properties:
      code:
        type: integer
      error:
        type: string
        x-deprecated: true
        x-nullable: true
      errors:
        items: {}
        type: array
        x-deprecated: true
      link:
        type: string
      message:
        type: string
      status:
        type: string
        x-deprecated: true
    type: object
  Found:
    properties:
      location:
        description: Location URL of the resource.
        type: string
      status:
        description: Status code.
        type: string
    type: object
  MetaUser:
    description: SoundCloud User object.
    properties:
      avatar_url:
        description: URL to a JPEG image
        type: string
      created_at:
        description: profile creation datetime
        format: date-time
        type: string
      id:
        description: unique identifier
        type: integer
      kind:
        description: kind of resource
        type: string
      last_modified:
        description: last modified datetime
        format: date-time
        type: string
      permalink:
        description: permalink of the resource
        type: string
      permalink_url:
        description: URL to the SoundCloud.com page
        type: string
      uri:
        description: API resource URL
        type: string
      username:
        description: username
        type: string
    type: object
    x-nullable: true
  MetaUsers:
    properties:
      collection:
        items:
          $ref: '#/definitions/MetaUser'
        type: array
      next_href:
        type: string
    type: object
  Password:
    properties:
      client_id:
        description: Client ID
        type: string
      client_secret:
        description: Client secret
        type: string
      grant_type:
        enum:
          - password
        type: string
      password:
        description: User password
        type: string
      redirect_uri:
        description: Redirect URI
        type: string
      user_name:
        description: User name
        type: string
    type: object
    x-deprecated: true
  Playlist:
    description: Soundcloud Playlist Object
    properties:
      artwork_url:
        description: URL to a JPEG image.
        type: string
      created_at:
        description: Created timestamp.
        type: string
      description:
        description: Playlist description.
        type: string
      downloadable:
        description: is downloadable.
        type: boolean
      duration:
        description: Playlist duration.
        type: integer
      ean:
        description: European Article Number.
        type: string
      embeddable_by:
        description: Embeddable by.
        type: string
      genre:
        description: Playlist genre.
        type: string
      id:
        description: Playlist identifier.
        type: integer
      kind:
        description: Type of Soundcloud object (playlist).
        type: string
      label:
        $ref: '#/definitions/MetaUser'
      label_id:
        description: Label user identifier.
        type: integer
      label_name:
        description: Label name.
        type: string
      last_modified:
        description: Last modified timestamp.
        type: string
      license:
        description: License.
        type: string
      likes_count:
        description: Count of playlist likes.
        type: integer
      permalink:
        description: Playlist permalink.
        type: string
      permalink_url:
        description: Playlist permalink URL.
        type: string
      playlist_type:
        description: Type of playlist.
        type: string
      purchase_title:
        description: Purchase title.
        type: string
      purchase_url:
        description: Purchase URL.
        type: string
      release:
        description: Release.
        type: string
      release_day:
        description: Day of release.
        type: integer
      release_month:
        description: Month of release.
        type: integer
      release_year:
        description: Year of release.
        type: integer
      sharing:
        description: Type of sharing (private/public).
        type: string
      streamable:
        description: Is streamable.
        type: boolean
      tag_list:
        description: Tags.
        type: string
      tags:
        description: Tags.
        type: string
        x-nullable: true
      title:
        description: Playlist title.
        type: string
      track_count:
        description: Count of tracks.
        type: integer
      tracks:
        description: List of tracks.
        items:
          $ref: '#/definitions/Track'
        type: array
      tracks_uri:
        description: tracks URI.
        type: string
        x-nullable: true
      type:
        description: Playlist type.
        type: string
      uri:
        description: Playlist URI.
        type: string
      user:
        $ref: '#/definitions/MetaUser'
      user_id:
        description: User identifier.
        type: integer
    type: object
  Playlists:
    properties:
      collection:
        items:
          $ref: '#/definitions/Playlist'
        type: array
      next_href:
        type: string
    type: object
  PlaylistsArray:
    items:
      $ref: '#/definitions/Playlist'
    type: array
    x-deprecated: true
  RefreshToken:
    properties:
      client_id:
        description: Client ID
        type: string
      client_secret:
        description: Client secret
        type: string
      grant_type:
        enum:
          - refresh_token
        type: string
      redirect_uri:
        description: Redirect URI
        type: string
      refresh_token:
        description: Refresh token
        type: string
    type: object
  Streams:
    properties:
      hls_mp3_128_url:
        type: string
      hls_opus_64_url:
        type: string
      http_mp3_128_url:
        type: string
      preview_mp3_128_url:
        type: string
    type: object
  TooManyRequests:
    allOf:
      - $ref: '#/definitions/Error'
      - properties:
          spam_warning_urn:
            type: string
        type: object
  Track:
    description: Soundcloud Track object.
    properties:
      access:
        description: |
          Level of access the user (logged in or anonymous) has to the track.
            * `playable` - user is allowed to listen to a full track.
            * `preview` - user is allowed to preview a track, meaning a snippet is available
            * `blocked` - user can only see the metadata of a track, no streaming is possible
        enum:
          - playable
          - preview
          - blocked
          - null
        type: string
        x-nullable: true
      artwork_url:
        description: URL to a JPEG image.
        type: string
      available_country_codes:
        description: List of countries where track is available.
        type: string
      bpm:
        description: Tempo.
        type: integer
      comment_count:
        description: Number of comments.
        type: integer
      commentable:
        description: Is commentable.
        type: boolean
      created_at:
        description: Created timestamp.
        type: string
      description:
        description: Track description.
        type: string
      download_count:
        description: NUmber of downloads.
        type: integer
      download_url:
        description: URL to download a track.
        type: string
      downloadable:
        description: Is downloadable.
        type: string
      duration:
        description: Track duration.
        type: integer
      embeddable_by:
        description: Embeddable by.
        type: string
        x-deprecated: true
      favoritings_count:
        description: Number of favoritings.
        type: integer
      genre:
        description: Genre
        type: string
      id:
        description: Track identifier.
        type: integer
      isrc:
        description: ISRC code.
        type: string
      key_signature:
        description: Key signature.
        type: string
      kind:
        description: Type of object (track).
        type: string
      label_name:
        description: Label user name.
        type: string
      license:
        description: License
        type: string
      permalink_url:
        description: Permalink URL.
        type: string
      playback_count:
        description: Number of plays.
        type: integer
      purchase_title:
        description: Purchase title.
        type: string
      purchase_url:
        description: Purchase URL.
        type: string
      release:
        description: Release.
        type: string
      release_day:
        description: Day of release.
        type: integer
      release_month:
        description: Month of release.
        type: integer
      release_year:
        description: Year of release.
        type: integer
      reposts_count:
        description: Number of reposts.
        type: integer
      secret_uri:
        description: Secret URL.
        type: string
      sharing:
        description: Type of sharing (public/private).
        type: string
      stream_url:
        description: URL to stream.
        type: string
      streamable:
        description: Is streamable.
        type: boolean
      tag_list:
        description: Tags.
        type: string
      title:
        description: Track title.
        type: string
      uri:
        description: Track URI.
        type: string
      user:
        $ref: '#/definitions/MetaUser'
        description: User who uploaded a track
      user_favorite:
        description: Is user's favourite.
        type: boolean
      user_playback_count:
        description: Number of plays by a user.
        type: integer
      waveform_url:
        description: Waveform URL.
        type: string
    type: object
  TrackDataRequest:
    properties:
      'track[artwork_data]':
        format: binary
        title: 'Only for uploading, for PRO users'
        type: string
      'track[asset_data]':
        format: binary
        title: Only for uploading
        type: string
      'track[commentable]':
        default: true
        type: boolean
      'track[description]':
        type: string
      'track[downloadable]':
        default: true
        type: boolean
      'track[embeddable_by]':
        description: 'who can embed this track "all", "me", or "none"'
        enum:
          - all
          - me
          - none
        type: string
      'track[genre]':
        type: string
      'track[isrc]':
        type: string
      'track[label_name]':
        type: string
      'track[license]':
        description: >-
          Possible values: no-rights-reserved, all-rights-reserved, cc-by,
          cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
        enum:
          - no-rights-reserved
          - all-rights-reserved
          - cc-by
          - cc-by-nc
          - cc-by-nd
          - cc-by-sa
          - cc-by-nc-nd
          - cc-by-nc-sa
        type: string
      'track[permalink]':
        type: string
      'track[purchase_url]':
        type: string
      'track[release]':
        type: string
      'track[release_date]':
        description: 'string, formatted as yyyy-mm-dd, representing release date'
        title: write only!
        type: string
      'track[sharing]':
        default: public
        enum:
          - public
          - private
        type: string
      'track[streamable]':
        default: true
        type: boolean
      'track[tag_list]':
        description: >-
          The tag_list property contains a list of tags separated by spaces.
          Multiword tags are quoted in double quotes. We also support machine
          tags that follow the pattern NAMESPACE:KEY=VALUE. For example:
          geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags
          are not revealed to the user on the track pages.
        type: string
      'track[title]':
        type: string
    type: object
  TrackMetadataRequest:
    properties:
      track:
        properties:
          commentable:
            default: true
            type: boolean
          description:
            type: string
          downloadable:
            default: true
            type: boolean
          embeddable_by:
            description: 'who can embed this track "all", "me", or "none"'
            enum:
              - all
              - me
              - none
            type: string
          genre:
            type: string
          isrc:
            type: string
          label_name:
            type: string
          license:
            description: >-
              Possible values: no-rights-reserved, all-rights-reserved, cc-by,
              cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
            enum:
              - no-rights-reserved
              - all-rights-reserved
              - cc-by
              - cc-by-nc
              - cc-by-nd
              - cc-by-sa
              - cc-by-nc-nd
              - cc-by-nc-sa
            type: string
          permalink:
            type: string
          purchase_url:
            type: string
          release:
            type: string
          release_date:
            description: 'string, formatted as yyyy-mm-dd, representing release date'
            title: write only!
            type: string
          sharing:
            default: public
            enum:
              - public
              - private
            type: string
          streamable:
            default: true
            type: boolean
          tag_list:
            description: >-
              The tag_list property contains a list of tags separated by spaces.
              Multiword tags are quoted in double quotes. We also support
              machine tags that follow the pattern NAMESPACE:KEY=VALUE. For
              example: geo:lat=43.555 camel:size=medium “machine:tag=with space”
              Machine tags are not revealed to the user on the track pages.
            type: string
          title:
            type: string
        type: object
    type: object
  Tracks:
    properties:
      collection:
        items:
          $ref: '#/definitions/Track'
        type: array
      next_href:
        type: string
    type: object
  TracksList:
    items:
      $ref: '#/definitions/Track'
    type: array
    x-deprecated: true
  User:
    description: SoundCloud User object
    properties:
      avatar_url:
        description: URL to a JPEG image
        type: string
      city:
        description: city
        type: string
      country:
        description: country
        type: string
      created_at:
        description: profile creation datetime
        format: date-time
        type: string
      description:
        description: description
        type: string
      discogs_name:
        description: discogs name
        type: string
      first_name:
        description: first name
        type: string
      followers_count:
        description: number of followers
        type: integer
      followings_count:
        description: number of followed users
        type: integer
      full_name:
        description: first and last name
        type: string
      id:
        description: unique identifier
        type: integer
      kind:
        description: kind of resource
        type: string
      last_modified:
        description: last modified datetime
        format: date-time
        type: string
      last_name:
        description: last name
        type: string
      myspace_name:
        description: myspace name
        type: string
        x-deprecated: true
      permalink:
        description: permalink of the resource
        type: string
      permalink_url:
        description: URL to the SoundCloud.com page
        type: string
      plan:
        description: subscription plan of the user
        type: string
      playlist_count:
        description: number of public playlists
        type: integer
      public_favorites_count:
        description: number of favorited public tracks
        type: integer
      reposts_count:
        description: number of reposts from user
        type: integer
      subscriptions:
        description: a list subscriptions associated with the user
        items:
          anyOf:
            - description: subscription
              properties:
                product:
                  description: product
                  properties:
                    id:
                      description: subscription id instance.
                      type: string
                    name:
                      description: subscription name instance.
                      type: string
                  type: object
                recurring:
                  description: if the subscription is recurring or not
                  type: boolean
              type: object
          items: {}
          type: array
        x-deprecated: true
      track_count:
        description: number of public tracks
        type: integer
      uri:
        description: API resource URL
        type: string
      username:
        description: username
        type: string
      website:
        description: a URL to the website
        type: string
      website_title:
        description: a custom title for the website
        type: string
    type: object
  Users:
    properties:
      collection:
        items:
          $ref: '#/definitions/User'
        type: array
      next_href:
        type: string
    type: object
  UsersList:
    items:
      description: SoundCloud User object
      properties:
        avatar_url:
          description: URL to a JPEG image
          type: string
        city:
          description: city
          type: string
        country:
          description: country
          type: string
        description:
          description: description
          type: string
        discogs_name:
          description: discogs name
          type: string
        first_name:
          description: first name
          type: string
        followers_count:
          description: number of followers
          type: integer
        followings_count:
          description: number of followed users
          type: integer
        full_name:
          description: first and last name
          type: string
        id:
          description: unique identifier
          type: integer
        kind:
          description: kind of resource
          type: string
        last_modified:
          description: last modified datetime
          format: date-time
          type: string
        last_name:
          description: last name
          type: string
        myspace_name:
          description: myspace name
          type: string
          x-deprecated: true
        permalink:
          description: permalink of the resource
          type: string
        permalink_url:
          description: URL to the SoundCloud.com page
          type: string
        plan:
          description: subscription plan of the user
          type: string
        playlist_count:
          description: number of public playlists
          type: integer
        public_favorites_count:
          description: number of favorited public tracks
          type: integer
        reposts_count:
          description: number of reposts from user
          type: integer
        subscriptions:
          description: a list subscriptions associated with the user
          items:
            anyOf:
              - description: subscription
                properties:
                  product:
                    description: product
                    properties:
                      id:
                        description: subscription id instance.
                        type: string
                      name:
                        description: subscription name instance.
                        type: string
                    type: object
                  recurring:
                    description: if the subscription is recurring or not
                    type: boolean
                type: object
            items: {}
            type: array
          x-deprecated: true
        track_count:
          description: number of public tracks
          type: integer
        uri:
          description: API resource URL
          type: string
        username:
          description: username
          type: string
        website:
          description: a URL to the website
          type: string
        website_title:
          description: a custom title for the website
          type: string
      type: object
    type: array
    x-deprecated: true
  WebProfiles:
    description: User's links added to their profile
    items:
      properties:
        created_at:
          description: Timestamp of when the link was added to the profile.
          type: string
        id:
          description: Id
          type: integer
        kind:
          description: Kind
          type: string
        service:
          description: Service or platform
          type: string
        title:
          description: Link's title
          type: string
        url:
          description: URL of the external link
          type: string
        username:
          description: Username extracted from the external link
          type: string
      type: object
    type: array
host: api.soundcloud.com
info:
  contact:
    name: API issue tracker
    url: 'https://github.com/soundcloud/api'
  termsOfService: 'https://developers.soundcloud.com/docs/api/terms-of-use'
  title: SoundCloud Public API Specification
  version: 1.0.0
  x-apisguru-categories:
    - media
  x-logo:
    url: 'https://a-v2.sndcdn.com/assets/images/sc-icons/ios-a62dfc8fe7.png'
  x-origin:
    - format: openapi
      url: >-
        https://gist.githubusercontent.com/MikeRalphson/a9eb3040cb611121b568844958564849/raw/d0996b827b9eb2ae4fa946b9aacf02b03dc3d933/openapi.json
      version: '3.0'
  x-providerName: soundcloud.com
paths:
  /connect:
    get:
      description: >
        <h3>Security Advice</h3>

        * Using the [implicit OAuth authorization
        flow](https://tools.ietf.org/html/draft-ietf-oauth-security-topics-16#section-2.1.2)
        (`response_type=token`)  is **not recommended**. It can suffer from
        access token leakage and access token replay attacks. Use
        `response_type=code` instead.

        * Use the `state` parameter for [CSRF
        protection](https://tools.ietf.org/html/draft-ietf-oauth-security-topics-16#section-4.7).
        Pass a sufficient  random nonce here and verify this nonce again after
        retrieving the token.
      parameters:
        - description: The client id belonging to your application
          in: query
          name: client_id
          required: true
          type: string
          x-example: some client
        - description: The redirect uri you have configured for your application
          in: query
          name: redirect_uri
          required: true
          type: string
          x-example: 'https://soundcloud.com'
        - description: It's recommended to use "code" here
          enum:
            - code
            - token
            - code_and_token
          in: query
          name: response_type
          required: true
          type: string
          x-example: code
        - description: Scope
          in: query
          name: scope
          required: true
          type: string
          x-example: default
        - description: >-
            Any value included here will be appended to the redirect URI. Use
            this for CSRF protection.
          in: query
          name: state
          required: false
          type: string
          x-example: encrypted_session_info
      produces:
        - application/json; charset=utf-8
      responses:
        '302':
          description: Found
          schema:
            type: string
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: >-
        The OAuth2 authorization endpoint. Your app redirects a user to this
        endpoint, allowing them to delegate access to their account.
      tags:
        - oauth
  '/likes/playlists/{playlist_id}':
    delete:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1212781357
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Unlikes a playlist.
      tags:
        - likes
    post:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1212781357
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '201':
          description: Created
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: Too Many Requests
          schema:
            $ref: '#/definitions/TooManyRequests'
      security:
        - AuthHeader: []
      summary: Likes a playlist.
      tags:
        - likes
  '/likes/tracks/{track_id}':
    delete:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 1015448728
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Unlikes a track.
      tags:
        - likes
    post:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 1015448728
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: Too Many Requests
          schema:
            $ref: '#/definitions/TooManyRequests'
      security:
        - AuthHeader: []
      summary: Likes a track.
      tags:
        - likes
  /me:
    get:
      parameters: []
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompleteUser'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns the authenticated user’s information.
      tags:
        - me
  /me/activities:
    get:
      parameters:
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Activities'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns the authenticated user's activities.
      tags:
        - me
  /me/activities/all/own:
    get:
      parameters:
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Activities'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Recent the authenticated user's activities.
      tags:
        - me
  /me/activities/tracks:
    get:
      parameters:
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Activities'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns the authenticated user's recent track related activities.
      tags:
        - me
  /me/connections:
    get:
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Connections'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns a list of the authenticated user's connected social accounts.
      tags:
        - me
  '/me/connections/{connection_id}':
    get:
      parameters:
        - description: SoundCloud connection id
          in: path
          name: connection_id
          required: true
          type: integer
          x-example: 123456
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Connection'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns the authenticated user's connected social account.
      tags:
        - me
  /me/favorites/ids:
    get:
      deprecated: true
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      responses:
        '200':
          description: Success
        '404':
          description: The user could not be found
      security:
        - AuthHeader: []
      summary: >-
        Returns user’s favorites ids. (use /me/likes/tracks instead to fetch the
        authenticated user's likes)
      tags:
        - me
  /me/followers:
    get:
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns a list of users who are following the authenticated user.
      tags:
        - me
  '/me/followers/{follower_id}':
    get:
      deprecated: true
      parameters:
        - description: SoundCloud User id to denote a Follower
          in: path
          name: follower_id
          required: true
          type: integer
          x-example: 743372812
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: >-
        Returns a user who is following the authenticated user. (use
        /users/{user_id} instead, to fetch the user details)
      tags:
        - me
  /me/followings:
    get:
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns a list of users who are followed by the authenticated user.
      tags:
        - me
  /me/followings/tracks:
    get:
      parameters:
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TracksList'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: >-
        Returns a list of recent tracks from users followed by the authenticated
        user.
      tags:
        - me
  '/me/followings/{user_id}':
    delete:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 743372812
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Deletes a user who is followed by the authenticated user.
      tags:
        - me
    get:
      deprecated: true
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: >-
        Returns a user who is followed by the authenticated user. (use
        /users/{user_id} instead, to fetch the user details)
      tags:
        - me
    put:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 743372812
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '201':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Follows a user.
      tags:
        - me
  /me/likes/tracks:
    get:
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns a list of favorited or liked tracks of the authenticated user.
      tags:
        - me
  /me/playlists:
    get:
      description: 'Returns playlist info, playlist tracks and tracks owner info.'
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PlaylistsArray'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns user’s playlists (sets).
      tags:
        - me
  '/me/playlists/{playlist_id}':
    get:
      deprecated: true
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1212781357
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Playlist'
      security:
        - AuthHeader: []
      summary: >-
        Returns playlist. (use /playlists/{playlist_id} instead, to fetch the
        playlist details)
      tags:
        - me
  /me/tracks:
    get:
      parameters:
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Returns a list of user's tracks.
      tags:
        - me
  '/me/tracks/{track_id}':
    get:
      deprecated: true
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Track'
      security:
        - AuthHeader: []
      summary: >-
        Returns a specified track. (use /tracks/{track_id} instead, to fetch the
        track details)
      tags:
        - me
  /oauth2/token:
    post:
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: body
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: >-
        This endpoint accepts POST requests and is used to provision access
        tokens once a user has authorized your application.
      tags:
        - oauth
  /playlists:
    get:
      parameters:
        - description: search
          in: query
          name: q
          required: true
          type: string
          x-example: hello
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Performs a playlist search based on a query
      tags:
        - search
    post:
      consumes:
        - application/json
      parameters:
        - description: Create Playlist request
          in: body
          name: body
          schema:
            $ref: '#/definitions/CreateUpdatePlaylistRequest'
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '201':
          description: Success
          schema:
            description: Soundcloud Playlist Object
            properties:
              artwork_url:
                description: URL to a JPEG image.
                type: string
              created_at:
                description: Created timestamp.
                type: string
              description:
                description: Playlist description.
                type: string
              downloadable:
                description: is downloadable.
                type: boolean
              duration:
                description: Playlist duration.
                type: integer
              ean:
                description: European Article Number.
                type: string
              embeddable_by:
                description: Embeddable by.
                type: string
              genre:
                description: Playlist genre.
                type: string
              id:
                description: Playlist identifier.
                type: integer
              kind:
                description: Type of Soundcloud object (playlist).
                type: string
              label_id:
                description: Label user identifier.
                type: integer
              label_name:
                description: Label name.
                type: string
              last_modified:
                description: Last modified timestamp.
                type: string
              license:
                description: License.
                type: string
              permalink:
                description: Playlist permalink.
                type: string
              permalink_url:
                description: Playlist permalink URL.
                type: string
              playlist_type:
                description: Type of playlist.
                type: string
              purchase_title:
                description: Purchase title.
                type: string
              purchase_url:
                description: Purchase URL.
                type: string
              release:
                description: Release.
                type: string
              release_day:
                description: Day of release.
                type: integer
              release_month:
                description: Month of release.
                type: integer
              release_year:
                description: Year of release.
                type: integer
              sharing:
                description: Type of sharing (private/public).
                type: string
              streamable:
                description: Is streamable.
                type: boolean
              tag_list:
                description: Tags.
                type: string
              title:
                description: Playlist title.
                type: string
              track_count:
                description: Count of tracks.
                type: integer
              tracks:
                description: List of tracks.
                items:
                  description: Soundcloud Track object.
                  properties:
                    artwork_url:
                      description: URL to a JPEG image.
                      type: string
                    bpm:
                      description: Tempo.
                      type: integer
                    comment_count:
                      description: Number of comments.
                      type: integer
                    commentable:
                      description: Is commentable.
                      type: boolean
                    created_at:
                      description: Created timestamp.
                      type: string
                    description:
                      description: Track description.
                      type: string
                    download_count:
                      description: NUmber of downloads.
                      type: integer
                    downloadable:
                      description: Is downloadable.
                      type: string
                    duration:
                      description: Track duration.
                      type: integer
                    embeddable_by:
                      description: Embeddable by.
                      type: string
                      x-deprecated: true
                    favoritings_count:
                      description: Number of favoritings.
                      type: integer
                    genre:
                      description: Genre
                      type: string
                    id:
                      description: Track identifier.
                      type: integer
                    isrc:
                      description: ISRC code.
                      type: string
                    key_signature:
                      description: Key signature.
                      type: string
                    kind:
                      description: Type of object (track).
                      type: string
                    label_name:
                      description: Label user name.
                      type: string
                    license:
                      description: License
                      type: string
                    permalink_url:
                      description: Permalink URL.
                      type: string
                    playback_count:
                      description: Number of plays.
                      type: integer
                    purchase_title:
                      description: Purchase title.
                      type: string
                    purchase_url:
                      description: Purchase URL.
                      type: string
                    release:
                      description: Release.
                      type: string
                    release_day:
                      description: Day of release.
                      type: integer
                    release_month:
                      description: Month of release.
                      type: integer
                    release_year:
                      description: Year of release.
                      type: integer
                    sharing:
                      description: Type of sharing (public/private).
                      type: string
                    stream_url:
                      description: URL to stream.
                      type: string
                    streamable:
                      description: Is streamable.
                      type: boolean
                    tag_list:
                      description: Tags.
                      type: string
                    title:
                      description: Track title.
                      type: string
                    uri:
                      description: Track URI.
                      type: string
                    user:
                      $ref: '#/definitions/MetaUser'
                      description: User who uploaded a track
                    user_favorite:
                      description: Is user's favourite.
                      type: boolean
                    user_playback_count:
                      description: Number of plays by a user.
                      type: integer
                    waveform_url:
                      description: Waveform URL.
                      type: string
                  type: object
                type: array
              type:
                description: Playlist type.
                type: string
              uri:
                description: Playlist URI.
                type: string
              user:
                $ref: '#/definitions/MetaUser'
              user_id:
                description: User identifier.
                type: integer
            type: object
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Creates a playlist.
      tags:
        - playlists
  '/playlists/{playlist_id}':
    delete:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 10
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Deletes a playlist.
      tags:
        - playlists
    get:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1212781357
        - description: A secret token to fetch private playlists/tracks
          in: query
          name: secret_token
          required: false
          type: string
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Playlist'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a playlist.
      tags:
        - playlists
    put:
      consumes:
        - application/json
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 10
        - description: Playlist payload
          in: body
          name: body
          schema:
            $ref: '#/definitions/CreateUpdatePlaylistRequest'
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            description: Soundcloud Playlist Object
            properties:
              artwork_url:
                description: URL to a JPEG image.
                type: string
              created_at:
                description: Created timestamp.
                type: string
              description:
                description: Playlist description.
                type: string
              downloadable:
                description: is downloadable.
                type: boolean
              duration:
                description: Playlist duration.
                type: integer
              ean:
                description: European Article Number.
                type: string
              embeddable_by:
                description: Embeddable by.
                type: string
              genre:
                description: Playlist genre.
                type: string
              id:
                description: Playlist identifier.
                type: integer
              kind:
                description: Type of Soundcloud object (playlist).
                type: string
              label_id:
                description: Label user identifier.
                type: integer
              label_name:
                description: Label name.
                type: string
              last_modified:
                description: Last modified timestamp.
                type: string
              license:
                description: License.
                type: string
              permalink:
                description: Playlist permalink.
                type: string
              permalink_url:
                description: Playlist permalink URL.
                type: string
              playlist_type:
                description: Type of playlist.
                type: string
              purchase_title:
                description: Purchase title.
                type: string
              purchase_url:
                description: Purchase URL.
                type: string
              release:
                description: Release.
                type: string
              release_day:
                description: Day of release.
                type: integer
              release_month:
                description: Month of release.
                type: integer
              release_year:
                description: Year of release.
                type: integer
              sharing:
                description: Type of sharing (private/public).
                type: string
              streamable:
                description: Is streamable.
                type: boolean
              tag_list:
                description: Tags.
                type: string
              title:
                description: Playlist title.
                type: string
              track_count:
                description: Count of tracks.
                type: integer
              tracks:
                description: List of tracks.
                items:
                  description: Soundcloud Track object.
                  properties:
                    artwork_url:
                      description: URL to a JPEG image.
                      type: string
                    bpm:
                      description: Tempo.
                      type: integer
                    comment_count:
                      description: Number of comments.
                      type: integer
                    commentable:
                      description: Is commentable.
                      type: boolean
                    created_at:
                      description: Created timestamp.
                      type: string
                    description:
                      description: Track description.
                      type: string
                    download_count:
                      description: NUmber of downloads.
                      type: integer
                    downloadable:
                      description: Is downloadable.
                      type: string
                    duration:
                      description: Track duration.
                      type: integer
                    embeddable_by:
                      description: Embeddable by.
                      type: string
                      x-deprecated: true
                    favoritings_count:
                      description: Number of favoritings.
                      type: integer
                    genre:
                      description: Genre
                      type: string
                    id:
                      description: Track identifier.
                      type: integer
                    isrc:
                      description: ISRC code.
                      type: string
                    key_signature:
                      description: Key signature.
                      type: string
                    kind:
                      description: Type of object (track).
                      type: string
                    label_name:
                      description: Label user name.
                      type: string
                    license:
                      description: License
                      type: string
                    permalink_url:
                      description: Permalink URL.
                      type: string
                    playback_count:
                      description: Number of plays.
                      type: integer
                    purchase_title:
                      description: Purchase title.
                      type: string
                    purchase_url:
                      description: Purchase URL.
                      type: string
                    release:
                      description: Release.
                      type: string
                    release_day:
                      description: Day of release.
                      type: integer
                    release_month:
                      description: Month of release.
                      type: integer
                    release_year:
                      description: Year of release.
                      type: integer
                    sharing:
                      description: Type of sharing (public/private).
                      type: string
                    stream_url:
                      description: URL to stream.
                      type: string
                    streamable:
                      description: Is streamable.
                      type: boolean
                    tag_list:
                      description: Tags.
                      type: string
                    title:
                      description: Track title.
                      type: string
                    uri:
                      description: Track URI.
                      type: string
                    user:
                      $ref: '#/definitions/MetaUser'
                      description: User who uploaded a track
                    user_favorite:
                      description: Is user's favourite.
                      type: boolean
                    user_playback_count:
                      description: Number of plays by a user.
                      type: integer
                    waveform_url:
                      description: Waveform URL.
                      type: string
                  type: object
                type: array
              type:
                description: Playlist type.
                type: string
              uri:
                description: Playlist URI.
                type: string
              user:
                $ref: '#/definitions/MetaUser'
              user_id:
                description: User identifier.
                type: integer
            type: object
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Updates a playlist.
      tags:
        - playlists
  '/playlists/{playlist_id}/reposters':
    get:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1212781357
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MetaUsers'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns a collection of playlist's reposters.
      tags:
        - playlists
  '/playlists/{playlist_id}/tracks':
    get:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1212781357
        - description: A secret token to fetch private playlists/tracks
          in: query
          name: secret_token
          required: false
          type: string
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns tracks under a playlist.
      tags:
        - playlists
  '/reposts/playlists/{playlist_id}':
    delete:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1205584273
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Removes a repost on a playlist as the authenticated user
      tags:
        - reposts
    post:
      parameters:
        - description: SoundCloud playlist id
          in: path
          name: playlist_id
          required: true
          type: integer
          x-example: 1205584273
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Reposts a playlist as the authenticated user
      tags:
        - reposts
  '/reposts/tracks/{track_id}':
    delete:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 1015448728
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Removes a repost on a track as the authenticated user
      tags:
        - reposts
    post:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 1015448728
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Reposts a track as the authenticated user
      tags:
        - reposts
  /resolve:
    get:
      parameters:
        - description: SoundCloud URL
          in: query
          name: url
          required: true
          type: string
          x-example: 'https://soundcloud.com/user-434241656'
      produces:
        - application/json; charset=utf-8
      responses:
        '302':
          description: Found
          schema:
            $ref: '#/definitions/Found'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Resolves soundcloud.com URLs to Resource URLs to use with the API.
      tags:
        - miscellaneous
  /tracks:
    get:
      parameters:
        - description: search
          in: query
          name: q
          required: true
          type: string
          x-example: hello
        - description: A comma separated list of track ids to filter on
          in: query
          name: ids
          required: false
          type: string
          x-example: '1,2,3'
        - description: A comma separated list of genres
          in: query
          name: genres
          required: false
          type: string
          x-example: 'Pop,House'
        - description: A comma separated list of tags
          in: query
          name: tags
          required: false
          type: string
          x-example: test
        - description: 'Return tracks with a specified bpm[from], bpm[to]'
          in: query
          name: bpm
          required: false
          type: object
        - description: Return tracks within a specified duration range
          in: query
          name: duration
          required: false
          type: object
        - description: >-
            (yyyy-mm-dd hh:mm:ss) return tracks created within the specified
            dates
          in: query
          name: created_at
          required: false
          type: object
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error
      security:
        - AuthHeader: []
          ClientId: []
      summary: Performs a track search based on a query
      tags:
        - search
    post:
      consumes:
        - multipart/form-data
        - multipart/x-www-form-urlencoded
      parameters:
        - format: binary
          in: formData
          name: 'track[artwork_data]'
          type: string
        - format: binary
          in: formData
          name: 'track[asset_data]'
          type: string
        - default: true
          in: formData
          name: 'track[commentable]'
          type: boolean
        - in: formData
          name: 'track[description]'
          type: string
        - default: true
          in: formData
          name: 'track[downloadable]'
          type: boolean
        - description: 'who can embed this track "all", "me", or "none"'
          enum:
            - all
            - me
            - none
          in: formData
          name: 'track[embeddable_by]'
          type: string
        - in: formData
          name: 'track[genre]'
          type: string
        - in: formData
          name: 'track[isrc]'
          type: string
        - in: formData
          name: 'track[label_name]'
          type: string
        - description: >-
            Possible values: no-rights-reserved, all-rights-reserved, cc-by,
            cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
          enum:
            - no-rights-reserved
            - all-rights-reserved
            - cc-by
            - cc-by-nc
            - cc-by-nd
            - cc-by-sa
            - cc-by-nc-nd
            - cc-by-nc-sa
          in: formData
          name: 'track[license]'
          type: string
        - in: formData
          name: 'track[permalink]'
          type: string
        - in: formData
          name: 'track[purchase_url]'
          type: string
        - in: formData
          name: 'track[release]'
          type: string
        - description: 'string, formatted as yyyy-mm-dd, representing release date'
          in: formData
          name: 'track[release_date]'
          type: string
        - default: public
          enum:
            - public
            - private
          in: formData
          name: 'track[sharing]'
          type: string
        - default: true
          in: formData
          name: 'track[streamable]'
          type: boolean
        - description: >-
            The tag_list property contains a list of tags separated by spaces.
            Multiword tags are quoted in double quotes. We also support machine
            tags that follow the pattern NAMESPACE:KEY=VALUE. For example:
            geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine
            tags are not revealed to the user on the track pages.
          in: formData
          name: 'track[tag_list]'
          type: string
        - in: formData
          name: 'track[title]'
          type: string
      produces:
        - application/json; charset=utf-8
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Track'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Uploads a new track.
      tags:
        - tracks
  '/tracks/{track_id}':
    delete:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
      produces:
        - application/json
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Deletes a track.
      tags:
        - tracks
    get:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - description: A secret token to fetch private playlists/tracks
          in: query
          name: secret_token
          required: false
          type: string
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Track'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns a track.
      tags:
        - tracks
    put:
      consumes:
        - application/json
        - multipart/form-data
        - multipart/x-www-form-urlencoded
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - description: Track payload
          in: body
          name: body
          schema:
            $ref: '#/definitions/TrackMetadataRequest'
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Track'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
      summary: Updates a track's information.
      tags:
        - tracks
  '/tracks/{track_id}/comments':
    get:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns the comments posted on the track(track_id).
      tags:
        - tracks
    post:
      consumes:
        - application/json; charset=utf-8
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - description: |
            Body of a comment
          in: body
          name: body
          required: true
          schema:
            properties:
              comment:
                properties:
                  body:
                    description: Comment's content
                    example: test comment
                    type: string
                  timestamp:
                    description: >-
                      Timestamp of a comment. String or float representation is
                      supported
                required:
                  - body
                type: object
            type: object
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Comment'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: Too Many Requests
          schema:
            $ref: '#/definitions/TooManyRequests'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns the newly created comment on success
      tags:
        - tracks
  '/tracks/{track_id}/favoriters':
    get:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UsersList'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns a list of users who have favorited or liked the track.
      tags:
        - tracks
  '/tracks/{track_id}/related':
    get:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns all related tracks of track on SoundCloud.
      tags:
        - tracks
  '/tracks/{track_id}/reposters':
    get:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MetaUsers'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns a collection of track's reposters.
      tags:
        - tracks
  '/tracks/{track_id}/streams':
    get:
      parameters:
        - description: SoundCloud Track id
          in: path
          name: track_id
          required: true
          type: integer
          x-example: 308946187
        - description: A secret token to fetch private playlists/tracks
          in: query
          name: secret_token
          required: false
          type: string
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Streams'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - ClientId: []
      summary: Returns a track's streamable URLs
      tags:
        - tracks
  /users:
    get:
      parameters:
        - description: search
          in: query
          name: q
          required: true
          type: string
          x-example: hello
        - description: A comma separated list of track ids to filter on
          in: query
          name: ids
          required: false
          type: string
          x-example: '1,2,3'
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Performs a user search based on a query
      tags:
        - search
  '/users/{user_id}':
    get:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompleteUser'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a user.
      tags:
        - users
  '/users/{user_id}/comments':
    get:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - default: 0
          deprecated: true
          description: >-
            Offset of first result. Deprecated, use `linked_partitioning`
            instead.
          in: query
          name: offset
          required: false
          type: integer
          x-example: 0
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CommentsList'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a list of user's comments.
      tags:
        - users
  '/users/{user_id}/favorites':
    get:
      deprecated: true
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: >-
        Returns a list of user's favorited or liked tracks. (use
        /users/:userId/likes/tracks instead, to fetch a user's likes)
      tags:
        - users
  '/users/{user_id}/followers':
    get:
      description: Returns a list of users that follows (user_id).
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a list of user’s followers.
      tags:
        - users
  '/users/{user_id}/followings':
    get:
      description: Returns list of users that (user_id) follows.
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a list of user’s followings.
      tags:
        - users
  '/users/{user_id}/followings/{following_id}':
    get:
      deprecated: true
      description: Returns (following_id) that is followed by (user_id).
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - description: SoundCloud User id to denote a Following of a user
          in: path
          name: following_id
          required: true
          type: integer
          x-example: 25219981
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompleteUser'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: >-
        Returns a user's following. (use /users/{user_id} instead, to fetch the
        user details)
      tags:
        - users
  '/users/{user_id}/likes/tracks':
    get:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a list of user's liked tracks.
      tags:
        - users
  '/users/{user_id}/playlists':
    get:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a list of user's playlists.
      tags:
        - users
  '/users/{user_id}/tracks':
    get:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - collectionFormat: multi
          default: 'playable,preview'
          description: >
            Filters content by level of access the user (logged in or anonymous)
            has to the track. The result list will include only tracks with the
            specified access. Include all options if you'd like to see all
            possible tracks. See `Track#access` schema for more details.
          in: query
          items:
            enum:
              - playable
              - preview
              - blocked
            type: string
          name: access
          type: array
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
        - description: >-
            Returns paginated collection of items (recommended, returning a list
            without pagination is deprecated and should not be used)
          in: query
          name: linked_partitioning
          required: false
          type: boolean
          x-example: true
      produces:
        - application/json; charset=utf-8
      responses:
        '200':
          description: Success
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: Returns a list of user's tracks.
      tags:
        - users
  '/users/{user_id}/web-profiles':
    get:
      parameters:
        - description: SoundCloud User id
          in: path
          name: user_id
          required: true
          type: integer
          x-example: 948745750
        - default: 50
          description: Number of results to return in the collection.
          in: query
          maximum: 200
          minimum: 1
          name: limit
          required: false
          type: integer
          x-example: 2
      produces:
        - application/json; charset=utf-8
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/WebProfiles'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security:
        - AuthHeader: []
          ClientId: []
      summary: >-
        Returns list of user's links added to their profile (website, facebook,
        instagram).
      tags:
        - users
schemes:
  - https
securityDefinitions:
  AuthHeader:
    description: 'The string "OAuth" followed by the user’s token: OAuth ACCESS_TOKEN'
    in: header
    name: Authorization
    type: apiKey
  ClientId:
    description: >-
      Your product key. This is not the same as the API key used for most
      requests
    in: query
    name: client_id
    type: apiKey
swagger: '2.0'
tags:
  - description: Authentication and Authorization Endpoints.
    name: oauth
  - description: Own User Endpoints.
    name: me
  - description: Search Endpoints.
    name: search
  - description: Playlists Endpoints.
    name: playlists
  - description: Tracks Endpoints.
    name: tracks
  - description: SoundCloud Users Endpoints.
    name: users
  - description: Liking Tracks & Playlists.
    name: likes
  - description: Reposting Tracks & Playlists.
    name: reposts
  - description: Miscellaneous Endpoints.
    name: miscellaneous
x-components:
  examples:
    Accepted:
      value:
        status: 202 - Accepted
    Activities:
      value:
        collection:
          - created_at: '2020/10/12 12:02:44 +0000'
            origin:
              allOf:
                - $ref: '#/x-components/examples/Track/value'
            type: 'track:repost'
          - created_at: '2020/10/12 12:02:44 +0000'
            origin:
              allOf:
                - $ref: '#/x-components/examples/Playlist/value'
            type: playlist
        future_href: 'https://api.soundcloud.com/me/activities?limit=10&cursor=000001'
        next_href: 'https://api.soundcloud.com/me/activities?limit=10&cursor=00000'
    AuthorizationCode:
      value:
        client_id: CLIENT_ID
        client_secret: CLIENT_SECRET
        code: 1-123456-12345678-FAbcfbe9ir2wdj0
        grant_type: authorization_code
        redirect_uri: 'https://mywebsite/auth/soundcloud'
    BadRequest:
      value:
        code: 400
        link: 'https://developers.soundcloud.com/docs/api/explorer/open-api'
        message: 'Detailed message of errors, when available'
    ClientCredentials:
      value:
        client_id: CLIENT_ID
        client_secret: CLIENT_SECRET
        grant_type: client_credentials
    Comment:
      value:
        body: comment body
        created_at: '2007/09/11 15:40:24 +0000'
        id: 1234
        kind: comment
        timestamp: 4960
        track_id: 123456
        uri: 'https://api.soundcloud.com/comments/1234'
        user:
          avatar_url: 'https://i1.sndcdn.com/avatars-large.jpg'
          followers_count: 138
          followings_count: 172
          id: 12345
          kind: user
          last_modified: '2017/04/10 14:48:03 +0000'
          permalink: permalink
          permalink_url: 'https://soundcloud.com/permalink'
          public_favorites_count: 5
          reposts_count: 0
          uri: 'https://api.soundcloud.com/users/12345'
          username: user name
        user_id: 12345
    Comments:
      value:
        collection:
          $ref: '#/x-components/examples/Comment/value'
        next_href: >-
          https://api.soundcloud.com/collection?client_id=client_id&page_size=10&cursor=1234567
    CommentsList:
      description: 'Deprecated, use Comments instead.'
      value:
        $ref: '#/x-components/examples/Comment/value'
    CompleteUser:
      value:
        avatar_url: 'https://i1.sndcdn.com/avatars.jpg'
        city: City
        country: Country
        description: null
        discogs_name: null
        first_name: First_name
        followers_count: 0
        followings_count: 0
        full_name: Full Name
        id: 12345
        kind: user
        last_modified: '2020/01/03 12:08:25 +0000'
        last_name: Last_name
        locale: en
        myspace_name: null
        permalink: permalink
        permalink_url: 'https://soundcloud.com/permalink'
        plan: Free
        playlist_count: 3
        primary_email_confirmed: true
        private_playlists_count: 0
        private_tracks_count: 0
        public_favorites_count: 20
        quota:
          unlimited_upload_quota: false
          upload_seconds_left: 10800
          upload_seconds_used: 0
        reposts_count: 0
        subscriptions:
          - product:
              id: some-id
              name: some.name
        track_count: 0
        upload_seconds_left: 10800
        uri: 'https://api.soundcloud.com/users/1234'
        username: some.user
        website: null
        website_title: null
    Connection:
      value:
        created_at: '1995/07/24 08:55:02 +0000'
        display_name: Full Name
        id: 123456
        kind: connection
        post_favorite: true
        post_publish: true
        service: google_plus
        type: google_plus
        uri: 'https://api.soundcloud.com/connections/123456'
    Connections:
      value:
        $ref: '#/x-components/examples/Connection/value'
    CreateUpdatePlaylistRequest:
      value:
        playlist:
          description: Playlist for test purposes
          sharing: private
          title: Test Auto-created Playlist
          tracks:
            - id: 219787221
            - id: 783019264
            - id: 870073492
    Created:
      value:
        status: 201 - Created
    ErrorInvalidGrant:
      value:
        code: 400
        link: 'https://developers.soundcloud.com/docs/api/guide#authentication'
        message: invalid_grant
    ErrorUnsupportedGrant:
      value:
        code: 400
        link: 'https://developers.soundcloud.com/docs/api/guide#authentication'
        message: unsupported_grant
    ExpiringToken:
      value:
        access_token: some string
        expires_in: 21599
        refresh_token: some string
        scope: ''
    Forbidden:
      value:
        code: 403
        link: 'https://developers.soundcloud.com/docs/api/explorer/open-api'
        message: 'Detailed message of errors, when available'
    MetaUsers:
      value:
        collection:
          $ref: '#/x-components/examples/UserOf/value'
        next_href: >-
          https://api.soundcloud.com/collection?client_id=client_id&page_size=10&cursor=1234567
    NonExpiringToken:
      value:
        access_token: some string
        scope: non-expiring
    NotFound:
      value:
        code: 404
        link: 'https://developers.soundcloud.com/docs/api/explorer/open-api'
        message: 'Detailed message of errors, when available'
    OK:
      value:
        status: Status(200) - OK
    Password:
      value:
        client_id: CLIENT_ID
        client_secret: CLIENT_SECRET
        password: my-password
        username: my-user-name
    Playlist:
      value:
        artwork_url: ''
        created_at: '2020/07/16 16:09:54 +0000'
        description: null
        downloadable: true
        duration: 11000
        ean: null
        embeddable_by: all
        genre: ''
        id: 12345
        kind: playlist
        label: null
        label_id: null
        label_name: null
        last_modified: '2020/09/08 09:13:00 +0000'
        license: all-rights-reserved
        likes_count: 0
        permalink: permalink
        permalink_url: 'https://soundcloud.com/userPermalink/sets/permalink'
        playlist_type: ''
        purchase_title: null
        purchase_url: null
        release: null
        release_day: null
        release_month: null
        release_year: null
        sharing: public
        streamable: true
        tag_list: ''
        tags: ''
        title: permalink
        track_count: 2
        tracks:
          $ref: '#/x-components/examples/Track/value'
        tracks_uri: 'https://api.soundcloud.com/playlists/12345/tracks'
        type: ''
        uri: 'https://api.soundcloud.com/playlists/12345'
        user:
          $ref: '#/x-components/examples/UserOf/value'
        user_id: 1234
    Playlists:
      value:
        collection:
          $ref: '#/x-components/examples/Playlist/value'
        next_href: >-
          https://api.soundcloud.com/collection?client_id=client_id&page_size=10&cursor=1234567
    PlaylistsArray:
      description: 'Deprecated, use Playlists instead.'
      value:
        $ref: '#/x-components/examples/Playlist/value'
    RefreshToken:
      value:
        client_id: CLIENT_ID
        client_secret: CLIENT_SECRET
        grant_type: refresh_token
        refresh_token: 1234c331329477150e7b6056ff212345
    Streams:
      value:
        hls_mp3_128_url: 'https://cf-media.sndcdn.com/'
        hls_opus_64_url: 'https://cf-media.sndcdn.com/'
        http_mp3_128_url: 'https://cf-media.sndcdn.com/'
        preview_mp3_128_url: 'https://cf-media.sndcdn.com/'
    Success:
      value:
        status: 200 - OK
    Successful:
      value:
        status: 200 - Successful
    TooManyRequests:
      value:
        code: 429
        link: 'https://developers.soundcloud.com/docs/api/rate-limits#errors'
        message: 'Detailed message of errors, when available'
        spam_warning_urn: 'soundcloud:spam-warnings:1'
    Track:
      value:
        access: playable
        artwork_url: 'https://i1.sndcdn.com/artworks-large.jpg'
        available_country_codes: null
        bpm: null
        comment_count: 4
        commentable: true
        created_at: '2019/01/15 15:40:49 +0000'
        description: null
        download_count: 0
        download_url: 'https://api.soundcloud.com/tracks/1234/download'
        downloadable: false
        duration: 40000
        embeddable_by: all
        favoritings_count: 271
        genre: Rock
        id: 1234
        isrc: null
        key_signature: null
        kind: track
        label_name: some label
        license: all-rights-reserved
        permalink_url: 'https://soundcloud.com/userPermalink/trackPermalink'
        playback_count: 8027
        purchase_title: null
        purchase_url: null
        release: null
        release_day: 22
        release_month: 8
        release_year: 2019
        reposts_count: 18
        secret_uri: null
        sharing: public
        stream_url: 'https://api.soundcloud.com/tracks/1234/stream'
        streamable: true
        tag_list: ''
        title: Some title
        uri: 'https://api.soundcloud.com/tracks/1234'
        user:
          $ref: '#/x-components/examples/UserOf/value'
        user_favorite: true
        user_playback_count: 1
        waveform_url: 'https://wave.sndcdn.com/someString.png'
    TrackDataRequest:
      value:
        'track[artwork_data]': null
        'track[asset_data]': <binary string>
        'track[commentable]': true
        'track[description]': Public-api test sample upload
        'track[downloadable]': false
        'track[embeddable_by]': me
        'track[genre]': Pop
        'track[isrc]': null
        'track[label_name]': null
        'track[license]': no-rights-reserved
        'track[permalink]': test-drum-sample
        'track[purchase_url]': null
        'track[release]': null
        'track[release_date]': '2021-02-18T00:00:00.000Z'
        'track[sharing]': private
        'track[streamable]': true
        'track[tag_list]': null
        'track[title]': Test drum sample
    TrackMetadataRequest:
      value:
        'track[title]': Updated Test Track
    Tracks:
      value:
        collection:
          $ref: '#/x-components/examples/Track/value'
        next_href: >-
          https://api.soundcloud.com/collection?client_id=client_id&page_size=10&cursor=1234567
    TracksList:
      description: 'Deprecated, use Tracks instead.'
      value:
        $ref: '#/x-components/examples/Track/value'
    Unauthorized:
      value:
        code: 401
        link: 'https://developers.soundcloud.com/docs/api/explorer/open-api'
        message: 'Detailed message of errors, when available'
    UnprocessableEntity:
      value:
        code: 422
        link: 'https://developers.soundcloud.com/docs/api/explorer/open-api'
        message: 'Detailed message of errors, when available'
    User:
      value:
        avatar_url: 'https://i1.sndcdn.com/avatars.jpg'
        city: City
        country: Country
        created_at: '2018/01/01 12:08:25 +0000'
        description: null
        discogs_name: null
        first_name: First_name
        followers_count: 0
        followings_count: 0
        full_name: Full Name
        id: 12345
        kind: user
        last_modified: '2020/01/03 12:08:25 +0000'
        last_name: Last_name
        myspace_name: null
        permalink: permalink
        permalink_url: 'https://soundcloud.com/permalink'
        plan: Free
        playlist_count: 3
        public_favorites_count: 20
        reposts_count: 0
        subscriptions:
          - product:
              id: some-id
              name: some.name
        track_count: 0
        upload_seconds_left: 10800
        uri: 'https://api.soundcloud.com/users/1234'
        username: some.user
        website: null
        website_title: null
    UserOf:
      value:
        avatar_url: 'https://i1.sndcdn.com/avatars-large.jpg'
        id: 12345
        kind: user
        last_modified: '2020/09/03 14:08:25 +0000'
        permalink: permalink
        permalink_url: 'https://soundcloud.com/permalink'
        uri: 'https://api.soundcloud.com/users/12345'
        username: user.name
    Users:
      value:
        collection:
          $ref: '#/x-components/examples/User/value'
        next_href: >-
          https://api.soundcloud.com/collection?client_id=client_id&page_size=10&cursor=1234567
    UsersList:
      description: 'Deprecated, use Users instead.'
      value:
        $ref: '#/x-components/examples/User/value'
    WebProfiles:
      value:
        - created_at: '1995/10/20 12:10:39 +0000'
          id: 1234
          kind: web-profile
          service: facebook
          title: my facebook
          url: 'http://facebook.com'
          username: username
  parameters:
    access:
      collectionFormat: multi
      default: 'playable,preview'
      description: >
        Filters content by level of access the user (logged in or anonymous) has
        to the track. The result list will include only tracks with the
        specified access. Include all options if you'd like to see all possible
        tracks. See `Track#access` schema for more details.
      in: query
      items:
        enum:
          - playable
          - preview
          - blocked
        type: string
      name: access
      type: array
    bpm:
      description: 'Return tracks with a specified bpm[from], bpm[to]'
      in: query
      name: bpm
      required: false
      type: object
    client_id:
      description: The client id belonging to your application
      in: query
      name: client_id
      required: true
      type: string
      x-example: some client
    comment_id:
      description: SoundCloud comment id
      example: 123456
      in: path
      name: comment_id
      required: true
      schema:
        type: integer
    connection_id:
      description: SoundCloud connection id
      in: path
      name: connection_id
      required: true
      type: integer
      x-example: 123456
    created_at:
      description: '(yyyy-mm-dd hh:mm:ss) return tracks created within the specified dates'
      in: query
      name: created_at
      required: false
      type: object
    duration:
      description: Return tracks within a specified duration range
      in: query
      name: duration
      required: false
      type: object
    fake_playlist_id:
      description: SoundCloud playlist id
      in: path
      name: playlist_id
      required: true
      type: integer
      x-example: 10
    follower_id:
      description: SoundCloud User id to denote a Follower
      in: path
      name: follower_id
      required: true
      type: integer
      x-example: 743372812
    following_id:
      description: SoundCloud User id to denote a Following of a user
      in: path
      name: following_id
      required: true
      type: integer
      x-example: 25219981
    genres:
      description: A comma separated list of genres
      in: query
      name: genres
      required: false
      type: string
      x-example: 'Pop,House'
    ids:
      description: A comma separated list of track ids to filter on
      in: query
      name: ids
      required: false
      type: string
      x-example: '1,2,3'
    limit:
      default: 50
      description: Number of results to return in the collection.
      in: query
      maximum: 200
      minimum: 1
      name: limit
      required: false
      type: integer
      x-example: 2
    linked_partitioning:
      description: >-
        Returns paginated collection of items (recommended, returning a list
        without pagination is deprecated and should not be used)
      in: query
      name: linked_partitioning
      required: false
      type: boolean
      x-example: true
    offset:
      default: 0
      deprecated: true
      description: 'Offset of first result. Deprecated, use `linked_partitioning` instead.'
      in: query
      name: offset
      required: false
      type: integer
      x-example: 0
    playlist_id:
      description: SoundCloud playlist id
      in: path
      name: playlist_id
      required: true
      type: integer
      x-example: 1212781357
    q:
      description: search
      in: query
      name: q
      required: true
      type: string
      x-example: hello
    redirect_uri:
      description: The redirect uri you have configured for your application
      in: query
      name: redirect_uri
      required: true
      type: string
      x-example: 'https://soundcloud.com'
    repost_playlist_id:
      description: SoundCloud playlist id
      in: path
      name: playlist_id
      required: true
      type: integer
      x-example: 1205584273
    response_type:
      description: It's recommended to use "code" here
      enum:
        - code
        - token
        - code_and_token
      in: query
      name: response_type
      required: true
      type: string
      x-example: code
    scope:
      description: Scope
      in: query
      name: scope
      required: true
      type: string
      x-example: default
    secret_token:
      description: A secret token to fetch private playlists/tracks
      in: query
      name: secret_token
      required: false
      type: string
    state:
      description: >-
        Any value included here will be appended to the redirect URI. Use this
        for CSRF protection.
      in: query
      name: state
      required: false
      type: string
      x-example: encrypted_session_info
    tag:
      description: tag
      example: some tag
      in: path
      name: tag
      required: true
      schema:
        type: string
    tags:
      description: A comma separated list of tags
      in: query
      name: tags
      required: false
      type: string
      x-example: test
    test_track_id:
      description: SoundCloud Track id
      in: path
      name: track_id
      required: true
      type: integer
      x-example: 1015448728
    track_id:
      description: SoundCloud Track id
      in: path
      name: track_id
      required: true
      type: integer
      x-example: 308946187
    url:
      description: SoundCloud URL
      in: query
      name: url
      required: true
      type: string
      x-example: 'https://soundcloud.com/user-434241656'
    user_id:
      description: SoundCloud User id
      in: path
      name: user_id
      required: true
      type: integer
      x-example: 948745750
    user_id_to_follow:
      description: SoundCloud User id
      in: path
      name: user_id
      required: true
      type: integer
      x-example: 743372812
  responses:
    Accepted:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Accepted'
      description: Accepted
    Activities:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Activities'
          schema:
            $ref: '#/definitions/Activities'
      description: Success
    BadRequest:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/BadRequest'
          schema:
            $ref: '#/definitions/Error'
      description: Bad Request
    Comment:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Comment'
          schema:
            $ref: '#/definitions/Comment'
      description: Success
    Comments:
      content:
        application/json; charset=utf-8:
          examples:
            commentsList:
              $ref: '#/x-components/examples/CommentsList'
            default:
              $ref: '#/x-components/examples/Comments'
          schema:
            oneOf:
              - $ref: '#/definitions/Comments'
              - $ref: '#/definitions/CommentsList'
      description: Success
    CommentsList:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/CommentsList'
          schema:
            $ref: '#/definitions/CommentsList'
      description: Success
    CompleteUser:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/CompleteUser'
          schema:
            $ref: '#/definitions/CompleteUser'
      description: Success
    Connection:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Connection'
          schema:
            $ref: '#/definitions/Connection'
      description: Success
    Connections:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Connections'
          schema:
            $ref: '#/definitions/Connections'
      description: Success
    Created:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Created'
      description: Created
    Forbidden:
      content:
        application/json:
          examples:
            default:
              $ref: '#/x-components/examples/Forbidden'
          schema:
            $ref: '#/definitions/Error'
      description: Forbidden
    Found:
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/definitions/Found'
      description: Found
    FoundHtml:
      content:
        application/json; charset=utf-8:
          schema:
            type: string
      description: Found
    LegacyPlaylist:
      content:
        application/json; charset=utf-8:
          schema:
            description: Soundcloud Playlist Object
            properties:
              artwork_url:
                description: URL to a JPEG image.
                type: string
              created_at:
                description: Created timestamp.
                type: string
              description:
                description: Playlist description.
                type: string
              downloadable:
                description: is downloadable.
                type: boolean
              duration:
                description: Playlist duration.
                type: integer
              ean:
                description: European Article Number.
                type: string
              embeddable_by:
                description: Embeddable by.
                type: string
              genre:
                description: Playlist genre.
                type: string
              id:
                description: Playlist identifier.
                type: integer
              kind:
                description: Type of Soundcloud object (playlist).
                type: string
              label_id:
                description: Label user identifier.
                type: integer
              label_name:
                description: Label name.
                type: string
              last_modified:
                description: Last modified timestamp.
                type: string
              license:
                description: License.
                type: string
              permalink:
                description: Playlist permalink.
                type: string
              permalink_url:
                description: Playlist permalink URL.
                type: string
              playlist_type:
                description: Type of playlist.
                type: string
              purchase_title:
                description: Purchase title.
                type: string
              purchase_url:
                description: Purchase URL.
                type: string
              release:
                description: Release.
                type: string
              release_day:
                description: Day of release.
                type: integer
              release_month:
                description: Month of release.
                type: integer
              release_year:
                description: Year of release.
                type: integer
              sharing:
                description: Type of sharing (private/public).
                type: string
              streamable:
                description: Is streamable.
                type: boolean
              tag_list:
                description: Tags.
                type: string
              title:
                description: Playlist title.
                type: string
              track_count:
                description: Count of tracks.
                type: integer
              tracks:
                description: List of tracks.
                items:
                  description: Soundcloud Track object.
                  properties:
                    artwork_url:
                      description: URL to a JPEG image.
                      type: string
                    bpm:
                      description: Tempo.
                      type: integer
                    comment_count:
                      description: Number of comments.
                      type: integer
                    commentable:
                      description: Is commentable.
                      type: boolean
                    created_at:
                      description: Created timestamp.
                      type: string
                    description:
                      description: Track description.
                      type: string
                    download_count:
                      description: NUmber of downloads.
                      type: integer
                    downloadable:
                      description: Is downloadable.
                      type: string
                    duration:
                      description: Track duration.
                      type: integer
                    embeddable_by:
                      deprecated: true
                      description: Embeddable by.
                      type: string
                    favoritings_count:
                      description: Number of favoritings.
                      type: integer
                    genre:
                      description: Genre
                      type: string
                    id:
                      description: Track identifier.
                      type: integer
                    isrc:
                      description: ISRC code.
                      type: string
                    key_signature:
                      description: Key signature.
                      type: string
                    kind:
                      description: Type of object (track).
                      type: string
                    label_name:
                      description: Label user name.
                      type: string
                    license:
                      description: License
                      type: string
                    permalink_url:
                      description: Permalink URL.
                      type: string
                    playback_count:
                      description: Number of plays.
                      type: integer
                    purchase_title:
                      description: Purchase title.
                      type: string
                    purchase_url:
                      description: Purchase URL.
                      type: string
                    release:
                      description: Release.
                      type: string
                    release_day:
                      description: Day of release.
                      type: integer
                    release_month:
                      description: Month of release.
                      type: integer
                    release_year:
                      description: Year of release.
                      type: integer
                    sharing:
                      description: Type of sharing (public/private).
                      type: string
                    stream_url:
                      description: URL to stream.
                      type: string
                    streamable:
                      description: Is streamable.
                      type: boolean
                    tag_list:
                      description: Tags.
                      type: string
                    title:
                      description: Track title.
                      type: string
                    uri:
                      description: Track URI.
                      type: string
                    user:
                      $ref: '#/definitions/MetaUser'
                      description: User who uploaded a track
                    user_favorite:
                      description: Is user's favourite.
                      type: boolean
                    user_playback_count:
                      description: Number of plays by a user.
                      type: integer
                    waveform_url:
                      description: Waveform URL.
                      type: string
                  type: object
                type: array
              type:
                description: Playlist type.
                type: string
              uri:
                description: Playlist URI.
                type: string
              user:
                $ref: '#/definitions/MetaUser'
              user_id:
                description: User identifier.
                type: integer
            type: object
      description: Success
    MetaUser:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/UserOf'
          schema:
            $ref: '#/definitions/MetaUser'
      description: Success
    MetaUsers:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/MetaUsers'
          schema:
            $ref: '#/definitions/MetaUsers'
      description: Success
    NotFound:
      content:
        application/json:
          examples:
            default:
              $ref: '#/x-components/examples/NotFound'
          schema:
            $ref: '#/definitions/Error'
      description: Not Found
    Playlist:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Playlist'
          schema:
            $ref: '#/definitions/Playlist'
      description: Success
    Playlists:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Playlists'
            playlistsArray:
              $ref: '#/x-components/examples/PlaylistsArray'
          schema:
            oneOf:
              - $ref: '#/definitions/Playlists'
              - $ref: '#/definitions/PlaylistsArray'
      description: Success
    PlaylistsArray:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/PlaylistsArray'
          schema:
            $ref: '#/definitions/PlaylistsArray'
      description: Success
    Streams:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Streams'
          schema:
            $ref: '#/definitions/Streams'
      description: Success
    Success:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Success'
      description: Success
    Successful:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Successful'
      description: Success
    TooManyRequests:
      content:
        application/json:
          examples:
            default:
              $ref: '#/x-components/examples/TooManyRequests'
          schema:
            $ref: '#/definitions/TooManyRequests'
      description: Too Many Requests
    Track:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Track'
          schema:
            $ref: '#/definitions/Track'
      description: Success
    Tracks:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Tracks'
            tracksList:
              $ref: '#/x-components/examples/TracksList'
          schema:
            oneOf:
              - $ref: '#/definitions/Tracks'
              - $ref: '#/definitions/TracksList'
      description: Success
    TracksList:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/TracksList'
          schema:
            $ref: '#/definitions/TracksList'
      description: Success
    Unauthorized:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Unauthorized'
          schema:
            $ref: '#/definitions/Error'
      description: Unauthorized
    UnprocessableEntity:
      content:
        application/json:
          examples:
            default:
              $ref: '#/x-components/examples/UnprocessableEntity'
          schema:
            $ref: '#/definitions/Error'
      description: Unprocessable Entity
    User:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/User'
          schema:
            $ref: '#/definitions/User'
      description: Success
    Users:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/Users'
            usersList:
              $ref: '#/x-components/examples/UsersList'
          schema:
            oneOf:
              - $ref: '#/definitions/Users'
              - $ref: '#/definitions/UsersList'
      description: Success
    UsersList:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/UsersList'
          schema:
            $ref: '#/definitions/UsersList'
      description: Success
    WebProfiles:
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/x-components/examples/WebProfiles'
          schema:
            $ref: '#/definitions/WebProfiles'
      description: Success

